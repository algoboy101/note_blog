<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博文导读</title>
    <url>/ca0f.html</url>
    <content><![CDATA[<h2 id="Point-Cloud-Library-PCL"><a href="#Point-Cloud-Library-PCL" class="headerlink" title="Point Cloud Library (PCL)"></a>Point Cloud Library (PCL)</h2><ul>
<li><a href="https://blog.xuezhisd.top/tags/PCL/">PCL系列——平面模型分割</a></li>
<li><a href="https://blog.xuezhisd.top/tags/PCL/">PCL系列——拼接两个点云</a></li>
<li><a href="https://blog.xuezhisd.top/tags/PCL/">PCL系列——三维重构之泊松重构</a></li>
<li><a href="https://blog.xuezhisd.top/tags/PCL/">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="https://blog.xuezhisd.top/tags/PCL/">PCL系列——三维重构之移动立方体算法</a></li>
<li><a href="https://blog.xuezhisd.top/tags/PCL/">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="https://blog.xuezhisd.top/tags/PCL/">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="https://blog.xuezhisd.top/tags/PCL/">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="https://blog.xuezhisd.top/tags/PCL/">PCL系列——如何可视化深度图像</a></li>
<li><a href="https://blog.xuezhisd.top/tags/PCL/">PCL系列——从深度图像(RangeImage)中提取NARF关键点</a></li>
<li><a href="https://blog.xuezhisd.top/tags/PCL/">PCL系列——从深度图像（RangeImage）中提取NARF关键点</a></li>
<li><a href="https://blog.xuezhisd.top/tags/PCL/">PCL系列——读入PCD格式文件</a></li>
</ul>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul>
<li><a href="https://blog.xuezhisd.top/tags/Java/">编码练习——Java-1-基础</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">编码练习——Java-2-流程控制</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">编码练习——Java-3-数组</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">编码练习——Java-4-字符串</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">编码练习——Java-5-类和对象</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">编码练习——Java-5-接口、继承与多态</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">编码练习——Java-6-类的高级特性</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">编码练习——Java-7-集合类</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">编码练习——Java-8-输入/输出</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">编码练习——Java-数组-API-练习</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">编码练习——Java-String-API-练习</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">刷题-CC150-Java实现</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">剑指Offer——Java答案</a></li>
<li><a href="https://blog.xuezhisd.top/tags/Java/">学习笔记——Java</a></li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>导读</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04部署django-sspanel</title>
    <url>/2729.html</url>
    <content><![CDATA[<h1 id="Ubuntu18-04部署django-sspanel"><a href="#Ubuntu18-04部署django-sspanel" class="headerlink" title="Ubuntu18.04部署django-sspanel"></a>Ubuntu18.04部署django-sspanel</h1><h2 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> update</span><br><span class="line">apt-<span class="builtin-name">get</span> upgrade</span><br></pre></td></tr></table></figure>
<h2 id="安装mysql和ngnix"><a href="#安装mysql和ngnix" class="headerlink" title="安装mysql和ngnix"></a>安装mysql和ngnix</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> mysql-<span class="keyword">client</span> mysql-<span class="keyword">server</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure>
<h2 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h2><ul>
<li>安装依赖包<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install -y make build-essential libssl-<span class="built_in">dev</span> zlib1g-<span class="built_in">dev</span> libbz2-<span class="built_in">dev</span> \</span><br><span class="line">libreadline-<span class="built_in">dev</span> libsqlite3-<span class="built_in">dev</span> wget curl llvm libncurses5-<span class="built_in">dev</span> libncursesw5-<span class="built_in">dev</span> \</span><br><span class="line">xz-utils tk-<span class="built_in">dev</span> libffi-<span class="built_in">dev</span> liblzma-<span class="built_in">dev</span> libedit-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></li>
<li>一键安装<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -L https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/pyenv/</span>pyenv-installer<span class="regexp">/master/</span>bin<span class="regexp">/pyenv-installer | bash</span></span><br></pre></td></tr></table></figure></li>
<li>修改配置文件：<code>~/.bashrc</code>。将以下内容添加到最后。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/root/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br></pre></td></tr></table></figure></li>
<li>使配置生效。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使自己的profile生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>使用<code>pyenv</code>安装<code>python3</code><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">pyenv install <span class="number">3.7</span><span class="number">.5</span></span><br></pre></td></tr></table></figure></li>
<li>创建Django-sspanel 运行的虚拟环境<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">pyenv virtualenv <span class="number">3.7</span><span class="number">.5</span> venv-sspanel</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Clone项目并安装第三方库"><a href="#Clone项目并安装第三方库" class="headerlink" title="Clone项目并安装第三方库"></a>Clone项目并安装第三方库</h2><ul>
<li>创建并切换目录：<code>/home/www/</code><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /<span class="built_in">home</span>/www</span><br><span class="line">cd /<span class="built_in">home</span>/www/</span><br></pre></td></tr></table></figure></li>
<li>clone 项目到本地。注意：dev为最新分支。<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">-b</span> dev https://github.com/algoboy101/django-sspanel.git</span><br><span class="line">cd /home/www/django-sspanel</span><br><span class="line">git branch</span><br></pre></td></tr></table></figure></li>
<li>将项目文件夹的环境设置为 virtualenv<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">pyenv <span class="keyword">local</span> venv-sspanel</span><br></pre></td></tr></table></figure></li>
<li>安装第三方包<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> libmysqlclient-dev</span><br><span class="line">pip <span class="keyword">install</span> mysqlclient</span><br></pre></td></tr></table></figure></li>
<li>修改<code>requirements.txt</code>文件：<code>Django&gt;=2.2.1</code> -&gt; <code>Django==2.2.1</code>。并安装依赖。<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -r requirements.txt</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="设置mysql并创建数据库"><a href="#设置mysql并创建数据库" class="headerlink" title="设置mysql并创建数据库"></a>设置mysql并创建数据库</h2><h3 id="设置编码"><a href="#设置编码" class="headerlink" title="设置编码"></a>设置编码</h3><ul>
<li>参考 <a href="https://coding.imooc.com/learn/questiondetail/25427.html" target="_blank" rel="noopener">(1366, “Incorrect string value: ‘\xE7\x94\xA8\xE6\x88\xB7’ for column ‘name’_实战问答</a> 修改编码配置文件。<code>vim /etc/mysql/mysql.conf.d/mysqld.cnf</code>。</li>
<li>在文件最后添加以下内容。</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_general_ci</span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET NAMES utf8'</span></span><br><span class="line"></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure>
<ul>
<li>重启mysql，生效。<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service mysql restart</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="其它设置"><a href="#其它设置" class="headerlink" title="其它设置"></a>其它设置</h3><ul>
<li>参考 <a href="https://blog.csdn.net/qq_32786873/article/details/78846008" target="_blank" rel="noopener">MySQL——mysql_secure_installation 安全配置向导 - 勿忘初心的博客</a> 完成安全设置。</li>
<li>参考 <a href="https://blog.csdn.net/hello_world_qwp/article/details/79551789" target="_blank" rel="noopener">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements - Spring Boot-Common On With You</a> 设置密码策略。<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 密码安全级别：低</span></span><br><span class="line"><span class="builtin-name">set</span> global <span class="attribute">validate_password_policy</span>=LOW;</span><br><span class="line"><span class="comment"># 最小长度：6</span></span><br><span class="line"><span class="builtin-name">set</span> global <span class="attribute">validate_password_length</span>=6;</span><br></pre></td></tr></table></figure></li>
<li>参考 <a href="https://www.cnblogs.com/shuyuq/p/10370700.html" target="_blank" rel="noopener">MySQL安装后无法用root用户访问的问题 - 行走—舒 - 博客园</a>，解决root访问不需要密码的问题。</li>
<li>思路是：新建一个用户：<code>django</code>，拥有所有权限。（密码是：django，注意修改）。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'django'</span>@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'django'</span>;</span><br><span class="line"><span class="comment"># 查看所有用户列表，看到django。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">User</span>, Host, <span class="keyword">HEX</span>(authentication_string) <span class="keyword">FROM</span> mysql.user;</span><br></pre></td></tr></table></figure></li>
<li>验证是否能够通过密码登录。执行命令：<code>mysql -u django -p django</code>。</li>
</ul>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul>
<li>参考 <a href="http://c.biancheng.net/view/2415.html" target="_blank" rel="noopener">MySQL删除数据库（DROP DATABASE语句）</a>，创建数据库：<code>sspanel</code>，用于django-sspanel。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建命令</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> sspanel;</span><br><span class="line"><span class="comment"># 删除命令</span></span><br><span class="line"><span class="comment"># DROP DATABASE sspanel;</span></span><br><span class="line"><span class="comment"># 查看数据库列表，看到sspanel数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="配置django-sspanel"><a href="#配置django-sspanel" class="headerlink" title="配置django-sspanel"></a>配置django-sspanel</h2><ul>
<li>配置文件目录：<code>/home/www/django-sspanel/configs/</code><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入配置文件夹</span></span><br><span class="line">cd configs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件结构</span></span><br><span class="line">➜ tree</span><br><span class="line">.</span><br><span class="line">├── __init__.py</span><br><span class="line">├── default</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── cron.py # 设置计划任务</span><br><span class="line">│   ├── db.py   # 设置数据库</span><br><span class="line">│   ├── email.py # 设置邮箱</span><br><span class="line">│   └── sites.py # 设置杂七杂八的东西</span><br><span class="line">├── development.py</span><br><span class="line">├── mysqld</span><br><span class="line">│   └── mysqld_charset.cnf</span><br><span class="line">├── nginx</span><br><span class="line">│   └── nginx.example.conf</span><br><span class="line">└── production.py # 设置数据库密码</span><br><span class="line"></span><br><span class="line">**每一项配置文件都要打开进去自己设置~**</span><br></pre></td></tr></table></figure>
<h3 id="修改配置文件中数据库相关的用户名和密码"><a href="#修改配置文件中数据库相关的用户名和密码" class="headerlink" title="修改配置文件中数据库相关的用户名和密码"></a>修改配置文件中数据库相关的用户名和密码</h3></li>
<li><p>修改 <code>/home/www/django-sspanel/configs/default/db.py</code></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql 设置</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"ENGINE"</span>: <span class="string">"django_prometheus.db.backends.mysql"</span>,</span><br><span class="line">        <span class="string">"NAME"</span>: <span class="string">"sspanel"</span>,</span><br><span class="line">        <span class="string">"USER"</span>: <span class="string">"django"</span>, <span class="comment"># 用户名 （和前面对应）</span></span><br><span class="line">        <span class="string">"PASSWORD"</span>: <span class="string">"django"</span>, <span class="comment"># 密码 （和前面对应）</span></span><br><span class="line">        <span class="string">"HOST"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"PORT"</span>: <span class="string">"3306"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"autocommit"</span>: True,</span><br><span class="line">            <span class="string">"init_command"</span>: <span class="string">"SET sql_mode='STRICT_TRANS_TABLES'"</span>,</span><br><span class="line">            <span class="string">"charset"</span>: <span class="string">"utf8mb4"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>/home/www/django-sspanel/configs/production.py</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">DATABASES[<span class="string">"default"</span>].update(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"PASSWORD"</span>: <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">"MYSQL_PASSWORD"</span>, <span class="string">"django"</span>), # 密码</span><br><span class="line">        <span class="string">"HOST"</span>: <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">"MYSQL_HOST"</span>, <span class="string">"127.0.0.1"</span>),</span><br><span class="line">        <span class="string">"USER"</span>: <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">"MYSQL_USER"</span>, <span class="string">"django"</span>), # 用户名</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="配置ngnix"><a href="#配置ngnix" class="headerlink" title="配置ngnix"></a>配置ngnix</h2><ul>
<li><code>vim /etc/nginx/conf.d/vhost.conf</code>，填入以下内容。<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> css.xuezhisd.top; <span class="comment"># 项目域名</span></span><br><span class="line">        <span class="attribute">root</span>  /home/www/django-sspanel; <span class="comment"># 项目的目录</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /media  &#123;</span><br><span class="line">            <span class="attribute">alias</span> /home/www/django-sspanel/media;  <span class="comment"># your Django project's media files - amend as required</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /static</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attribute">alias</span>  /home/www/django-sspanel/static; <span class="comment">#静态文件地址，js/css</span></span><br><span class="line">          <span class="attribute">expires</span>  <span class="number">12h</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attribute">include</span> uwsgi_params;</span><br><span class="line">          <span class="attribute">uwsgi_pass</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>重启。<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service nginx restart</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="测试项目是否正常运行。"><a href="#测试项目是否正常运行。" class="headerlink" title="测试项目是否正常运行。"></a>测试项目是否正常运行。</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">    <span class="variable">$ </span> cd .. <span class="comment"># 切回项目根目录</span></span><br><span class="line">    <span class="variable">$ </span> python manage.py migrate <span class="comment"># 通过djang ORM 建立所需数据库表   </span></span><br><span class="line">    <span class="variable">$ </span> python manage.py runserver <span class="comment"># 测试项目是否运行</span></span><br><span class="line">    <span class="variable">$ </span> python manage.py collectstatic <span class="comment"># 收集静态文件</span></span><br><span class="line">创建管理员账号</span><br><span class="line">    <span class="variable">$ </span> python manage.py createsuperuser <span class="comment"># 按照提示创建即可</span></span><br></pre></td></tr></table></figure>
<h3 id="启动并访问"><a href="#启动并访问" class="headerlink" title="启动并访问"></a>启动并访问</h3><ul>
<li>执行以下命令，启动。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">uwsgi</span> <span class="selector-tag">uwsgi</span><span class="selector-class">.ini</span></span><br></pre></td></tr></table></figure></li>
<li>访问<code>http://ip/</code>,即可看到网页。</li>
</ul>
<h2 id="设置crontab任务"><a href="#设置crontab任务" class="headerlink" title="设置crontab任务"></a>设置crontab任务</h2><p><code>`
python manage.py crontab add</code></p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://www.jianshu.com/p/f15cb9571cab" target="_blank" rel="noopener">pyenv快速入门 - 简书</a></li>
<li><a href="http://c.biancheng.net/view/2415.html" target="_blank" rel="noopener">MySQL删除数据库（DROP DATABASE语句）</a></li>
<li><a href="https://coding.imooc.com/learn/questiondetail/25427.html" target="_blank" rel="noopener">(1366, “Incorrect string value: ‘\xE7\x94\xA8\xE6\x88\xB7’ for column ‘name’_实战问答</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>2018-9-12-论文笔记-Semi-Supervised Deep Learning for Monocular Depth Map Prediction</title>
    <url>/d97d.html</url>
    <content><![CDATA[<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul>
<li>提出了一个半监督的深度估计算法：有监督loss + 无监督loss。</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li>激光雷达数据的问题：<ul>
<li>稀疏</li>
<li>噪声的影响</li>
<li>标定不准确的影响</li>
</ul>
</li>
<li>有监督loss 和 无监督loss：<ul>
<li>使用激光雷达获取的稀疏的有效点做有监督loss训练。smooth_l1。</li>
<li>使用其它的像素点构建无监督loss。通过左右图像 + warp一致构建loss。</li>
<li>为了保证边缘的锐利度，根据边缘有构建了一个loss。</li>
</ul>
</li>
<li></li>
<li><p>算法框架和无监督的双目算法基本一致，只是加了有监督loss，变成了半监督算法。<br><img alt="算法框架" data-src="https://www.github.com/xuezhisd/xuezhisd.github.io.img/raw/dev/imgs/1536709268593.png"></p>
</li>
<li>损失函数没有什么新意，在其他论文中都有出现。不管是有监督的smooth_l1，还是无监督loss。</li>
<li>评价准则也是常用的评价方法。</li>
<li><del>~除了半监督，没啥新奇的地方。</del>~</li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://github.com/Yevkuzn/semodepth" target="_blank" rel="noopener">代码</a></li>
<li><a href="https://blog.csdn.net/Kevin_cc98/article/details/78935252" target="_blank" rel="noopener">论文笔记-深度估计(1)Depth Map Prediction from a Single Image using a Multi-Scale Deep Network</a></li>
<li><a href="https://blog.csdn.net/Kevin_cc98/article/details/78935650" target="_blank" rel="noopener">论文笔记-深度估计(2) Fully Convolutional Networks for Semantic Segmentation</a></li>
<li><a href="https://blog.csdn.net/Kevin_cc98/article/details/78935659" target="_blank" rel="noopener">论文笔记-深度估计(3)Predicting Depth, Surface Normals and Semantic Labels with a Common Multi-Scale…</a></li>
<li><a href="https://blog.csdn.net/Kevin_cc98/article/details/78937773" target="_blank" rel="noopener">论文笔记-深度估计(4) Semi-Supervised Deep Learning for Monocular Depth Map Prediction</a></li>
</ul>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>论文</tag>
      </tags>
  </entry>
  <entry>
    <title>2018-9-11-NYU Depth v2数据库相关信息</title>
    <url>/c7a7.html</url>
    <content><![CDATA[<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>NYU Depth V2</p>
<p>链接</p>
<h2 id="Indoor-Segmentation-and-Support-Inference-from-RGBD-Images"><a href="#Indoor-Segmentation-and-Support-Inference-from-RGBD-Images" class="headerlink" title="Indoor Segmentation and Support Inference from RGBD Images"></a>Indoor Segmentation and Support Inference from RGBD Images</h2><ul>
<li>贡献：NYU数据集</li>
<li>主页：<a href="https://cs.nyu.edu/~silberman/projects/indoor_scene_seg_sup.html" target="_blank" rel="noopener">https://cs.nyu.edu/~silberman/projects/indoor_scene_seg_sup.html</a></li>
</ul>
<h2 id="Predicting-Depth-Surface-Normals-and-Semantic-Labels-with-a-Common-Multi-Scale-Convolutional-Architecture"><a href="#Predicting-Depth-Surface-Normals-and-Semantic-Labels-with-a-Common-Multi-Scale-Convolutional-Architecture" class="headerlink" title="Predicting Depth, Surface Normals and Semantic Labels with a Common Multi-Scale Convolutional Architecture"></a>Predicting Depth, Surface Normals and Semantic Labels with a Common Multi-Scale Convolutional Architecture</h2><h2 id="Depth-Map-Prediction-from-a-Single-Image-using-a-Multi-Scale-Deep-Network"><a href="#Depth-Map-Prediction-from-a-Single-Image-using-a-Multi-Scale-Deep-Network" class="headerlink" title="Depth Map Prediction from a Single Image using a Multi-Scale Deep Network"></a>Depth Map Prediction from a Single Image using a Multi-Scale Deep Network</h2><ul>
<li>Eigen 论文切分方法</li>
<li>使用数据库：NYU Depth V2和KITTI</li>
<li>融合全局和局部信息，提高鲁棒性。本文通过coarse net估计全局depth结构，在更大分辨率上refine。</li>
<li><p>贡献：</p>
<ul>
<li><ol>
<li>由粗到细的策略。两个网络，粗网络使用全局特征，估计全局结构；精细网络使用局部特征，refine结果。</li>
</ol>
</li>
<li><ol>
<li>提出尺度无关的误差。</li>
</ol>
</li>
</ul>
</li>
<li><p>464个场景，249个作为训练集，215个作为测试集。</p>
</li>
<li>使用NYU Raw，构建训练集。</li>
<li>分辨率下采样1/2。（640x480→320x240）</li>
<li>由于RGB图和depth图采样频率不一致，需要做时间同步。（把一个图像对应多个depth的样本删除）。</li>
<li>使用相机参数对齐RGB图和depth图。</li>
<li>没有深度信息的像素点 mask掉。</li>
<li>为了去除窗子，开着的门和光谱引起的无效区域，也mask掉等于最小值和最大值的区域。</li>
<li>训练集有120K图像，经过均匀化每个场景的样本量，得到220K图像。1200 * 249=298800。</li>
<li>2M 训练coarse net；</li>
<li>1.5M 训练fine net；</li>
<li>batch_size：32</li>
<li><p>SGD优化算法；lr=0.001</p>
</li>
<li><p>Kitti Raw</p>
<ul>
<li>56个场景，28用于训练，28个用于测试。</li>
<li>每个场景有800张图像；去除汽车静止的图片，避免重复。</li>
<li>左右摄像头数据都使用了，但不做关联。</li>
<li>训练集有20K图像，经过均匀化每个场景的样本量，扩充至40K。</li>
</ul>
</li>
<li><p>使用最近邻上采样，将预测的低分辨率输出 还原到 原始分辨率。</p>
</li>
<li><p>切分带标签的数据集</p>
<ul>
<li>train:795</li>
<li>test:654</li>
<li><a href="https://github.com/janivanecky/Depth-Estimation/tree/master/dataset" target="_blank" rel="noopener">https://github.com/janivanecky/Depth-Estimation/tree/master/dataset</a></li>
</ul>
</li>
<li><p>评价指标如下所示：<br><img alt="enter description here" data-src="https://www.github.com/xuezhisd/xuezhisd.github.io.img/raw/dev/imgs/1536671720648.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>论文</tag>
      </tags>
  </entry>
  <entry>
    <title>2018-9-11-配置小书匠的hexo blog模板</title>
    <url>/55b4.html</url>
    <content><![CDATA[<h2 id="模板内容"><a href="#模板内容" class="headerlink" title="模板内容"></a>模板内容</h2><ul>
<li>按照以下填写模板，即可。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: &lt;% print((<span class="keyword">new</span> <span class="constructor">Date()</span>).get<span class="constructor">FullYear()</span>.<span class="keyword">to</span><span class="constructor">String()</span>+ <span class="character">'-'</span>+ ((<span class="keyword">new</span> <span class="constructor">Date()</span>).get<span class="constructor">Month()</span> + <span class="number">1</span>).<span class="keyword">to</span><span class="constructor">String()</span> + <span class="character">'-'</span>+ (<span class="keyword">new</span> <span class="constructor">Date()</span>).get<span class="constructor">Date()</span>.<span class="keyword">to</span><span class="constructor">String()</span>); %&gt;-未命名</span><br><span class="line">tags: </span><br><span class="line"> - 新建</span><br><span class="line">categories: </span><br><span class="line"> - 未分类</span><br><span class="line">comments: <span class="literal">true</span></span><br><span class="line">updated: <span class="literal">false</span></span><br><span class="line">author: 张学志</span><br><span class="line">date: &lt;% print((<span class="keyword">new</span> <span class="constructor">Date()</span>).get<span class="constructor">FullYear()</span>.<span class="keyword">to</span><span class="constructor">String()</span>+ <span class="character">'-'</span>+ ((<span class="keyword">new</span> <span class="constructor">Date()</span>).get<span class="constructor">Month()</span> + <span class="number">1</span>).<span class="keyword">to</span><span class="constructor">String()</span> + <span class="character">'-'</span>+ (<span class="keyword">new</span> <span class="constructor">Date()</span>).get<span class="constructor">Day()</span>.<span class="keyword">to</span><span class="constructor">String()</span> + <span class="character">' '</span> + (<span class="keyword">new</span> <span class="constructor">Date()</span>).get<span class="constructor">Hours()</span>.<span class="keyword">to</span><span class="constructor">String()</span> + <span class="character">':'</span> + (<span class="keyword">new</span> <span class="constructor">Date()</span>).get<span class="constructor">Minutes()</span>.<span class="keyword">to</span><span class="constructor">String()</span> + <span class="character">':'</span> + (<span class="keyword">new</span> <span class="constructor">Date()</span>).get<span class="constructor">Seconds()</span>.<span class="keyword">to</span><span class="constructor">String()</span>); %&gt;</span><br><span class="line">grammar_cjkRuby: <span class="literal">true</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&gt; 本文描述了：</span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>更新不保存？</li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>python-让jupyter notebook支持python3</title>
    <url>/81e2.html</url>
    <content><![CDATA[<ul>
<li>安装完jupyter notebook之后，默认只支持python2。</li>
<li>其实jupyter还支持非常多的编程语言。点击<a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels" target="_blank" rel="noopener">jupyter kernels list</a>查看jupyter支持哪些语言。</li>
</ul>
<h2 id="支持Python-3"><a href="#支持Python-3" class="headerlink" title="支持Python 3"></a>支持Python 3</h2><ul>
<li>命令行执行下面的命令</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> ipykernel</span><br><span class="line">python3 -m ipykernel <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<ul>
<li>重启jupyter</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">jupyter notebook</span></span><br></pre></td></tr></table></figure>
<ul>
<li>此时，发现可以新建python3的notebook了。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/8b90c2f12856" target="_blank" rel="noopener">如何让Jupyter Notebook支持多种编程语言？</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-为Python添加默认模块搜索路径</title>
    <url>/770a.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>总共有三种方法：①函数添加；②修改环境变量；③增加.pth文件。</li>
</ul>
<h2 id="一、函数添加"><a href="#一、函数添加" class="headerlink" title="一、函数添加"></a>一、函数添加</h2><ul>
<li>在<code>Python</code>中或Python文件中执行以下语句，将<code>/home/xuezhi.zhang/libs</code>添加到Python搜索目录中。</li>
</ul>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print sys.<span class="built_in">path</span></span><br><span class="line">sys.<span class="built_in">path</span>.append(<span class="string">"/home/xuezhi.zhang/libs"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="二、修改环境变量"><a href="#二、修改环境变量" class="headerlink" title="二、修改环境变量"></a>二、修改环境变量</h2><ul>
<li>用户可以通过修改环境变量PYTHONPATH来添加Python搜索目录。</li>
<li>将以下内容放到<code>~/.bashrc</code>中，并执行<code>source ~/.bashrc</code>使设置生效。</li>
<li>作用：将<code>${HOME}/workspace/mxnet/python</code>添加到Python搜索目录。</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PYTHONPATH</span>=<span class="variable">$&#123;PYTHONPATH&#125;</span>:$&#123;HOME&#125;/workspace/mxnet/python</span><br></pre></td></tr></table></figure>
<h2 id="三、增加-pth文件"><a href="#三、增加-pth文件" class="headerlink" title="三、增加.pth文件"></a>三、增加.pth文件</h2><ul>
<li>在site-packages目录中添加一个路径文件（如mypkpath.pth）。<strong>注意：必须以.pth为后缀</strong>。将你要加入的模块文件所在的目录名称写入该文件即可。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/shanql/articles/5477483.html" target="_blank" rel="noopener">为Python添加默认模块搜索路径</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-pip更改国内镜像</title>
    <url>/921f.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p>更改国内镜像源的原因：</p>
<ul>
<li>访问国外镜像速度太慢</li>
</ul>
</li>
<li><p>常见的国内镜像源有两个：</p>
<ul>
<li><a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">豆瓣</a></li>
<li><a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">清华</a></li>
</ul>
</li>
<li><p>推荐清华镜像源，因为我之前遇到有的包在豆瓣镜像上没装成功，换成清华镜像源之后，成功地安装了。</p>
</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>linux下，修改 <code>~/.pip/pip.con</code>f (没有就创建一个)， 修改 index-url至tuna，内容如下：<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url = http<span class="variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://blog.csdn.net/lambert310/article/details/52412059" target="_blank" rel="noopener">更改pip源至国内镜像，显著提升下载速度</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>软件-Clion关联(高亮)cuda代码</title>
    <url>/17be.html</url>
    <content><![CDATA[<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ul>
<li><p>依次点击：File -&gt; Setting -&gt; Editor -&gt; File Types，打开File Types对话框。</p>
</li>
<li><p>在上栏<code>Recognized File Types</code>单击<code>C/C++</code>。在下栏中点击<code>+</code>，将<code>*.cu</code>添加到规则中。</p>
</li>
<li><p>点击<code>Apply</code>和<code>OK</code>，使得配置生效。</p>
</li>
<li><p>现在cuda代码已经高亮了。</p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://stackoverflow.com/questions/39980645/enable-code-indexing-of-cuda-in-clion" target="_blank" rel="noopener">Enable code indexing of Cuda in Clion
</a></li>
<li><a href="http://www.jetbrains.com/help/clion/register-new-file-type-association-dialog.html" target="_blank" rel="noopener">Register New File Type Association Dialog</a></li>
<li><a href="http://www.jetbrains.com/help/clion/creating-and-registering-file-types.html" target="_blank" rel="noopener">Creating a file type</a></li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>运维-使用国内免费CDN加速GitHub Pages</title>
    <url>/7b97.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><ul>
<li>我的博客使用github pages服务搭建的。国内访问速度比较慢，因此想到CDN加速。</li>
</ul>
<h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><ul>
<li>CDN很多，但是好的服务要收费的，比如阿里云。</li>
<li>在网上找到一些免费的CDN。<a href="https://blog.csdn.net/qq_25281775/article/details/77479785" target="_blank" rel="noopener">《国内9大免费CDN汇总》</a></li>
<li>本文是使用了上面链接中的第一个：<strong>加速乐</strong>。</li>
</ul>
<h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><ul>
<li>我的域名<code>xuezhisd.top</code>是在阿里云（万网）购买的。</li>
</ul>
<h2 id="配置加速乐"><a href="#配置加速乐" class="headerlink" title="配置加速乐"></a>配置加速乐</h2><h4 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h4><ul>
<li>点击<a href="https://www.yunaq.com/" target="_blank" rel="noopener">https://www.yunaq.com/</a>，填写邮箱，手机号，密码等注册。</li>
<li>根据提示，完成邮箱和手机验证。</li>
</ul>
<h4 id="添加域名"><a href="#添加域名" class="headerlink" title="添加域名"></a>添加域名</h4><ul>
<li>点击右侧面板的<code>域名管理</code>，然后点击<code>添加域名</code>，添加需要CDN加速的域名。</li>
<li>有两种接入方式，NS和CNAME。由于CNAME需要备案，本文选择使用NS。</li>
<li>如下图所示，已经添加了<code>xuezhisd.top</code>。</li>
</ul>
<p><img alt="upload successful" data-src="/images/pasted-1.png"></p>
<ul>
<li>点击域名<code>xuezhisd.top</code>，添加子域名<code>blog.xuezhisd.top</code>。如下图所示。</li>
</ul>
<p><img alt="upload successful" data-src="/images/pasted-2.png"></p>
<h4 id="切换DNS"><a href="#切换DNS" class="headerlink" title="切换DNS"></a>切换DNS</h4><ul>
<li>点击<code>下一步，DNS切换</code>，按照提示，到阿里云上修改DNS。</li>
</ul>
<ul>
<li>在阿里云上，点击<code>DNS修改</code>，将默认的DNS修改为<code>ns1.jiasule.net</code>和<code>ns2.jiasule.net</code>。</li>
</ul>
<p><img alt="upload successful" data-src="/images/pasted-3.png"></p>
<ul>
<li>如下图所示，点击<code>立即接入</code>，提示<strong>域名切换成功</strong>。【这需要等几分钟】<br><img alt="upload successful" data-src="/images/pasted-4.png"></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>c++-定义类型别名</title>
    <url>/c71d.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>C++定义“类型别名”的3种方式：<ul>
<li><code>typedef</code></li>
<li><code>#define</code></li>
<li><code>using</code></li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> 原来类型名 新类型名；</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> 新类型名 原类型名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> 新类型名 = 原来类型名;</span><br></pre></td></tr></table></figure>
<h2 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h2><ul>
<li>一般情况下，using与typedef所表述的意思没有区别。但是，涉及到为模板类型设置别名时，就出现差异了。C++编译器不支持使用typedef关键词为模板类设置别名，但是使用using的方式声明一个关键词却是允许的，这是C++11标准才有的。</li>
<li><code>#define</code>和<code>typedef</code>的异同：<ul>
<li><code>#define</code>是在程序预处理阶段完成的 ,也叫宏定义；</li>
<li><code>#typedef</code>是在编译的时候完成的;后者更为灵活方便；</li>
<li><code>#define</code>在处理指针方面处理不好,<code>typedef</code>处理更加合适。</li>
</ul>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/qq_29924041/article/details/54588487" target="_blank" rel="noopener">类型别名typedef与#define</a></li>
<li><a href="https://www.cnblogs.com/yutongqing/p/6794652.html" target="_blank" rel="noopener">使用using与typedef来定义别名</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>c++-单例模式</title>
    <url>/7470.html</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>Singleton 是对全局变量的取代策略。</li>
<li>作用：保证一个类只能有一个实例，并提供一个全局唯一的访问点。<ul>
<li>仅有一个实例：通过类的静态成员变量来体现。</li>
<li>提供访问它的全局访问点：访问静态成员变量的静态成员函数来体现。</li>
</ul>
</li>
<li>定义一个单例类，使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。</li>
<li>唯一实例类Singleton在静态成员函数中隐藏创建实例的操作。</li>
<li>特征：<ul>
<li>它有一个指向唯一实例的静态指针，并且是私有的；</li>
<li>它有一个公有的函数，可以获取这个唯一的实例，并且在需要的时候创建该实例；</li>
<li>它的构造函数是私有的，这样就不能从别处创建该类的实例。</li>
</ul>
</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul>
<li>单例类的头文件：<code>Singleton.h</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xuezhi.zhang on 4/15/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SINGLETON_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SINGLETON_H_</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">static</span> Singleton* pInstance; <span class="comment">//静态成员，保存对象的唯一实例</span></span><br><span class="line">  Singleton(); <span class="comment">//私有化构造函数，使其无法在类外实例化</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Singleton* <span class="title">Instance</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//UNTITLED_SINGLETON_H</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>单例类的实现文件：<code>Singleton.pp</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xuezhi.zhang on 4/15/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Singleton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::pInstance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Singleton::Singleton() &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Singleton..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Singleton* Singleton::Instance() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">NULL</span> == pInstance)</span><br><span class="line">    pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  <span class="keyword">return</span> pInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Singleton::Destroy() &#123;</span><br><span class="line">  <span class="keyword">delete</span> pInstance;</span><br><span class="line">  pInstance = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destroy..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>调用文件：<code>main.h</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Singleton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Singleton* ps = Singleton::Instance();</span><br><span class="line">  Singleton::Destroy();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/jiese/p/3158517.html" target="_blank" rel="noopener">C++设计模式-Singleton</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>testing</title>
    <url>/5f9e.html</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>Singleton 是对全局变量的取代策略。</li>
<li>作用：保证一个类只能有一个实例，并提供一个全局唯一的访问点。<ul>
<li>仅有一个实例：通过类的静态成员变量来体现。</li>
<li>提供访问它的全局访问点：访问静态成员变量的静态成员函数来体现。</li>
</ul>
</li>
<li>定义一个单例类，使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。</li>
<li>唯一实例类Singleton在静态成员函数中隐藏创建实例的操作。</li>
<li>特征：<ul>
<li>它有一个指向唯一实例的静态指针，并且是私有的；</li>
<li>它有一个公有的函数，可以获取这个唯一的实例，并且在需要的时候创建该实例；</li>
<li>它的构造函数是私有的，这样就不能从别处创建该类的实例。</li>
</ul>
</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul>
<li>单例类的头文件：<code>Singleton.h</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xuezhi.zhang on 4/15/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SINGLETON_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SINGLETON_H_</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">static</span> Singleton* pInstance; <span class="comment">//静态成员，保存对象的唯一实例</span></span><br><span class="line">  Singleton(); <span class="comment">//私有化构造函数，使其无法在类外实例化</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Singleton* <span class="title">Instance</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//UNTITLED_SINGLETON_H</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>单例类的实现文件：<code>Singleton.pp</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by xuezhi.zhang on 4/15/18.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Singleton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::pInstance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Singleton::Singleton() &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Singleton..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Singleton* Singleton::Instance() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">NULL</span> == pInstance)</span><br><span class="line">    pInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  <span class="keyword">return</span> pInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Singleton::Destroy() &#123;</span><br><span class="line">  <span class="keyword">delete</span> pInstance;</span><br><span class="line">  pInstance = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destroy..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>调用文件：<code>main.h</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Singleton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Singleton* ps = Singleton::Instance();</span><br><span class="line">  Singleton::Destroy();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/jiese/p/3158517.html" target="_blank" rel="noopener">C++设计模式-Singleton</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>c++-工厂模式</title>
    <url>/d739.html</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。又叫虚拟构造子（Virtual Constructor）模式或者多态性工厂（Polymorphic Factory）模式。 </li>
<li>工厂模式的好处：工厂模式就相当于创建实例对象的new。工厂模式也是用来创建实例对象的，可能多做一些工作，但会给你系统带来更大的可扩展性和尽量少的修改量。</li>
<li>通常我们都要在创建sample实例时做点初始化的工作。</li>
<li>需要将创建实例的工作与使用实例的工作分开, 也就是说，让创建实例所需要的大量初始化工作从Sample的构造函数中分离出去。</li>
<li>工厂模式是一个创建性的模式，他要求工厂类和产品类分开，由一个工厂类可以根据传入的参量决定创建出哪一种产品类的实例。但这些不同的实例有共同的父类</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul>
<li>文件：<code>main.cpp</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IHuman</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  IHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~IHuman()</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Laugh</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Cry</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Talk</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteHuman</span> :</span> <span class="keyword">public</span> IHuman</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  WhiteHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~WhiteHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Laugh</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"白种人笑！"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"白种人哭！"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Talk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"白种人说话！"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YellowHuman</span> :</span> <span class="keyword">public</span> IHuman</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  YellowHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~YellowHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Laugh</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"黄种人笑！"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"黄种人哭！"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Talk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"黄种人说话！"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackHuman</span> :</span> <span class="keyword">public</span> IHuman</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  BlackHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~BlackHuman(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Laugh</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"黑种人笑！"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"黑种人哭！"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Talk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"黑种人说话！"</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IHumanFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  IHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~IHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> IHuman* <span class="title">CreateHuman</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhiteHumanFactory</span>:</span> <span class="keyword">public</span> IHumanFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  WhiteHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~WhiteHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">IHuman *<span class="title">CreateHuman</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WhiteHuman();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YellowHumanFactory</span>:</span> <span class="keyword">public</span> IHumanFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  YellowHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~YellowHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">IHuman *<span class="title">CreateHuman</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> YellowHuman();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackHumanFactory</span>:</span> <span class="keyword">public</span> IHumanFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  BlackHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ~BlackHumanFactory(<span class="keyword">void</span>)</span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">IHuman *<span class="title">CreateHuman</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BlackHuman();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"#1.制造黄种人"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  IHumanFactory *pHumanFactory = <span class="keyword">new</span> YellowHumanFactory();</span><br><span class="line">  IHuman * pHuman = pHumanFactory-&gt;CreateHuman();</span><br><span class="line">  pHuman-&gt;Cry();</span><br><span class="line">  pHuman-&gt;Laugh();</span><br><span class="line">  pHuman-&gt;Talk();</span><br><span class="line">  <span class="keyword">delete</span> pHuman;</span><br><span class="line">  <span class="keyword">delete</span> pHumanFactory;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"#1.制造白种人"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  IHumanFactory *pHumanFactory2 = <span class="keyword">new</span> WhiteHumanFactory();</span><br><span class="line">  IHuman * pHuman2 = pHumanFactory-&gt;CreateHuman();</span><br><span class="line">  pHuman-&gt;Cry();</span><br><span class="line">  pHuman-&gt;Laugh();</span><br><span class="line">  pHuman-&gt;Talk();</span><br><span class="line">  <span class="keyword">delete</span> pHuman2;</span><br><span class="line">  <span class="keyword">delete</span> pHumanFactory2;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"#1.制造黑种人"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  IHumanFactory *pHumanFactory3 = <span class="keyword">new</span> BlackHumanFactory();</span><br><span class="line">  IHuman * pHuman3 = pHumanFactory-&gt;CreateHuman();</span><br><span class="line">  pHuman-&gt;Cry();</span><br><span class="line">  pHuman-&gt;Laugh();</span><br><span class="line">  pHuman-&gt;Talk();</span><br><span class="line">  <span class="keyword">delete</span> pHuman3;</span><br><span class="line">  <span class="keyword">delete</span> pHumanFactory3;</span><br><span class="line"></span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/onlycxue/p/3428075.html" target="_blank" rel="noopener">c++工厂模式 (Factory method)</a></li>
<li><a href="https://blog.csdn.net/hahaha777527/article/details/50965621" target="_blank" rel="noopener">C++设计模式之工厂方法模式（Factory Method）</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>使用shadowsocksR访问google scholar</title>
    <url>/b56e.html</url>
    <content><![CDATA[<h2 id="获取shadowsocksR账号"><a href="#获取shadowsocksR账号" class="headerlink" title="获取shadowsocksR账号"></a>获取shadowsocksR账号</h2><ul>
<li><p>获取的方法有以下几种：</p>
<ul>
<li>网上搜索免费账号</li>
<li>网上购买shadowsocksR账号</li>
<li>网上购买vps，自行搭建shadowsocksR服务器</li>
</ul>
</li>
<li><p>推荐第三种：购买vps，自己搭建。</p>
</li>
<li><p>VPS推荐，10$左右/年  <a href="https://www.alpharacks.com" target="_blank" rel="noopener">alpharacks</a></p>
</li>
<li><a href="https://github.com/iMeiji/shadowsocks_install/wiki/shadowsocksR-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">一键安装脚本</a></li>
<li><a href="https://www.dz9.net/blog/4246.html" target="_blank" rel="noopener">BBR加速</a></li>
</ul>
<h2 id="安装shadowsocksR"><a href="#安装shadowsocksR" class="headerlink" title="安装shadowsocksR"></a>安装shadowsocksR</h2><ul>
<li>下载。<a href="https://github.com/xuezhisd/ShadowsocksR-4.1.5-win/" target="_blank" rel="noopener">下载地址</a></li>
<li>安装。</li>
<li>配置。将上一步得到的账号IP，密码，端口号等配置好。</li>
</ul>
<h2 id="安装chrome浏览器"><a href="#安装chrome浏览器" class="headerlink" title="安装chrome浏览器"></a>安装chrome浏览器</h2><ul>
<li>这一步比较简单，直接忽略。</li>
</ul>
<h2 id="安装SwitchyOmega"><a href="#安装SwitchyOmega" class="headerlink" title="安装SwitchyOmega"></a>安装SwitchyOmega</h2><ul>
<li>SwitchyOmega是chrome的一个插件，用作代理。</li>
<li>直接访问<a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN" target="_blank" rel="noopener">Chrome 网上应用店</a>安装即可。</li>
</ul>
<h2 id="设置SwitchyOmega"><a href="#设置SwitchyOmega" class="headerlink" title="设置SwitchyOmega"></a>设置SwitchyOmega</h2><ul>
<li>新建情景模式，如下图进行设置</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">代理协议：SOCKS5</span><br><span class="line">代理服务器：<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">代理端口：<span class="number">1080</span></span><br></pre></td></tr></table></figure>
<p><img alt="upload successful" data-src="/images/pasted-0.png"></p>
<ul>
<li>现在就可以成功地访问google scholar等网站了。</li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo教程系列——使用Travis自动部署hexo</title>
    <url>/c0af.html</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>为了在不同电脑上写完并提交博文后，博客能自动更新内容。本文介绍如何通过Travis CI来实现github上的hexo博客自动部署。</li>
<li>本教程是在Windows 7上操作的。</li>
<li>本教程使用了GitHub API实现，用到了Linux中的sed命令。</li>
</ul>
<a id="more"></a>
<h2 id="新建Personal-Access-Token"><a href="#新建Personal-Access-Token" class="headerlink" title="新建Personal Access Token"></a>新建Personal Access Token</h2><ol>
<li><p>点击右上角头像旁边的三角，在菜单中点击“Setting”，进入设置页面。<br><img alt data-src="http://img.zhangxuezhi.com/v90uk9inuvo8yjywxj9gm5hjb5.png"></p>
</li>
<li><p>点击左侧栏的最下面的“Personal access tokens”，创建Personal access tokens。<br><img alt data-src="http://img.zhangxuezhi.com/syvhuszdqc8zoe5hncv99r8ntg.png"></p>
</li>
<li><p>点击右上角的“Generate new token”，输入用户密码，进入“New personal access token”页面。<br><img alt data-src="http://img.zhangxuezhi.com/183vnbiixxadzm7bp75458dc59.png"></p>
</li>
<li><p>设置Token description（其实就是名称），选择相应的权限，如下图所示。<br><img alt data-src="http://img.zhangxuezhi.com/brnxrllts6783vig9u5o0903k5.png"></p>
</li>
<li><p>点击“Generate token”按钮，生成Personal access tokens。如下图中红线标注的部分。<strong>注意：这行token只会在刚刚创建完成后显示一次，以后不再显示</strong>。因此，复制并保存到本地。<br><img alt data-src="http://img.zhangxuezhi.com/spb4526esm5qmhvocnn24f0i19.png"></p>
</li>
</ol>
<h2 id="配置Travis-CI"><a href="#配置Travis-CI" class="headerlink" title="配置Travis CI"></a>配置Travis CI</h2><h3 id="登录并配置Travis-CI"><a href="#登录并配置Travis-CI" class="headerlink" title="登录并配置Travis CI"></a>登录并配置Travis CI</h3><ul>
<li>Travis CI是目前新兴的开源持续集成构建项目。可以直接使用GitHub账号登录。</li>
<li>将鼠标放在用户名上，在弹出的菜单中点击“Accounts”，将会显示你在GitHub上的仓库。如下图所示。<br><img alt data-src="http://img.zhangxuezhi.com/yvrv0pcjjw1p29x879ohfhm0od.png"></li>
<li>找到自己的博客项目，点击X号，将其变成√号。再点击右侧的齿轮，进入该仓库的配置页面。<br><img alt data-src="http://img.zhangxuezhi.com/ylz1rd42kfubl160tqvemhgs0p.png"></li>
<li>在项目的设置中开启Build only if .travis.yml is present这一项。如下图所示。<br><img alt data-src="http://img.zhangxuezhi.com/vw68mu4fmciss8pkc6vgxu1t9b.png"></li>
</ul>
<h3 id="本地安装Travis"><a href="#本地安装Travis" class="headerlink" title="本地安装Travis"></a>本地安装Travis</h3><ul>
<li>首先安装Ruby，直接官网下载，双击安装就OK了。</li>
<li>在Windows下，安装travis之前，需要解决一个问题：<strong>SSL证书问题</strong>，否则不能成功安装。详情请点击该链接：<a href="http://blog.csdn.net/chancein007/article/details/52940032" target="_blank" rel="noopener">参考教程</a>。</li>
<li>修复好上述问题后，执行下面的命令安装travis。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装travis</span></span><br><span class="line">gem isntall travis</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建并修改配置文件"><a href="#创建并修改配置文件" class="headerlink" title="创建并修改配置文件"></a>创建并修改配置文件</h3><ol>
<li>打开博客项目文件夹，在项目根目录新建.travis.yml配置文件。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">cd</span> 博客项目文件夹根目录</span><br><span class="line"><span class="selector-tag">touch</span> <span class="selector-class">.travis</span><span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure></li>
<li>执行下面的命令，加密上面生成的Personal access tokens，并添加到.travis.yml配置文件。<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到</span></span><br><span class="line"><span class="comment"># TOKEN 是上面github生成的Token</span></span><br><span class="line">travis encrypt <span class="string">'REPO_TOKEN=&lt;TOKEN&gt;'</span> --<span class="keyword">add</span></span><br></pre></td></tr></table></figure></li>
<li>上述命令指向完后，.travis.yml配置文件的内容如下所示。<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">env:</span><br><span class="line">  global:</span><br><span class="line">    secure: F/gYu+bVe3aWs6YnuB5PNZLEmHH4CGf0najk8JI3/N+SFL0TH8tyYg+O1sXR3EIg<span class="built_in">..</span><span class="built_in">..</span>.省略<span class="built_in">..</span><span class="built_in">..</span>.iwr5HQG/G3fdL4JcXiAJIm/iH9ndDyGV5EGR1CmseNGNWrwnRZ7tlKE=</span><br></pre></td></tr></table></figure></li>
<li><p>使用本地编辑器打开.travis.yml配置文件，将其修改成如下所示的内容。<strong>注意：有些内容是你自己的!!!</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">- <span class="string">"4"</span>  # nodejs的版本</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - dev  # 设置自动化部署的源码分支</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="comment"># 下面是你的Token加密信息，不要替换</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line">env:</span><br><span class="line">  global:  </span><br><span class="line">    secure: F/gYu+bVe3aWs6Yn<span class="built_in">..</span><span class="built_in">..</span>.省略<span class="built_in">..</span><span class="built_in">..</span>/iH9ndDyGV5EGR1CmseNGNWrwnRZ7tlKE=</span><br><span class="line">    </span><br><span class="line">before_install:</span><br><span class="line">- <span class="builtin-name">export</span> <span class="attribute">TZ</span>=<span class="string">'Asia/Shanghai'</span>  </span><br><span class="line">- npm install -g hexo</span><br><span class="line">- npm install -g hexo-cli </span><br><span class="line">before_script:</span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="comment"># 设置github账户信息 注意修改成自己的信息</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line">- git<span class="built_in"> config </span>--global user.name <span class="string">"xuezhisd"</span></span><br><span class="line">- git<span class="built_in"> config </span>--global user.email xuezhi@126.com </span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="comment"># github仓库操作  注意将仓库修改成自己的</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line">- sed -i<span class="string">''</span> <span class="string">"s~git@github.com:xuezhisd/xuezhisd.github.io.git~https://<span class="variable">$&#123;REPO_TOKEN&#125;</span>:x-oauth-basic@github.com/xuezhisd/xuezhisd.github.io.git~"</span> _config.yml</span><br><span class="line"><span class="comment"># 安装依赖组件</span></span><br><span class="line">install:</span><br><span class="line">- npm install</span><br><span class="line"><span class="comment"># 执行的命令</span></span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo generate</span><br><span class="line"><span class="comment"># 执行的成功后执行 </span></span><br><span class="line">after_success:</span><br><span class="line">- hexo deploy</span><br></pre></td></tr></table></figure>
<p> 至此，Travis CI已经配置完成了。</p>
</li>
</ol>
<h2 id="创建仓库，推送到GitHub"><a href="#创建仓库，推送到GitHub" class="headerlink" title="创建仓库，推送到GitHub"></a>创建仓库，推送到GitHub</h2><ol>
<li>新建仓库blog。<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">init blog</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">blog</span></span><br></pre></td></tr></table></figure></li>
<li>将原来博客目录下的以下内容复制到blog文件夹中。<br><img alt data-src="http://img.zhangxuezhi.com/747d3iy0nq4a39mdnpdx57c51a.png"></li>
<li>修改.gitignore文件，取消对node_modules文件夹的忽略。（即删除对应的行）</li>
<li>关联GitHub上的远程仓库。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将github仓库改为自己的博客仓库</span></span><br><span class="line">git remote add origin git@github.com:xuezhisd/xuezhisd.github.io.git</span><br></pre></td></tr></table></figure></li>
<li><p>提交本地修改，推送到GitHub上。</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 添加文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta"># 提交修改</span></span><br><span class="line">git commit -m <span class="string">"test travis"</span></span><br><span class="line"><span class="meta"># 推送至远程仓库的dev分支</span></span><br><span class="line">git push -u origin dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>push本地的代码至远程仓库之后，在<a href="https://travis-ci.org" target="_blank" rel="noopener">https://travis-ci.org</a> 后台查看相关情况。如果如下图所示，就代表成功了。<br><img alt data-src="http://img.zhangxuezhi.com/pkv15sreco6fl4g85v8lzz4uqh.png"></p>
</li>
</ol>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ul>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官方文档</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT主题官方文档</a></li>
<li><a href="https://www.zhihu.com/question/29017171" target="_blank" rel="noopener">hexo 下的分类和表签无法显示，怎么解决？</a></li>
<li><a href="http://www.jianshu.com/p/f4cc5866946b" target="_blank" rel="noopener">手把手教从零开始在GitHub上使用Hexo搭建博客教程(一)</a></li>
<li><a href="https://segmentfault.com/q/1010000004593371" target="_blank" rel="noopener">Github上搭建Hexo如何跨电脑写作部署方便？</a></li>
<li><a href="http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/" target="_blank" rel="noopener">Continuous Integration Your Hexo Blog With Travis CI</a></li>
<li><a href="http://www.jianshu.com/p/1d427e888dda" target="_blank" rel="noopener">【Hexo+Github】域名和github绑定的问题</a></li>
<li><a href="http://www.jianshu.com/p/3cb4c9ff5b58" target="_blank" rel="noopener">万网域名+GitHub平台搭建的博客</a></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo教程系列——hexo配置教程</title>
    <url>/bee4.html</url>
    <content><![CDATA[<blockquote>
<p>本文对hexo的配置文件进行了说明。</p>
</blockquote>
<h1 id="网站的配置文件"><a href="#网站的配置文件" class="headerlink" title="网站的配置文件"></a>网站的配置文件</h1><ul>
<li>网站配置文件的存储位置：<strong>hexo_blog/_config.yml</strong>。</li>
<li>配置文件中，冒号后面一定要加空格。</li>
<li><a href="https://hexo.io/docs/configuration.html" target="_blank" rel="noopener">hexo官方配置说明</a><a id="more"></a></li>
<li>我的配置文件内容如下所示。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration Hexo配置文件</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站信息</span></span><br><span class="line"><span class="comment">#标题</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">学志の博客</span></span><br><span class="line"><span class="comment">#副标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">记录学习的技能和遇到的问题</span></span><br><span class="line"><span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">做自己爱做的事，爱自己在做的事！</span></span><br><span class="line"><span class="comment">#作者昵称</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">张学志</span></span><br><span class="line"><span class="comment">#网站语言，默认英语，设置简体汉语</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时区，默认电脑时区</span></span><br><span class="line"><span class="comment">#timezone: </span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网址设置</span></span><br><span class="line"><span class="comment">#如果网站是放在子目录中，将url设置成'http://yoursite.com/child'，将root设置成'/child/'</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="comment">#网址</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://zhangxuezhi.com</span></span><br><span class="line"><span class="comment">#网站根目录。如果网站是放在子目录中，将root设置成'子目录名'</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="comment">#文章链接地址格式 。即文章存放的目录。</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录设置</span></span><br><span class="line"><span class="comment">#资源文件夹，放在里面的文件会上传到github中</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="comment">#公共文件夹，存放生成的静态文件</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="comment">#标签文件夹，默认是tags。实际存放在source/tags中。</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">rss_dir:</span> <span class="string">rss</span></span><br><span class="line"><span class="comment">#档案文件夹，默认是archives。</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="comment">#分类文件夹，默认是categories。实际存放在source/categories中。</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="comment">#代码文件夹，默认是downloads/code</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="comment">#国际化文件夹，默认跟language相同</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="comment">#不需要渲染的文件夹或文件夹,放在[]中</span></span><br><span class="line"><span class="comment"># 这两个文件是百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">[baidu_verify_R9MZjdMkXT.html,</span> <span class="string">google0f8fac7da2b48ef8.html,</span> <span class="string">README.md,</span> <span class="string">模板.md]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写作选项</span></span><br><span class="line"><span class="comment"># 新建博文（帖子）的默认名称</span></span><br><span class="line"><span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> </span><br><span class="line"><span class="comment">#默认布局模板是post，而不是draft和page</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="comment">#是否将标题转换成标题形式（首字母大写）</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="comment">#在新标签页面中打开网页</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="comment">#是否渲染草稿</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#启动 Asset 文件夹</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#把链接改为与根目录的相对位址</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#显示未来的文章</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#代码块的设置</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>          <span class="comment">#  使用代码高亮</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span> <span class="comment"># 显示行号</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span>  <span class="comment"># 自动检测语言</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 分类和标签</span></span><br><span class="line"><span class="comment"># 默认分类</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="comment">#分类别名</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="comment">#标签别名</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期和时间格式</span></span><br><span class="line"><span class="comment">#Hexo 使用 Moment.js 来解析和显示时间。</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页配置</span></span><br><span class="line"><span class="comment"># ---------------下面选项需要对应插件的支持---------------</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-index --save</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-archive --save</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-category --save</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-tag --save</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="comment">#每页显示的文章量 </span></span><br><span class="line"><span class="comment">#per_page: 20</span></span><br><span class="line"><span class="comment">#首页的分页设置</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line"><span class="comment">#归档页的分页设置</span></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">yearly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">monthly:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#标签页的分页设置</span></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分页路径，在public中可以看到</span></span><br><span class="line"><span class="comment">#pagination_dir: page</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions 拓展插件配置</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="attr">plugins:</span> </span><br><span class="line"><span class="attr">baidusitemap:</span> </span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置RSS</span></span><br><span class="line"><span class="attr">feed:</span> </span><br><span class="line">  <span class="comment">#feed 类型 (atom/rss2)</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span>   </span><br><span class="line">  <span class="comment">#rss 路径</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span>  </span><br><span class="line">  <span class="comment">#在 rss 中最多生成的文章数(0显示所有)</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 自定义站点内容搜索</span></span><br><span class="line"><span class="comment"># 需要先安装插件：</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-search --save</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="comment"># 如只想索引文章，可设置为post</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">all</span> </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 主题配置</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment">#theme: false #禁用主题</span></span><br><span class="line"><span class="comment">#theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署配置</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment">#repo: https://github.com/xuezhisd/xuezhisd.github.io.git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="comment"># 部署到github</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:xuezhisd/xuezhisd.github.io.git,master</span></span><br><span class="line">    <span class="comment"># 部署到coding.net。取消注释，可同时部署</span></span><br><span class="line">    <span class="comment">#coding: git@git.coding.net:xuezhisd/blog.git,coding-pages</span></span><br><span class="line">  <span class="comment">#type: baidu_url_submitter</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="主题的配置文件"><a href="#主题的配置文件" class="headerlink" title="主题的配置文件"></a>主题的配置文件</h1><ul>
<li>默认主题是landscape</li>
<li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo官方主题页面</a>。从中选择喜欢的主题，下载并放到themes文件中。</li>
<li>我使用的主题是<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT</a>。</li>
</ul>
<h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ul>
<li><a href="http://www.jianshu.com/p/dd9ef08b12df" target="_blank" rel="noopener">手把手教从零开始在GitHub上使用Hexo搭建博客教程(二)</a></li>
<li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">hexo官方文档</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next主题官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo教程系列——hexo安装教程</title>
    <url>/ed61.html</url>
    <content><![CDATA[<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js官方下载地址</a></li>
<li>从上面的链接下载node.js，并安装。<ul>
<li>注意：官方链接可能需要<strong>翻墙</strong></li>
<li>注意：我的操作系统是<strong>Windows 7 (64bit)</strong></li>
</ul>
</li>
</ul>
<h2 id="设置npm淘宝镜像站"><a href="#设置npm淘宝镜像站" class="headerlink" title="设置npm淘宝镜像站"></a>设置npm淘宝镜像站</h2><ul>
<li>npm默认的源的下载速度可能很慢，建议使用淘宝镜像替换。</li>
<li>执行下面的命令，将npm的源设置成淘宝镜像站。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry <span class="string">"https://registry.npm.taobao.org"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="申请Github账号"><a href="#申请Github账号" class="headerlink" title="申请Github账号"></a>申请Github账号</h2><ul>
<li><a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">Github注册页面</a></li>
<li>输入<strong>用户名，Email，密码</strong>，注册账号。比如我的用户名是：xuezhisd</li>
</ul>
<h3 id="创建博客仓库"><a href="#创建博客仓库" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h3><ul>
<li>注意，仓库名应该为：用户名.github.io。比如，我的仓库名是：<strong><a href="https://github.com/xuezhisd/xuezhisd.github.io" target="_blank" rel="noopener">xuezhisd.github.io</a></strong>。</li>
</ul>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ul>
<li><a href="https://git-scm.com/downloads/" target="_blank" rel="noopener">git下载地址</a></li>
<li>下载git安装文件，双击执行安装。<h3 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h3></li>
<li>打开git bash终端。</li>
<li>设置user.name和user.email。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"你的GitHub用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure></li>
<li>生成ssh密匙<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure></li>
<li>此时，在用户文件夹下就会有一个新的文件夹.ssh，里面有刚刚创建的ssh密钥文件id_rsa和id_rsa.pub。</li>
</ul>
<h3 id="将公匙添加到github上"><a href="#将公匙添加到github上" class="headerlink" title="将公匙添加到github上"></a>将公匙添加到github上</h3><ul>
<li>详细教程自行baidu。</li>
<li>用户头像→Settings→SSH and GPG keys→New SSH key→将id_rsa.pub中的内容复制到Key文本框中，然后点击Add SSH key(添加SSH)按钮。</li>
</ul>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ul>
<li>执行以下命令安装hexo。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装hexo</span></span><br><span class="line">npm install hexo-cli g</span><br><span class="line"><span class="comment"># 初始化博客文件夹</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="comment"># 切换到该路径</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment"># 安装hexo的扩展插件</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 安装其它插件</span></span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-admin --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>
<h2 id="初探hexo"><a href="#初探hexo" class="headerlink" title="初探hexo"></a>初探hexo</h2></li>
<li>第一次使用hexo，在本地创建服务器使用。<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"># 生成静态页面</span><br><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line"># 开启本地服务器</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li>打开浏览器，地址栏中输入：<strong><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></strong>,应该可以看见刚刚创建的博客了。</li>
<li>问题：为什么访问<strong><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></strong>，无反应？<ul>
<li>解决方法：可能是由于端口问题引起的。使用Ctrl+C中断本地服务，使用命令<code>hexo s -p 5000</code>重新开启本地服务，访问<strong><a href="http://localhost:5000/" target="_blank" rel="noopener">http://localhost:5000/</a></strong>可以看到博客页面了。</li>
</ul>
</li>
</ul>
<h2 id="将hexo博客部署到github上"><a href="#将hexo博客部署到github上" class="headerlink" title="将hexo博客部署到github上"></a>将hexo博客部署到github上</h2><ul>
<li>修改配置文件<strong>blog/_config.yml</strong>，修改deploy项的内容，如下所示：<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Deployment 注释</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line">  <span class="meta"># 类型</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line">  <span class="meta"># 仓库</span></span><br><span class="line"><span class="symbol">  repo:</span> git@github.com:xuezhisd/xuezhisd.github.io.git</span><br><span class="line">  <span class="meta"># 分支</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure></li>
<li>注意：<strong>type: git</strong>中的冒号后面由空格。</li>
<li>注意：将git@github.com:<strong>xuezhisd/xuezhisd</strong>.github.io.git中的用户名换成自己的用户名git@github.com:<strong>github_username/github_username</strong>.github.io.git。<h3 id="部署hexo"><a href="#部署hexo" class="headerlink" title="部署hexo"></a>部署hexo</h3></li>
<li>输入下面的命令将hexo博客部署到github中：<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清空静态页面</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="comment"># 生成静态页面</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">generate</span></span><br><span class="line"><span class="comment"># 部署 </span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure></li>
<li>打开网页，输入<a href="http://github_username.github.io，打开github上托管的博客。如我的博客地址是：http://xuezhisd.github.io。" target="_blank" rel="noopener">http://github_username.github.io，打开github上托管的博客。如我的博客地址是：http://xuezhisd.github.io。</a></li>
</ul>
<h1 id="hexo命令缩写"><a href="#hexo命令缩写" class="headerlink" title="hexo命令缩写"></a>hexo命令缩写</h1><ul>
<li>hexo支持命令缩写，如下所示。<code>hexo g</code>等价于<code>hexo generate</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g：hexo generate</span><br><span class="line">hexo c：hexo clean</span><br><span class="line">hexo s：hexo server</span><br><span class="line">hexo d：hexo deploy</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="hexo组合命令"><a href="#hexo组合命令" class="headerlink" title="hexo组合命令"></a>hexo组合命令</h1><ul>
<li>将多个命令组合在一起使用，省事！<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除、生成、启动</span></span><br><span class="line">hexo clean &amp;&amp; hexo g -s</span><br><span class="line"><span class="comment"># 清除、生成、部署</span></span><br><span class="line">hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="hexo-deploy没有反应？"><a href="#hexo-deploy没有反应？" class="headerlink" title="hexo deploy没有反应？"></a>hexo deploy没有反应？</h2><ul>
<li>修改配置文件：<strong>_config.yml</strong>时，冒号后面没加空格。</li>
</ul>
<h2 id="hexo-s-网站打不开？"><a href="#hexo-s-网站打不开？" class="headerlink" title="hexo s 网站打不开？"></a>hexo s 网站打不开？</h2><ul>
<li>端口占用，换个端口就好了。执行命令<code>hexo s -p 5000</code>，并在浏览器地址栏输入<a href="http://localhost:5000，回车访问。" target="_blank" rel="noopener">http://localhost:5000，回车访问。</a></li>
</ul>
<h2 id="如何换主题？"><a href="#如何换主题？" class="headerlink" title="如何换主题？"></a>如何换主题？</h2><ul>
<li>将主题下载后，放到themes文件夹中即可。例如，下面命令安装next主题：<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>。</li>
</ul>
<h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ul>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官方文档</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT主题官方文档</a></li>
<li><a href="https://www.zhihu.com/question/29017171" target="_blank" rel="noopener">hexo 下的分类和表签无法显示，怎么解决？</a></li>
<li><a href="http://www.jianshu.com/p/f4cc5866946b" target="_blank" rel="noopener">手把手教从零开始在GitHub上使用Hexo搭建博客教程(一)</a></li>
<li><a href="https://segmentfault.com/q/1010000004593371" target="_blank" rel="noopener">Github上搭建Hexo如何跨电脑写作部署方便？</a></li>
<li><a href="http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/" target="_blank" rel="noopener">Continuous Integration Your Hexo Blog With Travis CI</a></li>
<li><a href="http://www.jianshu.com/p/1d427e888dda" target="_blank" rel="noopener">【Hexo+Github】域名和github绑定的问题</a></li>
<li><a href="http://www.jianshu.com/p/3cb4c9ff5b58" target="_blank" rel="noopener">万网域名+GitHub平台搭建的博客</a></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Ubuntu中文显示为乱码</title>
    <url>/f09f.html</url>
    <content><![CDATA[<h2 id="1-安装所需软件"><a href="#1-安装所需软件" class="headerlink" title="1.    安装所需软件"></a>1.    安装所需软件</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install zh-autoconvert</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install zhcon</span><br></pre></td></tr></table></figure>
<h2 id="2-配置系统"><a href="#2-配置系统" class="headerlink" title="2.    配置系统"></a>2.    配置系统</h2><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$ vi /var/<span class="class"><span class="keyword">lib</span>/<span class="title">locales</span>/<span class="title">supported</span>.<span class="title">d</span>/<span class="title">local</span>  加入</span></span><br><span class="line">zh_CN.GBK GBK</span><br><span class="line">zh_CN.GB2312 GB2312</span><br><span class="line">$ sudo locale-gen</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="3-修改ubuntu的字符集"><a href="#3-修改ubuntu的字符集" class="headerlink" title="3. 修改ubuntu的字符集"></a>3. 修改ubuntu的字符集</h2><h3 id="方法一：-修改用户目录下的-profile或-bashrc文件，增加以下内容："><a href="#方法一：-修改用户目录下的-profile或-bashrc文件，增加以下内容：" class="headerlink" title="方法一： 修改用户目录下的.profile或.bashrc文件，增加以下内容："></a>方法一： 修改用户目录下的.profile或.bashrc文件，增加以下内容：</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">LANGUAGE</span>=”zh_CN:zh:en_US:en”</span><br><span class="line"><span class="attr">LANG</span>=zh_CN.GBK</span><br></pre></td></tr></table></figure>
<p>重新登录即可。<br>这个方法只对该用户有效。</p>
<h3 id="方法二：修改-etc-environment，增加以下内容："><a href="#方法二：修改-etc-environment，增加以下内容：" class="headerlink" title="方法二：修改/etc/environment，增加以下内容："></a>方法二：修改/etc/environment，增加以下内容：</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">LANGUAGE</span>=”zh_CN:zh:en_US:en”</span><br><span class="line"><span class="attr">LANG</span>=zh_CN.GBK</span><br></pre></td></tr></table></figure>
<p>然后重启X即可<br>这个方法对没有设置LANG及LANGUAGE环境变量的用户有效 </p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="http://blog.csdn.net/zjc156m/article/details/9095297" target="_blank" rel="noopener">http://blog.csdn.net/zjc156m/article/details/9095297</a></li>
<li><a href="http://blog.csdn.net/xieyan0811/article/details/7530962" target="_blank" rel="noopener">http://blog.csdn.net/xieyan0811/article/details/7530962</a></li>
<li><a href="http://www.linuxidc.com/Linux/2014-02/96939.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2014-02/96939.htm</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指Offer——Java答案</title>
    <url>/4352.html</url>
    <content><![CDATA[<h2 id="第二章-面试需要的基础知识"><a href="#第二章-面试需要的基础知识" class="headerlink" title="第二章 面试需要的基础知识"></a>第二章 面试需要的基础知识</h2><h3 id="数组-二维数组中查找"><a href="#数组-二维数组中查找" class="headerlink" title="数组 - 二维数组中查找"></a>数组 - 二维数组中查找</h3><ul>
<li>题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</li>
</ul>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean Find(<span class="built_in">int</span> [][] <span class="built_in">array</span>, <span class="built_in">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">    		<span class="keyword">for</span> (<span class="built_in">int</span> j=<span class="number">0</span>; j&lt;<span class="built_in">array</span>[i].length; j++) &#123;</span><br><span class="line">    			<span class="keyword">if</span> (<span class="built_in">array</span>[i][j] == target)</span><br><span class="line">    				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><ul>
<li>时间复杂度 O(n)</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean Find(<span class="built_in">int</span> [][] <span class="built_in">array</span>, <span class="built_in">int</span> target) &#123;</span><br><span class="line">    	<span class="built_in">int</span> row =<span class="number">0</span>;</span><br><span class="line">    	<span class="built_in">int</span> col = <span class="built_in">array</span>[<span class="number">0</span>].length<span class="number">-1</span>;</span><br><span class="line">    	<span class="built_in">int</span> numRow = <span class="built_in">array</span>.length;</span><br><span class="line">    	<span class="keyword">while</span> (row &lt; numRow &amp;&amp; col&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">array</span>[row][col] &gt; target)</span><br><span class="line">				col--;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[row][col] &lt; target)</span><br><span class="line">				row++;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 相等，返回true</span></span><br><span class="line">			&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//遍历完，没有找到相等值，返回false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h3><h4 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h4><ul>
<li>借用String.replace()</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">String</span> str1 = <span class="keyword">new</span> <span class="keyword">String</span>(str);</span><br><span class="line">    	<span class="keyword">return</span> str1.replace(<span class="string">" "</span>, <span class="string">"%20"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h4><ul>
<li>使用字符数组实现</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> replaceSpace(StringBuffer str) &#123;</span><br><span class="line">    	<span class="keyword">String</span> str1 = <span class="keyword">new</span> <span class="type">String</span>(str);</span><br><span class="line">    	char[] charArr = str1.toCharArray();</span><br><span class="line">    	<span class="comment">// 计算源字符串的长度和空格的数量</span></span><br><span class="line">    	int originalLength = charArr.length;</span><br><span class="line">    	int numberOfBlank = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span> (char item : <span class="type">charArr</span>)</span><br><span class="line">    		<span class="keyword">if</span> (item == <span class="string">' '</span>)</span><br><span class="line">    			numberOfBlank++;</span><br><span class="line">    	<span class="comment">// 计算新的字符串长度</span></span><br><span class="line">    	int <span class="keyword">new</span><span class="type">Length</span> = originalLength + numberOfBlank*<span class="number">2</span>;</span><br><span class="line">    	char[] <span class="keyword">new</span><span class="type">charArr</span> = <span class="keyword">new</span> <span class="type">char</span>[<span class="keyword">new</span><span class="type">Length</span>];</span><br><span class="line">    	<span class="comment">//</span></span><br><span class="line">    	int indexOfOriginal = originalLength<span class="number">-1</span>;</span><br><span class="line">    	int indexOfNew = <span class="keyword">new</span><span class="type">Length</span>-<span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">while</span>(indexOfOriginal&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (charArr[indexOfOriginal] == <span class="string">' '</span>) &#123;</span><br><span class="line">    			<span class="keyword">new</span><span class="type">charArr</span>[indexOfNew--] = <span class="string">'0'</span>;</span><br><span class="line">    			<span class="keyword">new</span><span class="type">charArr</span>[indexOfNew--] = <span class="string">'2'</span>;</span><br><span class="line">    			<span class="keyword">new</span><span class="type">charArr</span>[indexOfNew--] = <span class="string">'%'</span>;</span><br><span class="line">    			indexOfOriginal--;</span><br><span class="line">    		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    			<span class="keyword">new</span><span class="type">charArr</span>[indexOfNew--] = charArr[indexOfOriginal--];</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">String</span>.valueOf(<span class="keyword">new</span><span class="type">charArr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="从头到尾打印链表"><a href="#从头到尾打印链表" class="headerlink" title="从头到尾打印链表"></a>从头到尾打印链表</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ListNode &#123;</span><br><span class="line">     <span class="type">int</span> val;</span><br><span class="line">     ListNode next = <span class="keyword">null</span>;</span><br><span class="line">     </span><br><span class="line">     ListNode(<span class="type">int</span> val) &#123;</span><br><span class="line">    	 this.val = val;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="built_in">public</span> ArrayList&lt;<span class="type">Integer</span>&gt; printListFromTailToHead(ListNode listNode) &#123;</span><br><span class="line">    	ArrayList&lt;<span class="type">Integer</span>&gt; al = <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">    	<span class="keyword">if</span> (listNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">    		<span class="keyword">return</span> al;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	ListNode p = listNode;</span><br><span class="line">    	<span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">    		al.<span class="keyword">add</span>(p.val);</span><br><span class="line">    		p = p.next;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="type">int</span> lower = <span class="number">0</span>;</span><br><span class="line">    	<span class="type">int</span> higher =al.size()<span class="number">-1</span>;</span><br><span class="line">    	<span class="keyword">while</span> (lower &lt; higher) &#123;</span><br><span class="line">    		<span class="type">int</span> <span class="keyword">temp</span> = al.<span class="keyword">get</span>(lower);</span><br><span class="line">    		al.<span class="keyword">set</span>(lower, al.<span class="keyword">get</span>(higher));</span><br><span class="line">    		al.<span class="keyword">set</span>(higher, <span class="keyword">temp</span>);</span><br><span class="line">    		lower++;</span><br><span class="line">    		higher<span class="comment">--;</span></span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> al;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TreeNode &#123;</span><br><span class="line">	<span class="built_in">int</span> <span class="keyword">val</span>;</span><br><span class="line">	TreeNode left;</span><br><span class="line">	TreeNode right;</span><br><span class="line">	<span class="constructor">TreeNode(<span class="params">int</span> <span class="params">x</span>)</span> &#123; <span class="keyword">val</span> = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    public TreeNode re<span class="constructor">ConstructBinaryTree(<span class="params">int</span> [] <span class="params">pre</span>,<span class="params">int</span> [] <span class="params">in</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pre==null<span class="operator"> || </span><span class="keyword">in</span>==null) <span class="comment">// 判空</span></span><br><span class="line">        	return null;</span><br><span class="line">        <span class="comment">//生成根节点</span></span><br><span class="line">        <span class="built_in">int</span> rootValue = pre<span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> <span class="constructor">TreeNode(<span class="params">rootValue</span>)</span>;</span><br><span class="line">        root.left = root.right = null;</span><br><span class="line">        <span class="comment">// 一个节点的情况</span></span><br><span class="line">        <span class="keyword">if</span> (pre.length==<span class="number">1</span>) &#123;</span><br><span class="line">        	<span class="keyword">if</span> (<span class="keyword">in</span>.length==<span class="number">1</span><span class="operator"> &amp;&amp; </span>pre<span class="literal">[<span class="number">0</span>]</span>==<span class="keyword">in</span><span class="literal">[<span class="number">0</span>]</span>) </span><br><span class="line">        		return root;</span><br><span class="line">        	<span class="keyword">else</span></span><br><span class="line">        		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"Invalid  input."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在中序遍历中查找根节点的值</span></span><br><span class="line">        <span class="built_in">int</span> rootInorder =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (rootInorder&lt;<span class="keyword">in</span>.length<span class="operator"> &amp;&amp; </span><span class="keyword">in</span><span class="literal">[<span class="identifier">rootInorder</span>]</span>!=rootValue)</span><br><span class="line">        	rootInorder++;</span><br><span class="line">        <span class="comment">// 构建左子树</span></span><br><span class="line">        <span class="built_in">int</span><span class="literal">[]</span> leftPre = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">OfRange(<span class="params">pre</span>, 1, <span class="params">rootInorder</span>+1)</span>;</span><br><span class="line">        <span class="built_in">int</span><span class="literal">[]</span> leftIn = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">OfRange(<span class="params">in</span>, 0, <span class="params">rootInorder</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (leftPre.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        	root.left = re<span class="constructor">ConstructBinaryTree(<span class="params">leftPre</span>, <span class="params">leftIn</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 构建右子树</span></span><br><span class="line">        <span class="built_in">int</span><span class="literal">[]</span> rightPre = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">OfRange(<span class="params">pre</span>, <span class="params">rootInorder</span>+1, <span class="params">pre</span>.<span class="params">length</span>)</span>;</span><br><span class="line">        <span class="built_in">int</span><span class="literal">[]</span> rightIn = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">OfRange(<span class="params">in</span>, <span class="params">rootInorder</span>+1, <span class="params">in</span>.<span class="params">length</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (rightPre.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        	root.right = re<span class="constructor">ConstructBinaryTree(<span class="params">rightPre</span>, <span class="params">rightIn</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    Stack&lt;<span class="type">Integer</span>&gt; stack1 = <span class="built_in">new</span> Stack&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">    Stack&lt;<span class="type">Integer</span>&gt; stack2 = <span class="built_in">new</span> Stack&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> push(<span class="type">int</span> node) &#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> <span class="type">int</span> pop() &#123;</span><br><span class="line">    	<span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line">    		<span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">    			stack2.push(stack1.pop());</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line">    		<span class="keyword">Exception</span> e = <span class="built_in">new</span> <span class="keyword">Exception</span>("123");</span><br><span class="line">    		try &#123;</span><br><span class="line">				throw e;</span><br><span class="line">			&#125; catch (<span class="keyword">Exception</span> e1) &#123;</span><br><span class="line">				// TODO Auto-<span class="keyword">generated</span> catch block</span><br><span class="line">				e1.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    		</span><br><span class="line">    	<span class="keyword">return</span> stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="旋转数组的最小值"><a href="#旋转数组的最小值" class="headerlink" title="旋转数组的最小值"></a>旋转数组的最小值</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> minNumberInRotateArray(<span class="built_in">int</span> [] <span class="built_in">array</span>) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="built_in">array</span>.length == <span class="number">0</span>)</span><br><span class="line">    		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	<span class="built_in">int</span> index1 = <span class="number">0</span>;</span><br><span class="line">    	<span class="built_in">int</span> index2 = <span class="built_in">array</span>.length<span class="number">-1</span>;</span><br><span class="line">    	<span class="built_in">int</span> indexMid = index1;</span><br><span class="line">    	<span class="keyword">while</span> (<span class="built_in">array</span>[index1] &gt;= <span class="built_in">array</span>[index2]) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (index2-index1==<span class="number">1</span>) &#123;</span><br><span class="line">    			indexMid = index2;</span><br><span class="line">    			<span class="keyword">break</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    		indexMid = (index1+index2)/<span class="number">2</span>;</span><br><span class="line">    		<span class="keyword">if</span>(<span class="built_in">array</span>[indexMid] &gt;= <span class="built_in">array</span>[index1])</span><br><span class="line">    			index1 = indexMid;</span><br><span class="line">    		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[indexMid] &lt;= <span class="built_in">array</span>[index2])</span><br><span class="line">    			index2 = indexMid;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">array</span>[indexMid];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Fibonacci(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (n&lt;=<span class="number">0</span>)</span><br><span class="line">    		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">if</span> (n==<span class="number">1</span>)</span><br><span class="line">    		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="built_in">int</span> fibOne=<span class="number">1</span>;</span><br><span class="line">    	<span class="built_in">int</span> fibTwo=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    		fibOne = fibOne + fibTwo;</span><br><span class="line">    		fibTwo = fibOne - fibTwo;</span><br><span class="line">    		n--;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> fibOne;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h3><ul>
<li>类似斐波那契数列</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> JumpFloor(<span class="built_in">int</span> target) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (target &lt;= <span class="number">2</span>) </span><br><span class="line">    		<span class="keyword">return</span> target;</span><br><span class="line">    	<span class="built_in">int</span> resOne = <span class="number">2</span>;</span><br><span class="line">    	<span class="built_in">int</span> resTwo = <span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">while</span> (target&gt;<span class="number">2</span>) &#123;</span><br><span class="line">    		resOne = resOne + resTwo;</span><br><span class="line">    		resTwo = resOne - resTwo;</span><br><span class="line">    		target--;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> resOne;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h3><ul>
<li>等比数列<br>f(n) = 2^(n-1)</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> JumpFloorII(<span class="built_in">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> result=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (target &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            result *= <span class="number">2</span>;</span><br><span class="line">            target--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="矩形覆盖"><a href="#矩形覆盖" class="headerlink" title="矩形覆盖"></a>矩形覆盖</h3><ul>
<li>斐波那契数列</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> RectCover(<span class="built_in">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (target&lt;=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span> resOne = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">int</span> resTwo = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (target &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            resOne = resOne + resTwo;</span><br><span class="line">            resTwo = resOne - resTwo;</span><br><span class="line">            target--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resOne;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h3><ul>
<li>因为Java中没有无符号整数，因此限定循环的次数。</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> NumberOf1(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    	<span class="built_in">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    	<span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;</span><br><span class="line">    		<span class="keyword">if</span> ((flag &amp; n) != <span class="number">0</span>) &#123;</span><br><span class="line">    			num++;</span><br><span class="line">    		&#125;</span><br><span class="line">    		flag &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第三章-高质量的代码"><a href="#第三章-高质量的代码" class="headerlink" title="第三章 高质量的代码"></a>第三章 高质量的代码</h2><h3 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h3><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> Power(<span class="keyword">double</span> base, <span class="built_in">int</span> <span class="built_in">exponent</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">exponent</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">exp</span>=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> result=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">exponent</span> &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">exp</span> = <span class="built_in">exponent</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">exp</span> = -<span class="built_in">exponent</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">exp</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result *= base;</span><br><span class="line">            <span class="built_in">exp</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">exponent</span> &lt; <span class="number">0</span>)</span><br><span class="line">            result = <span class="number">1</span>/result;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调整数组顺序使奇数位于偶数前面"><a href="#调整数组顺序使奇数位于偶数前面" class="headerlink" title="调整数组顺序使奇数位于偶数前面"></a>调整数组顺序使奇数位于偶数前面</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> reOrderArray(<span class="built_in">int</span> [] <span class="built_in">array</span>) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="built_in">array</span>!=<span class="literal">null</span> &amp;&amp; <span class="built_in">array</span>.length&gt;<span class="number">1</span>) &#123;</span><br><span class="line">    		ArrayList&lt;Integer&gt; alOdd = new ArrayList&lt;&gt;();</span><br><span class="line">    		ArrayList&lt;Integer&gt; alEven = new ArrayList&lt;&gt;();</span><br><span class="line">    		<span class="keyword">for</span> (<span class="built_in">int</span> elem : <span class="built_in">array</span>) &#123;</span><br><span class="line">    			<span class="keyword">if</span> (elem % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">    				alOdd.add(elem);</span><br><span class="line">    			<span class="keyword">else</span></span><br><span class="line">    				alEven.add(elem);</span><br><span class="line">    		&#125;</span><br><span class="line">    		<span class="built_in">int</span> ind = <span class="number">0</span>;</span><br><span class="line">    		<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;alOdd.size(); i++) &#123;</span><br><span class="line">    			<span class="built_in">array</span>[ind] = alOdd.<span class="keyword">get</span>(i);</span><br><span class="line">    			ind++;</span><br><span class="line">    		&#125;</span><br><span class="line">    		<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;alEven.size(); i++) &#123;</span><br><span class="line">    			<span class="built_in">array</span>[ind] = alEven.<span class="keyword">get</span>(i);</span><br><span class="line">    			ind++;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链表中倒数第k个结点"><a href="#链表中倒数第k个结点" class="headerlink" title="链表中倒数第k个结点"></a>链表中倒数第k个结点</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ListNode &#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode <span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode FindKthToTail(ListNode head,<span class="keyword">int</span> k) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">    		<span class="keyword">return</span> head;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">if</span> (k==<span class="number">0</span>) &#123;</span><br><span class="line">    		<span class="keyword">return</span> <span class="keyword">new</span> ListNode(<span class="number">0</span>).<span class="keyword">next</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	ListNode pAhead = head;</span><br><span class="line">    	ListNode pBehind = <span class="keyword">null</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k-<span class="number">1</span>; i++) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (pAhead.<span class="keyword">next</span> != <span class="keyword">null</span>)</span><br><span class="line">    			pAhead = pAhead.<span class="keyword">next</span>;</span><br><span class="line">    		<span class="keyword">else</span></span><br><span class="line">    			<span class="keyword">return</span> pAhead.<span class="keyword">next</span>;	<span class="comment">//k大于列表长度</span></span><br><span class="line">    	&#125;</span><br><span class="line">    	pBehind = head;</span><br><span class="line">    	<span class="keyword">while</span> (pAhead.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">    		pAhead = pAhead.<span class="keyword">next</span>;</span><br><span class="line">    		pBehind = pBehind.<span class="keyword">next</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> pBehind;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    int <span class="keyword">val</span>;</span><br><span class="line">    ListNode next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode(int <span class="keyword">val</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">val</span> = <span class="keyword">val</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode ReverseList(ListNode head) &#123;</span><br><span class="line">       ListNode pReversedHead = <span class="literal">null</span>;</span><br><span class="line">       ListNode pNode = head;</span><br><span class="line">       ListNode pPrev = <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">while</span> (pNode != <span class="literal">null</span>) &#123;</span><br><span class="line">    	   ListNode pNext = pNode.next;</span><br><span class="line">    	   <span class="keyword">if</span> (pNext == <span class="literal">null</span>)</span><br><span class="line">    		   pReversedHead = pNode;</span><br><span class="line">    	   pNode.next = pPrev;</span><br><span class="line">    	   pPrev = pNode;</span><br><span class="line">    	   pNode = pNext;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> pReversedHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a>合并两个排序的链表</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    int <span class="keyword">val</span>;</span><br><span class="line">    ListNode next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode(int <span class="keyword">val</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">val</span> = <span class="keyword">val</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode Merge(ListNode list1,ListNode list2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">        	<span class="keyword">return</span> list2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">        	<span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode listMergeHead = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (list1.<span class="keyword">val</span> &lt; list2.<span class="keyword">val</span>) &#123;</span><br><span class="line">        	listMergeHead = list1;</span><br><span class="line">        	listMergeHead.next = Merge(list1.next, list2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        	listMergeHead = list2;</span><br><span class="line">        	listMergeHead.next = Merge(list1, list2.next);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> listMergeHead;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a>树的子结构</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> TreeNode &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">val</span> = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = null;</span><br><span class="line">    TreeNode right = null;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">TreeNode(<span class="params">int</span> <span class="params">val</span>)</span> &#123;</span><br><span class="line">        this.<span class="keyword">val</span> = <span class="keyword">val</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    public boolean <span class="constructor">HasSubtree(TreeNode <span class="params">root1</span>,TreeNode <span class="params">root2</span>)</span> &#123;</span><br><span class="line">        boolean result = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root1!=null<span class="operator"> &amp;&amp; </span>root2!=null) &#123;</span><br><span class="line">        	<span class="keyword">if</span> (root1.<span class="keyword">val</span><span class="operator"> == </span>root2.<span class="keyword">val</span>)</span><br><span class="line">        		result = <span class="constructor">DoesTree1HaveTree2(<span class="params">root1</span>, <span class="params">root2</span>)</span>;</span><br><span class="line">        	<span class="keyword">if</span> (!result)</span><br><span class="line">        		result = <span class="constructor">HasSubtree(<span class="params">root1</span>.<span class="params">left</span>, <span class="params">root2</span>)</span>;</span><br><span class="line">        	<span class="keyword">if</span>(!result) </span><br><span class="line">        		result = <span class="constructor">HasSubtree(<span class="params">root1</span>.<span class="params">right</span>, <span class="params">root2</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean <span class="constructor">DoesTree1HaveTree2(TreeNode <span class="params">pRoot1</span>, TreeNode <span class="params">pRoot2</span>)</span> &#123;</span><br><span class="line">    	<span class="keyword">if</span> (pRoot2<span class="operator"> == </span>null)	<span class="comment">// Tree2 为空</span></span><br><span class="line">    		return <span class="literal">true</span>;</span><br><span class="line">    	<span class="keyword">if</span> (pRoot1<span class="operator"> == </span>null)	<span class="comment">// Tree2非空，Tree1为空</span></span><br><span class="line">    		return <span class="literal">false</span>;</span><br><span class="line">    	<span class="keyword">if</span> (pRoot1.<span class="keyword">val</span> != pRoot2.<span class="keyword">val</span>) <span class="comment">// Tree1 &amp; Tree2非空</span></span><br><span class="line">    		return <span class="literal">false</span>;</span><br><span class="line">    	return <span class="constructor">DoesTree1HaveTree2(<span class="params">pRoot1</span>.<span class="params">left</span>, <span class="params">pRoot2</span>.<span class="params">left</span>)</span><span class="operator"> &amp;&amp; </span><span class="constructor">DoesTree1HaveTree2(<span class="params">pRoot1</span>.<span class="params">right</span>, <span class="params">pRoot2</span>.<span class="params">right</span>)</span>;</span><br><span class="line">    	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第四章-解决面试的思路"><a href="#第四章-解决面试的思路" class="headerlink" title="第四章 解决面试的思路"></a>第四章 解决面试的思路</h2><h3 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a>二叉树的镜像</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    int <span class="keyword">val</span> = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="literal">null</span>;</span><br><span class="line">    TreeNode right = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode(int <span class="keyword">val</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">val</span> = <span class="keyword">val</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序遍历，交换每个节点的左右节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> void Mirror(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        	<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)</span><br><span class="line">        	<span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 交换当前节点的左右子节点</span></span><br><span class="line">        TreeNode temp = root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = temp;</span><br><span class="line">        <span class="comment">// 遍历左子节点</span></span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="literal">null</span>)</span><br><span class="line">        	Mirror(root.left);</span><br><span class="line">        <span class="comment">// 遍历右子节点</span></span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span>) </span><br><span class="line">        	Mirror(root.right);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="built_in">public</span> ArrayList&lt;<span class="type">Integer</span>&gt; printMatrix(<span class="type">int</span> [][] matrix) &#123;</span><br><span class="line">       <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length&lt;=<span class="number">0</span> || matrix[<span class="number">0</span>].length&lt;=<span class="number">0</span>)</span><br><span class="line">    	   <span class="keyword">return</span> <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">       </span><br><span class="line">       ArrayList&lt;<span class="type">Integer</span>&gt; result = <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">       <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> numRow = matrix.length;</span><br><span class="line">       <span class="type">int</span> numCol = matrix[<span class="number">0</span>].length;</span><br><span class="line">       <span class="keyword">while</span> (numRow&gt;<span class="number">2</span>*<span class="keyword">start</span> &amp;&amp; numCol&gt;<span class="number">2</span>*<span class="keyword">start</span>) &#123;</span><br><span class="line">    	   PrintMatrixInCircle(matrix, numRow, numCol, <span class="keyword">start</span>, result);</span><br><span class="line">    	   <span class="keyword">start</span>++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> PrintMatrixInCircle(<span class="type">int</span>[][] matrix, <span class="type">int</span> numRow, <span class="type">int</span> numCol, <span class="type">int</span> <span class="keyword">start</span>, ArrayList&lt;<span class="type">Integer</span>&gt; result) &#123;</span><br><span class="line"> 	   <span class="type">int</span> endX = numCol<span class="number">-1</span>-<span class="keyword">start</span>;</span><br><span class="line"> 	   <span class="type">int</span> endY = numRow<span class="number">-1</span>-<span class="keyword">start</span>;</span><br><span class="line"> 	   // 从左到右打印一行</span><br><span class="line"> 	   <span class="keyword">for</span> (<span class="type">int</span> i=<span class="keyword">start</span>; i&lt;=endX; ++i) &#123;</span><br><span class="line"> 		   result.<span class="keyword">add</span>(matrix[<span class="keyword">start</span>][i]);</span><br><span class="line"> 	   &#125;</span><br><span class="line"> 	   // 从上到下打印一行</span><br><span class="line"> 	   <span class="keyword">if</span> (<span class="keyword">start</span> &lt; endY) &#123;</span><br><span class="line"> 		   <span class="keyword">for</span> (<span class="type">int</span> i=<span class="keyword">start</span>+<span class="number">1</span>; i&lt;=endY; i++) &#123;</span><br><span class="line"> 			   result.<span class="keyword">add</span>(matrix[i][endX]);</span><br><span class="line"> 		   &#125;</span><br><span class="line"> 	   &#125;</span><br><span class="line"> 	   // 从右到左打印一行</span><br><span class="line"> 	   <span class="keyword">if</span> (<span class="keyword">start</span>&lt;endX &amp;&amp; <span class="keyword">start</span>&lt;endY) &#123;</span><br><span class="line"> 		   <span class="keyword">for</span> (<span class="type">int</span> i=endX<span class="number">-1</span>; i&gt;=<span class="keyword">start</span>; i<span class="comment">--) &#123;</span></span><br><span class="line"> 			   result.<span class="keyword">add</span>(matrix[endY][i]);</span><br><span class="line"> 		   &#125;</span><br><span class="line"> 	   &#125;</span><br><span class="line"> 	   // 从下到上打印一行</span><br><span class="line"> 	   <span class="keyword">if</span> (<span class="keyword">start</span>&lt;endX &amp;&amp; <span class="keyword">start</span>&lt;endY<span class="number">-1</span>) &#123;</span><br><span class="line"> 		   <span class="keyword">for</span>(<span class="type">int</span> i=endY<span class="number">-1</span>; i&gt;=<span class="keyword">start</span>+<span class="number">1</span>; i<span class="comment">--) &#123;</span></span><br><span class="line"> 			   result.<span class="keyword">add</span>(matrix[i][<span class="keyword">start</span>]);</span><br><span class="line"> 		   &#125;</span><br><span class="line"> 	   &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a>包含min函数的栈</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">	Stack&lt;<span class="type">Integer</span>&gt; dataStack = <span class="built_in">new</span> Stack&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">	Stack&lt;<span class="type">Integer</span>&gt; minStack = <span class="built_in">new</span> Stack&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">	</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> push(<span class="type">int</span> node) &#123;</span><br><span class="line">        dataStack.push(node);</span><br><span class="line">        <span class="keyword">if</span> (minStack.isEmpty() || node &lt; minStack.peek()) </span><br><span class="line">        	minStack.push(node);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        	minStack.push(minStack.peek());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> pop() &#123;</span><br><span class="line">        <span class="keyword">assert</span>(!dataStack.isEmpty() &amp;&amp; !minStack.isEmpty());</span><br><span class="line">        dataStack.pop();</span><br><span class="line">        minStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> <span class="type">int</span> top() &#123;</span><br><span class="line">        <span class="keyword">assert</span>(!dataStack.isEmpty() &amp;&amp; !minStack.isEmpty());</span><br><span class="line">        <span class="keyword">return</span> dataStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> <span class="type">int</span> min() &#123;</span><br><span class="line">        <span class="keyword">assert</span>(!dataStack.isEmpty() &amp;&amp; !minStack.isEmpty());</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="栈的压入、弹出序列"><a href="#栈的压入、弹出序列" class="headerlink" title="栈的压入、弹出序列"></a>栈的压入、弹出序列</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean IsPopOrder(<span class="built_in">int</span> [] pushA,<span class="built_in">int</span> [] popA) &#123;</span><br><span class="line">    	<span class="built_in">bool</span>ean bPossible = <span class="literal">false</span>;</span><br><span class="line">    	<span class="comment">// 判空</span></span><br><span class="line">    	<span class="keyword">if</span> (pushA==<span class="literal">null</span> || popA==<span class="literal">null</span>) </span><br><span class="line">    		<span class="keyword">return</span> bPossible;</span><br><span class="line">    	<span class="keyword">if</span> (pushA.length != popA.length)</span><br><span class="line">    		<span class="keyword">return</span> bPossible;</span><br><span class="line">    	<span class="built_in">int</span> nLength = pushA.length;</span><br><span class="line">      </span><br><span class="line">    	<span class="built_in">int</span> nextPushInd = <span class="number">0</span>;</span><br><span class="line">    	<span class="built_in">int</span> nextPopInd = <span class="number">0</span>;</span><br><span class="line">    	Stack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;();</span><br><span class="line">    	<span class="keyword">while</span> (nextPopInd &lt; nLength) &#123;</span><br><span class="line">    		<span class="keyword">while</span> (stack.empty() || stack.peek() != popA[nextPopInd]) &#123;</span><br><span class="line">    			<span class="keyword">if</span> (nextPushInd == nLength)</span><br><span class="line">    				<span class="keyword">break</span>;</span><br><span class="line">    			stack.push(pushA[nextPushInd]);</span><br><span class="line">    			nextPushInd++;</span><br><span class="line">    		&#125;</span><br><span class="line">    		<span class="keyword">if</span> (stack.peek() != popA[nextPopInd])</span><br><span class="line">    			<span class="keyword">break</span>;</span><br><span class="line">    		stack.pop();</span><br><span class="line">    		nextPopInd++;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">if</span> (stack.empty() &amp;&amp; nextPopInd== nLength)</span><br><span class="line">    		bPossible=<span class="literal">true</span>;</span><br><span class="line">    	System.<span class="keyword">out</span>.println(nextPushInd);</span><br><span class="line">    	System.<span class="keyword">out</span>.println(nextPopInd);</span><br><span class="line">    	<span class="keyword">return</span> bPossible;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">    	<span class="built_in">int</span>[] pushA = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    	<span class="built_in">int</span>[] popA = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    	Solution solution = new Solution();</span><br><span class="line">    	<span class="built_in">bool</span>ean result = solution.IsPopOrder(pushA, popA);</span><br><span class="line">    	System.<span class="keyword">out</span>.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="从上往下打印二叉树"><a href="#从上往下打印二叉树" class="headerlink" title="从上往下打印二叉树"></a>从上往下打印二叉树</h3><ul>
<li>使用队列实现</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TreeNode &#123;</span><br><span class="line">    <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> TreeNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="built_in">public</span> ArrayList&lt;<span class="type">Integer</span>&gt; PrintFromTopToBottom(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)</span><br><span class="line">        	<span class="keyword">return</span> <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">        ArrayList&lt;<span class="type">Integer</span>&gt; result = <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="built_in">new</span> LinkedList&lt;TreeNode&gt;();	//创建队列</span><br><span class="line">        queue.<span class="keyword">add</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        	TreeNode <span class="keyword">temp</span> = queue.peek();</span><br><span class="line">        	queue.remove();</span><br><span class="line">        	</span><br><span class="line">        	result.<span class="keyword">add</span>(<span class="keyword">temp</span>.val);</span><br><span class="line">        	</span><br><span class="line">        	<span class="keyword">if</span> (<span class="keyword">temp</span>.left != <span class="keyword">null</span>)</span><br><span class="line">        		queue.<span class="keyword">add</span>(<span class="keyword">temp</span>.left);</span><br><span class="line">        	<span class="keyword">if</span> (<span class="keyword">temp</span>.right != <span class="keyword">null</span>) </span><br><span class="line">        		queue.<span class="keyword">add</span>(<span class="keyword">temp</span>.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二叉搜索树的后序遍历序列"><a href="#二叉搜索树的后序遍历序列" class="headerlink" title="二叉搜索树的后序遍历序列"></a>二叉搜索树的后序遍历序列</h3><ul>
<li>二叉搜索树的左子树结点小于根节点，右子树结点大于根结点；</li>
<li>根结点位于后续遍历序列的最后位置</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean VerifySquenceOfBST(<span class="built_in">int</span> [] sequence) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sequence == <span class="literal">null</span> || sequence.length==<span class="number">0</span>) </span><br><span class="line">        	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">int</span> root = sequence[sequence.length<span class="number">-1</span>]; <span class="comment">//根存储在数组的最后位置</span></span><br><span class="line">        <span class="comment">// 二叉搜索树中左子树的结点小于根节点</span></span><br><span class="line">        <span class="built_in">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i&lt;sequence.length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        	<span class="keyword">if</span> (sequence[i] &gt; root)</span><br><span class="line">        		<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 二叉搜索树中右子树的结点大于根节点</span></span><br><span class="line">        <span class="built_in">int</span> j = i;</span><br><span class="line">        <span class="keyword">for</span> (; j&lt;sequence.length<span class="number">-1</span>; j++) &#123;</span><br><span class="line">        	<span class="keyword">if</span> (sequence[j] &lt; root) &#123;</span><br><span class="line">        		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断左子树是不是二叉搜索树</span></span><br><span class="line">        <span class="built_in">bool</span>ean left = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        	left = VerifySquenceOfBST(Arrays.copyOfRange(sequence, <span class="number">0</span>, i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断右子树是不是二叉搜索树</span></span><br><span class="line">        <span class="built_in">bool</span>ean right = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; sequence.length<span class="number">-1</span>)</span><br><span class="line">        	right = VerifySquenceOfBST(Arrays.copyOfRange(sequence, i, sequence.length<span class="number">-1</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (left &amp;&amp; right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二叉树中和为某一值的路径"><a href="#二叉树中和为某一值的路径" class="headerlink" title="二叉树中和为某一值的路径"></a>二叉树中和为某一值的路径</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TreeNode &#123;</span><br><span class="line">    <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> TreeNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="built_in">public</span> ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt; FindPath(TreeNode root,<span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">        	<span class="keyword">return</span> <span class="built_in">new</span> ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt;();</span><br><span class="line">        ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt; arrayList = <span class="built_in">new</span> ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt;();</span><br><span class="line">        ArrayList&lt;<span class="type">Integer</span>&gt; <span class="type">path</span> = <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;(); // 栈，用做存储路径</span><br><span class="line">        <span class="type">int</span> currentSum = <span class="number">0</span>;</span><br><span class="line">        FindPath(root, target, arrayList, <span class="type">path</span>, currentSum);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> FindPath(TreeNode root,<span class="type">int</span> target, ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt; arrayList, ArrayList&lt;<span class="type">Integer</span>&gt; <span class="type">path</span>, <span class="type">int</span> currentSum) &#123;</span><br><span class="line">    	currentSum += root.val;</span><br><span class="line">    	<span class="type">path</span>.<span class="keyword">add</span>(root.val);</span><br><span class="line">    	// 如果是叶结点，并且路径和符合条件</span><br><span class="line">    	<span class="type">boolean</span> isLeaf = ((root.left==<span class="keyword">null</span>) &amp;&amp; (root.right==<span class="keyword">null</span>));</span><br><span class="line">    	<span class="keyword">if</span> (currentSum==target &amp;&amp; isLeaf) &#123;</span><br><span class="line">    		Iterator&lt;<span class="type">Integer</span>&gt; iterator = <span class="type">path</span>.iterator();</span><br><span class="line">    		ArrayList&lt;<span class="type">Integer</span>&gt; pathTemp = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    		<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    			pathTemp.<span class="keyword">add</span>(iterator.next());</span><br><span class="line">    		&#125;</span><br><span class="line">    		</span><br><span class="line">    		arrayList.<span class="keyword">add</span>(pathTemp);</span><br><span class="line">    	&#125;</span><br><span class="line">    	//如果不是叶结点，遍历它的子节点</span><br><span class="line">    	<span class="keyword">if</span> (root.left != <span class="keyword">null</span>) </span><br><span class="line">    		FindPath(root.left, target, arrayList, <span class="type">path</span>, currentSum);</span><br><span class="line">    	<span class="keyword">if</span> (root.right != <span class="keyword">null</span>) </span><br><span class="line">    		FindPath(root.right, target, arrayList, <span class="type">path</span>, currentSum);</span><br><span class="line">    	// 返回父节点前，在路径上删除当前节点</span><br><span class="line">    	<span class="type">path</span>.remove(<span class="type">path</span>.size()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h3><ul>
<li>分成3步实现</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> RandomListNode &#123;</span><br><span class="line">    <span class="keyword">int</span> label;</span><br><span class="line">    RandomListNode <span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line">    RandomListNode random = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    RandomListNode(<span class="keyword">int</span> label) &#123;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="keyword">public</span> RandomListNode Clone(RandomListNode pHead)</span><br><span class="line">    &#123;</span><br><span class="line">    	CloneNode(pHead);</span><br><span class="line">    	ConnectRandomNodes(pHead);</span><br><span class="line">    	<span class="keyword">return</span> ReconnectNodes(pHead);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第一步：创建N的结点，并链接到原结点的后面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> CloneNode(RandomListNode pHead) &#123;</span><br><span class="line">    	RandomListNode pNode = pHead;</span><br><span class="line">    	<span class="keyword">while</span> (pNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">    		RandomListNode pCloned = <span class="keyword">new</span> RandomListNode(pNode.label);</span><br><span class="line">    		pCloned.<span class="keyword">next</span> = pNode.<span class="keyword">next</span>;</span><br><span class="line">    		pCloned.random = <span class="keyword">null</span>; <span class="comment">// 冗余</span></span><br><span class="line">    		pNode.<span class="keyword">next</span> = pCloned;</span><br><span class="line">    		pNode = pCloned.<span class="keyword">next</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第二部：设置复制出来的节点的random</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> ConnectRandomNodes (RandomListNode pHead) &#123;</span><br><span class="line">    	RandomListNode pNode = pHead;</span><br><span class="line">    	<span class="keyword">while</span> (pNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">    		RandomListNode pCloned = pNode.<span class="keyword">next</span>;</span><br><span class="line">    		<span class="keyword">if</span> (pNode.random != <span class="keyword">null</span>) &#123; <span class="comment">// 存在随机链接</span></span><br><span class="line">    			pCloned.random = pNode.random.<span class="keyword">next</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    		pNode = pCloned.<span class="keyword">next</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第三步：将链表分解成两部分：原链表和复制的链表</span></span><br><span class="line">    <span class="keyword">public</span> RandomListNode ReconnectNodes (RandomListNode pHead) &#123;</span><br><span class="line">    	RandomListNode pNode = pHead;</span><br><span class="line">    	RandomListNode pClonedHead = <span class="keyword">null</span>;</span><br><span class="line">    	RandomListNode pClonedNode = <span class="keyword">null</span>;</span><br><span class="line">    	<span class="comment">//处理头结点</span></span><br><span class="line">    	<span class="keyword">if</span> (pNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">    		pClonedHead = pClonedNode = pNode.<span class="keyword">next</span>;</span><br><span class="line">    		pNode.<span class="keyword">next</span> = pClonedNode.<span class="keyword">next</span>;</span><br><span class="line">    		pNode = pNode.<span class="keyword">next</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="comment">//处理后面的结点</span></span><br><span class="line">    	<span class="keyword">while</span> (pNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">    		pClonedNode.<span class="keyword">next</span> = pNode.<span class="keyword">next</span>;</span><br><span class="line">    		pClonedNode = pClonedNode.<span class="keyword">next</span>;</span><br><span class="line">    		pNode.<span class="keyword">next</span> = pClonedNode.<span class="keyword">next</span>;</span><br><span class="line">    		pNode = pNode.<span class="keyword">next</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> pClonedHead;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h3><ul>
<li>这道题有点难</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> TreeNode &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">val</span> = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = null;</span><br><span class="line">    TreeNode right = null;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">TreeNode(<span class="params">int</span> <span class="params">val</span>)</span> &#123;</span><br><span class="line">        this.<span class="keyword">val</span> = <span class="keyword">val</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    public TreeNode <span class="constructor">Convert(TreeNode <span class="params">pRootOfTree</span>)</span> &#123;</span><br><span class="line">    	<span class="keyword">if</span> (pRootOfTree<span class="operator"> == </span>null)</span><br><span class="line">    		return pRootOfTree;</span><br><span class="line">        <span class="comment">//TreeNode pLastOfList = null;</span></span><br><span class="line">    	TreeNode pLastOfList = <span class="keyword">new</span> <span class="constructor">TreeNode(0)</span>;</span><br><span class="line">    	pLastOfList = <span class="constructor">ConvertNode(<span class="params">pRootOfTree</span>, <span class="params">pLastOfList</span>)</span>;</span><br><span class="line">        TreeNode pHeadOfList = pLastOfList;</span><br><span class="line">        <span class="keyword">while</span> (pLastOfList!=null<span class="operator">  &amp;&amp; </span>pHeadOfList.left!=null) &#123;</span><br><span class="line">        	pHeadOfList = pHeadOfList.left;</span><br><span class="line">        &#125;</span><br><span class="line">        pHeadOfList = pHeadOfList.right;</span><br><span class="line">        pHeadOfList.left = null;</span><br><span class="line">        return pHeadOfList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public TreeNode ConvertNode (TreeNode pNode, TreeNode pLastOfList) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (pNode<span class="operator"> == </span>null) </span><br><span class="line">    		return pNode;</span><br><span class="line">    	TreeNode pCurrent = pNode;</span><br><span class="line">    	<span class="keyword">if</span> (pCurrent.left != null) </span><br><span class="line">    		pLastOfList = <span class="constructor">ConvertNode(<span class="params">pCurrent</span>.<span class="params">left</span>, <span class="params">pLastOfList</span>)</span>;</span><br><span class="line">    	pCurrent.left = pLastOfList;</span><br><span class="line">    	<span class="keyword">if</span> (pLastOfList != null)</span><br><span class="line">    		pLastOfList.right = pCurrent;</span><br><span class="line">    	pLastOfList = pCurrent;</span><br><span class="line">    	<span class="keyword">if</span> (pCurrent.right != null) &#123;</span><br><span class="line">    		pLastOfList = <span class="constructor">ConvertNode(<span class="params">pCurrent</span>.<span class="params">right</span>, <span class="params">pLastOfList</span>)</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	return pLastOfList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">    	TreeNode a = <span class="keyword">new</span> <span class="constructor">TreeNode(10)</span>;</span><br><span class="line">    	TreeNode b = <span class="keyword">new</span> <span class="constructor">TreeNode(6)</span>;</span><br><span class="line">    	TreeNode c = <span class="keyword">new</span> <span class="constructor">TreeNode(14)</span>;</span><br><span class="line">    	TreeNode d = <span class="keyword">new</span> <span class="constructor">TreeNode(4)</span>;</span><br><span class="line">    	TreeNode e = <span class="keyword">new</span> <span class="constructor">TreeNode(8)</span>;</span><br><span class="line">    	TreeNode f = <span class="keyword">new</span> <span class="constructor">TreeNode(12)</span>;</span><br><span class="line">    	TreeNode g = <span class="keyword">new</span> <span class="constructor">TreeNode(16)</span>;</span><br><span class="line">    	a.left = b;</span><br><span class="line">    	a.right = c;</span><br><span class="line">    	b.left = d;</span><br><span class="line">    	b.right = e;</span><br><span class="line">    	c.left = f;</span><br><span class="line">    	c.right = g;</span><br><span class="line">    	Solution solution = <span class="keyword">new</span> <span class="constructor">Solution()</span>;</span><br><span class="line">    	TreeNode pHead = solution.<span class="constructor">Convert(<span class="params">a</span>)</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">while</span> (pHead != null) &#123;</span><br><span class="line">    		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(pHead.<span class="keyword">val</span> + <span class="string">"→"</span>);</span><br><span class="line">    		pHead = pHead.right;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br><span class="line">    	<span class="keyword">while</span> (pHead != null) &#123;</span><br><span class="line">    		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(pHead.<span class="keyword">val</span> + <span class="string">"→"</span>);</span><br><span class="line">    		pHead = pHead.left;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a>字符串的排列</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    public ArrayList&lt;String&gt; <span class="constructor">Permutation(String <span class="params">str</span>)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (str<span class="operator"> == </span>null)</span><br><span class="line">    	   return null;</span><br><span class="line">    	   <span class="comment">//return new ArrayList&lt;String&gt;();</span></span><br><span class="line">       ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;<span class="literal">()</span>;</span><br><span class="line">       StringBuffer stringBuffer = <span class="keyword">new</span> <span class="constructor">StringBuffer(<span class="params">str</span>)</span>;</span><br><span class="line">       <span class="constructor">Permutation(<span class="params">arrayList</span>, <span class="params">stringBuffer</span>, 0)</span>;</span><br><span class="line">       String<span class="literal">[]</span> strArray = <span class="keyword">new</span> String<span class="literal">[<span class="identifier">arrayList</span>.<span class="identifier">size</span>()]</span>;</span><br><span class="line">       arrayList.<span class="keyword">to</span><span class="constructor">Array(<span class="params">strArray</span>)</span>;</span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>sort(strArray);</span><br><span class="line">       for (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;arrayList.size<span class="literal">()</span>; i++) &#123;</span><br><span class="line">    	   arrayList.set(i, strArray<span class="literal">[<span class="identifier">i</span>]</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       return arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void <span class="constructor">Permutation(ArrayList&lt;String&gt; <span class="params">arrayList</span>, StringBuffer <span class="params">stringBuffer</span>, <span class="params">int</span> <span class="params">ind</span>)</span> &#123;</span><br><span class="line">    	<span class="keyword">if</span> (ind<span class="operator"> == </span>stringBuffer.length<span class="literal">()</span>-<span class="number">1</span>) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (!arrayList.contains(stringBuffer.<span class="keyword">to</span><span class="constructor">String()</span>)) &#123;</span><br><span class="line">    			arrayList.add(stringBuffer.<span class="keyword">to</span><span class="constructor">String()</span>);</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    		for (<span class="built_in">int</span> i=ind; i&lt;stringBuffer.length<span class="literal">()</span>; i++) &#123;</span><br><span class="line">    			<span class="built_in">char</span> temp = stringBuffer.<span class="built_in">char</span><span class="constructor">At(<span class="params">i</span>)</span>;</span><br><span class="line">    			stringBuffer.set<span class="constructor">CharAt(<span class="params">i</span>, <span class="params">stringBuffer</span>.<span class="params">charAt</span>(<span class="params">ind</span>)</span>);</span><br><span class="line">    			stringBuffer.set<span class="constructor">CharAt(<span class="params">ind</span>, <span class="params">temp</span>)</span>;</span><br><span class="line">    			</span><br><span class="line">    			<span class="constructor">Permutation(<span class="params">arrayList</span>, <span class="params">stringBuffer</span>, <span class="params">ind</span>+1)</span>;</span><br><span class="line">    			</span><br><span class="line">    			temp = stringBuffer.<span class="built_in">char</span><span class="constructor">At(<span class="params">i</span>)</span>;</span><br><span class="line">    			stringBuffer.set<span class="constructor">CharAt(<span class="params">i</span>, <span class="params">stringBuffer</span>.<span class="params">charAt</span>(<span class="params">ind</span>)</span>);</span><br><span class="line">    			stringBuffer.set<span class="constructor">CharAt(<span class="params">ind</span>, <span class="params">temp</span>)</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main (String<span class="literal">[]</span> args) &#123;</span><br><span class="line">    	Solution solution = <span class="keyword">new</span> <span class="constructor">Solution()</span>;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;<span class="literal">()</span>;</span><br><span class="line">        arrayList = solution.<span class="constructor">Permutation(<span class="string">"abc"</span>)</span>;</span><br><span class="line"></span><br><span class="line">    	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(arrayList.size<span class="literal">()</span>);</span><br><span class="line">    	for (String item : arrayList) &#123;</span><br><span class="line">    		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(item);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第五章-优化时间和空间效率"><a href="#第五章-优化时间和空间效率" class="headerlink" title="第五章 优化时间和空间效率"></a>第五章 优化时间和空间效率</h2><h3 id="数组中出现次数超过一半的数字"><a href="#数组中出现次数超过一半的数字" class="headerlink" title="数组中出现次数超过一半的数字"></a>数组中出现次数超过一半的数字</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中位数，快速排序，partition</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> MoreThanHalfNum_Solution(<span class="built_in">int</span> [] <span class="built_in">array</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (CheckInvalidArray(<span class="built_in">array</span>)) <span class="comment">// 检查输入是否有效</span></span><br><span class="line">        	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> result = <span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">int</span> times = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;<span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">        	<span class="keyword">if</span> (times==<span class="number">0</span>) &#123;</span><br><span class="line">        		result = <span class="built_in">array</span>[i];</span><br><span class="line">        		times = <span class="number">1</span>;</span><br><span class="line">        	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[i] == result)</span><br><span class="line">        		times++;</span><br><span class="line">        	<span class="keyword">else</span> </span><br><span class="line">        		times--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!CheckMoreThanHalf(<span class="built_in">array</span>, result))</span><br><span class="line">        	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean CheckInvalidArray (<span class="built_in">int</span>[] <span class="built_in">array</span>) &#123;</span><br><span class="line">    	<span class="built_in">bool</span>ean g_bInputInvalid = <span class="literal">false</span>;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="built_in">array</span>==<span class="literal">null</span> || <span class="built_in">array</span>.length&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">    		g_bInputInvalid = <span class="literal">true</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> g_bInputInvalid;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">bool</span>ean CheckMoreThanHalf (<span class="built_in">int</span>[] <span class="built_in">array</span>, <span class="built_in">int</span> number) &#123;</span><br><span class="line">    	<span class="built_in">int</span> times = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (<span class="built_in">array</span>[i] == number)</span><br><span class="line">    			times++;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="built_in">bool</span>ean isMoreThanHalf = <span class="literal">true</span>;</span><br><span class="line">    	<span class="keyword">if</span> (times * <span class="number">2</span> &lt;= <span class="built_in">array</span>.length) &#123;</span><br><span class="line">    		isMoreThanHalf = <span class="literal">false</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> isMoreThanHalf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最小的K个数"><a href="#最小的K个数" class="headerlink" title="最小的K个数"></a>最小的K个数</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="built_in">public</span> ArrayList&lt;<span class="type">Integer</span>&gt; GetLeastNumbers_Solution(<span class="type">int</span> [] <span class="keyword">input</span>, <span class="type">int</span> k) &#123;</span><br><span class="line">    	<span class="type">int</span> n = <span class="keyword">input</span>.length;</span><br><span class="line">    	<span class="keyword">if</span> (input==<span class="keyword">null</span> || n&lt;=<span class="number">0</span> || k&lt;=<span class="number">0</span> || k&gt;n)</span><br><span class="line">    		<span class="keyword">return</span> <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">    	</span><br><span class="line">    	<span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">    	<span class="type">int</span> end = n<span class="number">-1</span>;</span><br><span class="line">    	<span class="type">int</span> <span class="keyword">index</span> = <span class="keyword">Partition</span>(<span class="keyword">input</span>, <span class="keyword">start</span>, <span class="keyword">end</span>);</span><br><span class="line">    	<span class="keyword">while</span> (<span class="keyword">index</span> != k<span class="number">-1</span>) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (<span class="keyword">index</span>&gt;k<span class="number">-1</span>) &#123;</span><br><span class="line">    			end = <span class="keyword">index</span><span class="number">-1</span>;</span><br><span class="line">    			<span class="keyword">index</span> = <span class="keyword">Partition</span>(<span class="keyword">input</span>, <span class="keyword">start</span>, <span class="keyword">end</span>);</span><br><span class="line">    		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    			start = <span class="keyword">index</span>+<span class="number">1</span>;</span><br><span class="line">    			<span class="keyword">index</span> = <span class="keyword">Partition</span>(<span class="keyword">input</span>, <span class="keyword">start</span>, <span class="keyword">end</span>);</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	ArrayList&lt;<span class="type">Integer</span>&gt; result = <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">    	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;k; i++) &#123;</span><br><span class="line">    		result.<span class="keyword">add</span>(<span class="keyword">input</span>[i]);</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> <span class="type">int</span> <span class="keyword">Partition</span>(<span class="type">int</span>[] data, <span class="type">int</span> <span class="keyword">start</span>, <span class="type">int</span> <span class="keyword">end</span>) &#123;</span><br><span class="line">    	<span class="type">int</span> length = data.length;</span><br><span class="line">    	<span class="keyword">if</span> (data==<span class="keyword">null</span> || length&lt;=<span class="number">0</span> || <span class="keyword">start</span>&lt;<span class="number">0</span> || <span class="keyword">end</span>&gt;=length)</span><br><span class="line">			try &#123;</span><br><span class="line">				throw <span class="built_in">new</span> <span class="keyword">Exception</span>("Invalid Parameters");</span><br><span class="line">			&#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">				// TODO Auto-<span class="keyword">generated</span> catch block</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">    	<span class="type">int</span> <span class="keyword">index</span> = (<span class="type">int</span>)(Math.random()*(<span class="keyword">end</span>-<span class="keyword">start</span>) + <span class="keyword">start</span>);</span><br><span class="line">    	Swap(data, <span class="keyword">index</span>, <span class="keyword">end</span>);</span><br><span class="line">    	</span><br><span class="line">    	<span class="type">int</span> small = <span class="keyword">start</span><span class="number">-1</span>;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">index</span>=<span class="keyword">start</span>; <span class="keyword">index</span>&lt;<span class="keyword">end</span>; <span class="keyword">index</span>++) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (data[<span class="keyword">index</span>] &lt; data[<span class="keyword">end</span>]) &#123;</span><br><span class="line">    			small++;</span><br><span class="line">    			<span class="keyword">if</span> (small != <span class="keyword">index</span>)</span><br><span class="line">    				Swap(data, <span class="keyword">index</span>, small);</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	small++;</span><br><span class="line">    	Swap(data, small, <span class="keyword">end</span>);</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> small;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> Swap (<span class="type">int</span>[] data, <span class="type">int</span> <span class="keyword">index</span>, <span class="type">int</span> <span class="keyword">end</span>) &#123;</span><br><span class="line">    	<span class="type">int</span> <span class="keyword">temp</span> = data[<span class="keyword">index</span>];</span><br><span class="line">    	data[<span class="keyword">index</span>] = data[<span class="keyword">end</span>];</span><br><span class="line">    	data[<span class="keyword">end</span>] = <span class="keyword">temp</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a>连续子数组的最大和</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> FindGreatestSumOfSubArray(<span class="built_in">int</span>[] <span class="built_in">array</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>==<span class="literal">null</span> || <span class="built_in">array</span>.length&lt;=<span class="number">0</span>)</span><br><span class="line">        	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span> nCurSum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> nGreatestSum = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">        	<span class="keyword">if</span> (nCurSum&lt;<span class="number">0</span>)</span><br><span class="line">        		nCurSum = <span class="built_in">array</span>[i];</span><br><span class="line">        	<span class="keyword">else</span></span><br><span class="line">        		nCurSum += <span class="built_in">array</span>[i];</span><br><span class="line">        	</span><br><span class="line">        	<span class="keyword">if</span> (nCurSum&gt;nGreatestSum)</span><br><span class="line">        		nGreatestSum = nCurSum;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> nGreatestSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整数中1出现的次数（从1到n整数中1出现的次数）"><a href="#整数中1出现的次数（从1到n整数中1出现的次数）" class="headerlink" title="整数中1出现的次数（从1到n整数中1出现的次数）"></a>整数中1出现的次数（从1到n整数中1出现的次数）</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> NumberOf1Between1AndN_Solution(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    	<span class="built_in">int</span> number = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;=n; i++) </span><br><span class="line">    		number += NumberOf1(i);</span><br><span class="line">    	<span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> NumberOf1(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    	<span class="built_in">int</span> number = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (n%<span class="number">10</span> == <span class="number">1</span>) </span><br><span class="line">    			number++;</span><br><span class="line">    		n /= <span class="number">10</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main (String[] args) &#123;</span><br><span class="line">    	Solution solution = new Solution();</span><br><span class="line">    	</span><br><span class="line">    	System.<span class="keyword">out</span>.println(solution.NumberOf1Between1AndN_Solution(<span class="number">11</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="把数组排成最小的数"><a href="#把数组排成最小的数" class="headerlink" title="把数组排成最小的数"></a>把数组排成最小的数</h3><ul>
<li>确定一种排序规则</li>
<li>隐性的大数问题</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">PrintMinNumber</span><span class="params">(<span class="keyword">int</span> [] numbers)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span> (numbers==null || numbers.length&lt;=<span class="number">0</span>)</span><br><span class="line">    		<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">String</span>();</span><br><span class="line">    	<span class="comment">// 数组转化成字符串数组</span></span><br><span class="line">    	<span class="keyword">String</span>[] strArray = <span class="keyword">new</span> <span class="keyword">String</span>[numbers.length];</span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numbers.length; i++) </span><br><span class="line">    		strArray[i] = <span class="keyword">String</span>.valueOf(numbers[i]);</span><br><span class="line">    	<span class="comment">//排序</span></span><br><span class="line">    	Arrays.sort(strArray, <span class="keyword">new</span> ComparatorTest());</span><br><span class="line">    	<span class="comment">// 连接</span></span><br><span class="line">    	StringBuilder sBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numbers.length; i++) &#123;</span><br><span class="line">    		sBuilder.append(strArray[i]);</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> sBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">    	Solution solu = <span class="keyword">new</span> Solution();</span><br><span class="line">    	<span class="keyword">int</span>[] a = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    	<span class="keyword">String</span> str = <span class="keyword">new</span> <span class="keyword">String</span>();</span><br><span class="line">    	str = solu.PrintMinNumber(a);</span><br><span class="line">    	System.out.<span class="built_in">println</span>(str);</span><br><span class="line">    	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComparatorTest</span> <span class="title">implements</span> <span class="title">Comparator</span>&lt;String&gt; &#123;</span></span><br><span class="line">	@Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">String</span> str1, <span class="keyword">String</span> str2)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">String</span> strCombine1 = str1 + str2;</span><br><span class="line">    	<span class="keyword">String</span> strCombine2 = str2 + str1;</span><br><span class="line">    	<span class="keyword">return</span> strCombine1.compareTo(strCombine2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a>丑数</h3><ul>
<li>第一种方法，复杂度过高</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> GetUglyNumber_Solution(<span class="built_in">int</span> index) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (index &lt;= <span class="number">0</span>)</span><br><span class="line">    		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="built_in">int</span> number = <span class="number">0</span>;</span><br><span class="line">    	<span class="built_in">int</span> uglyFound = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">while</span> (uglyFound &lt; index) &#123;</span><br><span class="line">    		number++;</span><br><span class="line">    		<span class="keyword">if</span> (IsUgly(number))</span><br><span class="line">    			uglyFound++;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean IsUgly (<span class="built_in">int</span> number) &#123;</span><br><span class="line">    	<span class="keyword">while</span> (number%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    		number /=<span class="number">2</span>;</span><br><span class="line">    	<span class="keyword">while</span> (number%<span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">    		number /=<span class="number">3</span>;</span><br><span class="line">    	<span class="keyword">while</span> (number%<span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">    		number /=<span class="number">5</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> (number==<span class="number">1</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">    	Solution solu = new Solution();</span><br><span class="line">    	System.<span class="keyword">out</span>.println(solu.GetUglyNumber_Solution(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>第二种方法：优化时间复杂度</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> GetUglyNumber_Solution(<span class="built_in">int</span> index) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (index &lt;= <span class="number">0</span>)</span><br><span class="line">    		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="built_in">int</span>[] uglyNumbers = new <span class="built_in">int</span>[index];</span><br><span class="line">    	uglyNumbers[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    	<span class="built_in">int</span> nextUglyIndex = <span class="number">1</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="built_in">int</span> ind2 = <span class="number">0</span>;</span><br><span class="line">    	<span class="built_in">int</span> ind3 = <span class="number">0</span>;</span><br><span class="line">    	<span class="built_in">int</span> ind5 = <span class="number">0</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">while</span> (nextUglyIndex &lt; index) &#123;</span><br><span class="line">    		<span class="built_in">int</span> min = Min(uglyNumbers[ind2]*<span class="number">2</span>, uglyNumbers[ind3]*<span class="number">3</span>, uglyNumbers[ind5]*<span class="number">5</span>);</span><br><span class="line">    		uglyNumbers[nextUglyIndex] = min;</span><br><span class="line">    		<span class="keyword">while</span>(uglyNumbers[ind2]*<span class="number">2</span> &lt;= uglyNumbers[nextUglyIndex])</span><br><span class="line">    			ind2++;</span><br><span class="line">    		<span class="keyword">while</span>(uglyNumbers[ind3]*<span class="number">3</span> &lt;= uglyNumbers[nextUglyIndex])</span><br><span class="line">    			ind3++;</span><br><span class="line">    		<span class="keyword">while</span>(uglyNumbers[ind5]*<span class="number">5</span> &lt;= uglyNumbers[nextUglyIndex])</span><br><span class="line">    			ind5++;</span><br><span class="line">    		++nextUglyIndex;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="built_in">int</span> ugly = uglyNumbers[nextUglyIndex<span class="number">-1</span>];</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> ugly;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> Min(<span class="built_in">int</span> number1, <span class="built_in">int</span> number2, <span class="built_in">int</span> number3) &#123;</span><br><span class="line">    	<span class="built_in">int</span> min = (number1&lt;number2) ? number1 : number2;</span><br><span class="line">    	min = (min&lt;number3) ? min : number3;</span><br><span class="line">    	<span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">    	Solution solu = new Solution();</span><br><span class="line">    	System.<span class="keyword">out</span>.println(solu.GetUglyNumber_Solution(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第一个只出现一次的字符位置"><a href="#第一个只出现一次的字符位置" class="headerlink" title="第一个只出现一次的字符位置"></a>第一个只出现一次的字符位置</h3><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class Solution &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> FirstNotRepeatingChar(<span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="built_in">str</span>==<span class="keyword">null</span> || <span class="built_in">str</span>.length()&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">    		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="built_in">int</span> tableSize = <span class="number">256</span>;</span><br><span class="line">    	<span class="built_in">int</span>[] hashTable = <span class="keyword">new</span> <span class="built_in">int</span>[tableSize]; <span class="comment">//自动初始化为0</span></span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">str</span>.length(); i++)</span><br><span class="line">    		hashTable[<span class="built_in">str</span>.charAt(i)]++;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">str</span>.length(); i++) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (hashTable[<span class="built_in">str</span>.charAt(i)]==<span class="number">1</span>) &#123;</span><br><span class="line">    			<span class="keyword">return</span> i;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">    	Solution solu = <span class="keyword">new</span> Solution();</span><br><span class="line">    	<span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"google"</span>;</span><br><span class="line">    	System.out.<span class="built_in">println</span>(solu.FirstNotRepeatingChar(<span class="built_in">str</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="—-数组中的逆序对—"><a href="#—-数组中的逆序对—" class="headerlink" title="—-数组中的逆序对—-"></a>—-数组中的逆序对—-</h3><ul>
<li>错误</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> InversePairs(<span class="built_in">int</span> [] <span class="built_in">array</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>==<span class="literal">null</span> || <span class="built_in">array</span>.length&lt;=<span class="number">0</span>)</span><br><span class="line">        	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span>[] copy = new <span class="built_in">int</span>[<span class="built_in">array</span>.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.length; ++i)</span><br><span class="line">        	copy[i] = <span class="built_in">array</span>[i];</span><br><span class="line">        </span><br><span class="line">        long count=InversePairsCore(<span class="built_in">array</span>, copy, <span class="number">0</span>, <span class="built_in">array</span>.length<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>)count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> long InversePairsCore(<span class="built_in">int</span>[] <span class="built_in">array</span>, <span class="built_in">int</span>[] copy, <span class="built_in">int</span> start, <span class="built_in">int</span> end) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">    		copy[start] = <span class="built_in">array</span>[start];</span><br><span class="line">    		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="built_in">int</span> length = (end-start)/<span class="number">2</span>;</span><br><span class="line">    	long left = InversePairsCore(copy, <span class="built_in">array</span>, start, start+length);</span><br><span class="line">    	long right = InversePairsCore(copy, <span class="built_in">array</span>, start+length+<span class="number">1</span>, end);</span><br><span class="line">    	<span class="comment">// i初始化为前半段最后一个数字的下标</span></span><br><span class="line">    	<span class="built_in">int</span> i= start + length;</span><br><span class="line">    	<span class="comment">// j初始化为后半段最后一个数字的下标</span></span><br><span class="line">    	<span class="built_in">int</span> j = end;</span><br><span class="line">    	<span class="built_in">int</span> indexCopy = end;</span><br><span class="line">    	long count = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">while</span> (i&gt;=start &amp;&amp; j&gt;=start+length+<span class="number">1</span>) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (<span class="built_in">array</span>[i] &gt; <span class="built_in">array</span>[j]) &#123;</span><br><span class="line">    			copy[indexCopy--] = <span class="built_in">array</span>[i--];</span><br><span class="line">    			count += j-start-length;</span><br><span class="line">    		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    			copy[indexCopy--] = <span class="built_in">array</span>[j--];</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">for</span> (; i&gt;=start; --i) </span><br><span class="line">    		copy[indexCopy--] = <span class="built_in">array</span>[i];</span><br><span class="line">    	<span class="keyword">for</span> (; j&gt;=start+length+<span class="number">1</span>; --j) </span><br><span class="line">    		copy[indexCopy--] = <span class="built_in">array</span>[j];</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> left+right+count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">    	Solution solu = new Solution();</span><br><span class="line">    	<span class="built_in">int</span>[] a = &#123;<span class="number">364</span>,<span class="number">637</span>,<span class="number">341</span>,<span class="number">406</span>,<span class="number">747</span>,<span class="number">995</span>,<span class="number">234</span>,<span class="number">971</span>,<span class="number">571</span>,<span class="number">219</span>,<span class="number">993</span>,<span class="number">407</span>,<span class="number">416</span>,<span class="number">366</span>,<span class="number">315</span>,<span class="number">301</span>,<span class="number">601</span>,<span class="number">650</span>,<span class="number">418</span>,<span class="number">355</span>,<span class="number">460</span>,<span class="number">505</span>,<span class="number">360</span>,<span class="number">965</span>,<span class="number">516</span>,<span class="number">648</span>,<span class="number">727</span>,<span class="number">667</span>,<span class="number">465</span>,<span class="number">849</span>,<span class="number">455</span>,<span class="number">181</span>,<span class="number">486</span>,<span class="number">149</span>,<span class="number">588</span>,<span class="number">233</span>,<span class="number">144</span>,<span class="number">174</span>,<span class="number">557</span>,<span class="number">67</span>,<span class="number">746</span>,<span class="number">550</span>,<span class="number">474</span>,<span class="number">162</span>,<span class="number">268</span>,<span class="number">142</span>,<span class="number">463</span>,<span class="number">221</span>,<span class="number">882</span>,<span class="number">576</span>,<span class="number">604</span>,<span class="number">739</span>,<span class="number">288</span>,<span class="number">569</span>,<span class="number">256</span>,<span class="number">936</span>,<span class="number">275</span>,<span class="number">401</span>,<span class="number">497</span>,<span class="number">82</span>,<span class="number">935</span>,<span class="number">983</span>,<span class="number">583</span>,<span class="number">523</span>,<span class="number">697</span>,<span class="number">478</span>,<span class="number">147</span>,<span class="number">795</span>,<span class="number">380</span>,<span class="number">973</span>,<span class="number">958</span>,<span class="number">115</span>,<span class="number">773</span>,<span class="number">870</span>,<span class="number">259</span>,<span class="number">655</span>,<span class="number">446</span>,<span class="number">863</span>,<span class="number">735</span>,<span class="number">784</span>,<span class="number">3</span>,<span class="number">671</span>,<span class="number">433</span>,<span class="number">630</span>,<span class="number">425</span>,<span class="number">930</span>,<span class="number">64</span>,<span class="number">266</span>,<span class="number">235</span>,<span class="number">187</span>,<span class="number">284</span>,<span class="number">665</span>,<span class="number">874</span>,<span class="number">80</span>,<span class="number">45</span>,<span class="number">848</span>,<span class="number">38</span>,<span class="number">811</span>,<span class="number">267</span>,<span class="number">575</span>&#125;;</span><br><span class="line">    	System.<span class="keyword">out</span>.println(solu.InversePairs(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="两个链表的第一个公共节点"><a href="#两个链表的第一个公共节点" class="headerlink" title="两个链表的第一个公共节点"></a>两个链表的第一个公共节点</h3><ul>
<li>先计算链表的长度，然后让长链表先走几步，再让两个链表同时走，第一个相同的结点就是结果。</li>
<li>两个链表的形状是Y形。</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">ListNode</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> val;</span><br><span class="line">    ListNode next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="built_in">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (pHead1==<span class="literal">null</span>)</span><br><span class="line">    		<span class="keyword">return</span> pHead1;</span><br><span class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(pHead2==<span class="literal">null</span>)</span><br><span class="line">    		<span class="keyword">return</span> pHead2;</span><br><span class="line">    	<span class="built_in">int</span> nLength1 = GetListLength(pHead1);</span><br><span class="line">    	<span class="built_in">int</span> nLength2 = GetListLength(pHead2);</span><br><span class="line">    	<span class="built_in">int</span> nLengthDif = nLength1 - nLength2;</span><br><span class="line">    	ListNode pListHeadLong = pHead1;</span><br><span class="line">    	ListNode pListHeadShort = pHead2;</span><br><span class="line">    	<span class="keyword">if</span> (nLength2 &gt; nLength1) &#123;</span><br><span class="line">    		pListHeadLong = pHead2;</span><br><span class="line">    		pListHeadShort = pHead1;</span><br><span class="line">    		nLengthDif = nLength2-nLength1;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="comment">// 长链表先走几步</span></span><br><span class="line">    	<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;nLengthDif; i++)</span><br><span class="line">    		pListHeadLong = pListHeadLong.next;</span><br><span class="line">    	<span class="comment">// 再同时在两个链表上遍历</span></span><br><span class="line">    	<span class="keyword">while</span>((pListHeadLong!=<span class="literal">null</span>) &amp;&amp; (pListHeadShort!=<span class="literal">null</span>) &amp;&amp; (pListHeadLong!=pListHeadShort)) &#123;</span><br><span class="line">    		pListHeadLong = pListHeadLong.next;</span><br><span class="line">    		pListHeadShort = pListHeadShort.next;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="comment">// 得到第一个公共结点</span></span><br><span class="line">    	ListNode pFirstCommonNode = pListHeadLong;</span><br><span class="line">    	<span class="keyword">return</span> pFirstCommonNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算链表的长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> GetListLength(ListNode head) &#123;</span><br><span class="line">    	<span class="built_in">int</span> nLength = <span class="number">0</span>;</span><br><span class="line">    	ListNode node = head;</span><br><span class="line">    	<span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">    		nLength++;</span><br><span class="line">    		node = node.next;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> nLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第六章-面试中的各项能力"><a href="#第六章-面试中的各项能力" class="headerlink" title="第六章 面试中的各项能力"></a>第六章 面试中的各项能力</h2><h3 id="数字在排序数组中出现的次数"><a href="#数字在排序数组中出现的次数" class="headerlink" title="数字在排序数组中出现的次数"></a>数字在排序数组中出现的次数</h3><ul>
<li>通过二分查找找到第一个k和最后一个k的位置，即可。</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> GetNumberOfK(<span class="built_in">int</span> [] <span class="built_in">array</span> , <span class="built_in">int</span> k) &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">array</span>==<span class="literal">null</span> || <span class="built_in">array</span>.length&lt;=<span class="number">0</span>)</span><br><span class="line">    	   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="built_in">int</span> number=<span class="number">0</span>;</span><br><span class="line">       <span class="built_in">int</span> length = <span class="built_in">array</span>.length;</span><br><span class="line">       <span class="built_in">int</span> first = GetFirstK(<span class="built_in">array</span>, length, k, <span class="number">0</span>, length<span class="number">-1</span>);</span><br><span class="line">       <span class="built_in">int</span> last = GetLastK(<span class="built_in">array</span>, length, k, <span class="number">0</span>, length<span class="number">-1</span>);</span><br><span class="line">       <span class="keyword">if</span> (first&gt;<span class="number">-1</span> &amp;&amp; last&gt;<span class="number">-1</span>)</span><br><span class="line">    	   number = last-first+<span class="number">1</span>;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算第一个K的索引位置</span></span><br><span class="line">    <span class="built_in">int</span> GetFirstK(<span class="built_in">int</span>[] <span class="built_in">array</span>, <span class="built_in">int</span> length, <span class="built_in">int</span> k, <span class="built_in">int</span> start, <span class="built_in">int</span> end) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (start&gt;end)</span><br><span class="line">    		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    	<span class="built_in">int</span> middleIndex = (start+end)/<span class="number">2</span>;</span><br><span class="line">    	<span class="built_in">int</span> middleData = <span class="built_in">array</span>[middleIndex];</span><br><span class="line">    	<span class="keyword">if</span>(middleData == k) &#123;</span><br><span class="line">    		<span class="keyword">if</span> ((middleIndex&gt;<span class="number">0</span> &amp;&amp; <span class="built_in">array</span>[middleIndex<span class="number">-1</span>]!=k) || middleIndex==<span class="number">0</span>)</span><br><span class="line">    			<span class="keyword">return</span> middleIndex;</span><br><span class="line">    		<span class="keyword">else</span> </span><br><span class="line">    			end = middleIndex<span class="number">-1</span>;</span><br><span class="line">    	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(middleData&gt;k)</span><br><span class="line">    		end = middleIndex<span class="number">-1</span>;</span><br><span class="line">    	<span class="keyword">else</span></span><br><span class="line">    		start = middleIndex+<span class="number">1</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> GetFirstK(<span class="built_in">array</span>, length, k, start, end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算最后一个k的位置</span></span><br><span class="line">    <span class="built_in">int</span> GetLastK(<span class="built_in">int</span>[] <span class="built_in">array</span>, <span class="built_in">int</span> length, <span class="built_in">int</span> k, <span class="built_in">int</span> start, <span class="built_in">int</span> end) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (start&gt;end)</span><br><span class="line">    		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    	<span class="built_in">int</span> middleIndex = (start+end)/<span class="number">2</span>;</span><br><span class="line">    	<span class="built_in">int</span> middleData = <span class="built_in">array</span>[middleIndex];</span><br><span class="line">    	<span class="keyword">if</span>(middleData == k) &#123;</span><br><span class="line">    		<span class="keyword">if</span> ((middleIndex&lt;length<span class="number">-1</span> &amp;&amp; <span class="built_in">array</span>[middleIndex+<span class="number">1</span>]!=k) || middleIndex==length<span class="number">-1</span>)</span><br><span class="line">    			<span class="keyword">return</span> middleIndex;</span><br><span class="line">    		<span class="keyword">else</span> </span><br><span class="line">    			start = middleIndex+<span class="number">1</span>;</span><br><span class="line">    	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(middleData&lt;k)</span><br><span class="line">    		start = middleIndex+<span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">else</span></span><br><span class="line">    		end = middleIndex<span class="number">-1</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> GetLastK(<span class="built_in">array</span>, length, k, start, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a>二叉树的深度</h3><ul>
<li>根据树的遍历改写。</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> TreeDepth(TreeNode pRoot)</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="keyword">if</span> (pRoot==<span class="literal">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">int</span> nLeft = TreeDepth(pRoot.left);</span><br><span class="line">		<span class="built_in">int</span> nRight = TreeDepth(pRoot.right);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> (nLeft&gt;nRight) ? (nLeft+<span class="number">1</span>) : (nRight+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="数组中只出现一次的数字"><a href="#数组中只出现一次的数字" class="headerlink" title="数组中只出现一次的数字"></a>数组中只出现一次的数字</h3><ul>
<li>难</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//num1,num2分别为长度为1的数组。传出参数</span></span><br><span class="line"><span class="comment">//将num1[0],num2[0]设置为返回结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">void</span> FindNumsAppearOnce(<span class="built_in">int</span> [] <span class="built_in">array</span>,<span class="built_in">int</span> num1[] , <span class="built_in">int</span> num2[]) &#123;</span><br><span class="line">	  <span class="built_in">int</span> length = <span class="built_in">array</span>.length;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">array</span>==<span class="literal">null</span> || length&lt;<span class="number">2</span>)</span><br><span class="line">    	  <span class="keyword">return</span>;</span><br><span class="line">      <span class="built_in">int</span> resultExclusiveOR = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;length; i++)</span><br><span class="line">    	  resultExclusiveOR ^= <span class="built_in">array</span>[i];</span><br><span class="line">      <span class="built_in">int</span> indexOf1 = FindFirstBitIs1(resultExclusiveOR);</span><br><span class="line">      num1[<span class="number">0</span>] = num2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> j=<span class="number">0</span>; j&lt;length; j++) &#123;</span><br><span class="line">    	  <span class="keyword">if</span> (IsBit1(<span class="built_in">array</span>[j], indexOf1))</span><br><span class="line">    		  num1[<span class="number">0</span>] ^= <span class="built_in">array</span>[j];</span><br><span class="line">    	  <span class="keyword">else</span></span><br><span class="line">    		  num2[<span class="number">0</span>] ^= <span class="built_in">array</span>[j];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> FindFirstBitIs1 (<span class="built_in">int</span> num) &#123;</span><br><span class="line">	  <span class="built_in">int</span> indexBit = <span class="number">0</span>;</span><br><span class="line">	  <span class="keyword">while</span> (((num&amp;<span class="number">1</span>)==<span class="number">0</span>) &amp;&amp; (indexBit&lt;Integer.SIZE)) &#123;</span><br><span class="line">		  num = num&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	      indexBit++;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="keyword">return</span> indexBit;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">bool</span>ean IsBit1 (<span class="built_in">int</span> num, <span class="built_in">int</span> indexBit) &#123;</span><br><span class="line">	  num = num &gt;&gt; indexBit;</span><br><span class="line">	  <span class="keyword">return</span> ((num &amp; <span class="number">1</span>)!=<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> static <span class="built_in">void</span> main (String[] args) &#123;</span><br><span class="line">	  Solution solu = new Solution();</span><br><span class="line">	  <span class="built_in">int</span>[] a = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">	  <span class="built_in">int</span>[] b = new <span class="built_in">int</span>[<span class="number">1</span>];</span><br><span class="line">	  <span class="built_in">int</span>[] c = new <span class="built_in">int</span>[<span class="number">1</span>];</span><br><span class="line">	  solu.FindNumsAppearOnce(a, b, c);</span><br><span class="line">	  System.<span class="keyword">out</span>.println(b[<span class="number">0</span>] + <span class="string">" "</span> + c[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="和为S的连续正数序列"><a href="#和为S的连续正数序列" class="headerlink" title="和为S的连续正数序列"></a>和为S的连续正数序列</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="built_in">public</span> ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt; &gt; FindContinuousSequence(<span class="type">int</span> sum) &#123;</span><br><span class="line">    	ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt; result = <span class="built_in">new</span> ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt;();</span><br><span class="line">    	<span class="keyword">if</span> (sum&lt;<span class="number">3</span>)</span><br><span class="line">    	   <span class="keyword">return</span> result;</span><br><span class="line">    	</span><br><span class="line">    	<span class="type">int</span> small = <span class="number">1</span>;</span><br><span class="line">    	<span class="type">int</span> big = <span class="number">2</span>;</span><br><span class="line">    	<span class="type">int</span> middle = (<span class="number">1</span>+sum)/<span class="number">2</span>;</span><br><span class="line">    	<span class="type">int</span> curSum = small + big;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">while</span> (small &lt; middle) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (curSum == sum)</span><br><span class="line">    			addElem (result, small, big);</span><br><span class="line">    		<span class="keyword">while</span>(curSum&gt;sum &amp;&amp; small&lt;middle) &#123;</span><br><span class="line">    			curSum -= small;</span><br><span class="line">    			small++;</span><br><span class="line">    			<span class="keyword">if</span> (curSum==sum)</span><br><span class="line">    				addElem (result, small, big);</span><br><span class="line">    		&#125;</span><br><span class="line">    		big++;</span><br><span class="line">    		curSum += big;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> addElem (ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt; <span class="keyword">array</span>, <span class="type">int</span> small, <span class="type">int</span> big) &#123;</span><br><span class="line">    	ArrayList&lt;<span class="type">Integer</span>&gt; <span class="keyword">temp</span>= <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=small; i&lt;=big; i++) &#123;</span><br><span class="line">			<span class="keyword">temp</span>.<span class="keyword">add</span>(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">array</span>.<span class="keyword">add</span>(<span class="keyword">temp</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main (String[] args) &#123;</span><br><span class="line">    	Solution solu = <span class="built_in">new</span> Solution();</span><br><span class="line">    	ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt; <span class="keyword">array</span>;</span><br><span class="line">    	<span class="keyword">array</span> = solu.FindContinuousSequence(<span class="number">15</span>);</span><br><span class="line">    	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">array</span>.size(); i++) &#123;</span><br><span class="line">    		<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="keyword">array</span>.<span class="keyword">get</span>(i).size(); j++) &#123;</span><br><span class="line">    			<span class="keyword">System</span>.<span class="keyword">out</span>.print(<span class="keyword">array</span>.<span class="keyword">get</span>(i).<span class="keyword">get</span>(j));</span><br><span class="line">    		&#125;</span><br><span class="line">    		<span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="和为S的两个数字"><a href="#和为S的两个数字" class="headerlink" title="和为S的两个数字"></a>和为S的两个数字</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">	<span class="built_in">public</span> ArrayList&lt;<span class="type">Integer</span>&gt; FindNumbersWithSum(<span class="type">int</span> [] <span class="keyword">array</span>,<span class="type">int</span> sum) &#123;</span><br><span class="line">        //<span class="type">boolean</span> <span class="built_in">found</span> = <span class="keyword">false</span>;</span><br><span class="line">        <span class="type">int</span> length = <span class="keyword">array</span>.length;</span><br><span class="line">        ArrayList&lt;<span class="type">Integer</span>&gt; al = <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (length&lt;<span class="number">1</span>) </span><br><span class="line">        	<span class="keyword">return</span> al;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> ahead = length<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> behind = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (ahead&gt;behind) &#123;</span><br><span class="line">        	long curSum = <span class="keyword">array</span>[ahead] + <span class="keyword">array</span>[behind];</span><br><span class="line">        	<span class="keyword">if</span>(curSum==sum) &#123;</span><br><span class="line">        		al.<span class="keyword">add</span>(<span class="keyword">array</span>[behind]);</span><br><span class="line">        		al.<span class="keyword">add</span>(<span class="keyword">array</span>[ahead]);</span><br><span class="line">        		//<span class="built_in">found</span> = <span class="keyword">true</span>;</span><br><span class="line">        		break;</span><br><span class="line">        	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (curSum &gt; sum) &#123;</span><br><span class="line">        		ahead<span class="comment">--;</span></span><br><span class="line">        	&#125; <span class="keyword">else</span> </span><br><span class="line">        		behind++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> al;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="左旋转字符串"><a href="#左旋转字符串" class="headerlink" title="左旋转字符串"></a>左旋转字符串</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    public String <span class="constructor">LeftRotateString(String <span class="params">str</span>,<span class="params">int</span> <span class="params">n</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str != null) &#123;</span><br><span class="line">        	<span class="built_in">int</span> nLength = str.length<span class="literal">()</span>;</span><br><span class="line">        	<span class="keyword">if</span> (nLength&gt;<span class="number">0</span><span class="operator"> &amp;&amp; </span>n&gt;<span class="number">0</span><span class="operator"> &amp;&amp; </span>n&lt;nLength) &#123;</span><br><span class="line">        		<span class="built_in">int</span> begin1 = <span class="number">0</span>;</span><br><span class="line">        		<span class="built_in">int</span> end1 = n-<span class="number">1</span>;</span><br><span class="line">        		<span class="built_in">int</span> begin2 = n;</span><br><span class="line">        		<span class="built_in">int</span> end2 = nLength-<span class="number">1</span>;</span><br><span class="line">        		<span class="built_in">char</span><span class="literal">[]</span> strArr = str.<span class="keyword">to</span><span class="constructor">CharArray()</span>;</span><br><span class="line">        		<span class="constructor">Reverse(<span class="params">strArr</span>, <span class="params">begin1</span>, <span class="params">end1</span>)</span>;</span><br><span class="line">        		<span class="constructor">Reverse(<span class="params">strArr</span>, <span class="params">begin2</span>, <span class="params">end2</span>)</span>;</span><br><span class="line">        		<span class="constructor">Reverse(<span class="params">strArr</span>, <span class="params">begin1</span>, <span class="params">end2</span>)</span>;</span><br><span class="line">        		str = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>copy<span class="constructor">ValueOf(<span class="params">strArr</span>)</span>;</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void <span class="constructor">Reverse(<span class="params">char</span>[] <span class="params">strArr</span>, <span class="params">int</span> <span class="params">begin</span>, <span class="params">int</span> <span class="params">end</span>)</span> &#123;</span><br><span class="line">    	<span class="keyword">if</span> (strArr==null)</span><br><span class="line">    		return;</span><br><span class="line">    	<span class="keyword">while</span> (<span class="keyword">begin</span>&lt;<span class="keyword">end</span>) &#123;</span><br><span class="line">    		<span class="built_in">char</span> temp = strArr<span class="literal">[<span class="identifier">begin</span>]</span>;</span><br><span class="line">    		strArr<span class="literal">[<span class="identifier">begin</span>]</span> = strArr<span class="literal">[<span class="identifier">end</span>]</span>;</span><br><span class="line">    		strArr<span class="literal">[<span class="identifier">end</span>]</span> = temp;</span><br><span class="line">    		<span class="keyword">begin</span>++;</span><br><span class="line">    		<span class="keyword">end</span>--;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">    	Solution solu = <span class="keyword">new</span> <span class="constructor">Solution()</span>;</span><br><span class="line">    	<span class="comment">//String str = solu.ReverseSentence("I am a student.");</span></span><br><span class="line">    	String str = solu.<span class="constructor">LeftRotateString(<span class="string">"Wonderful"</span>, 2)</span>;</span><br><span class="line">    	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="翻转单词顺序序列"><a href="#翻转单词顺序序列" class="headerlink" title="翻转单词顺序序列"></a>翻转单词顺序序列</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">ReverseSentence</span><span class="params">(<span class="keyword">String</span> str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str==null || str.length()&lt;=<span class="number">0</span>)</span><br><span class="line">        	<span class="keyword">return</span> str;</span><br><span class="line">        <span class="keyword">char</span>[] strArr = str.toCharArray();</span><br><span class="line">        <span class="comment">// 翻转所有的字符</span></span><br><span class="line">        Reverse(strArr, <span class="number">0</span>, strArr.length<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// 翻转句子中每个单词</span></span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">begin</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">end</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">begin</span> &lt; strArr.length<span class="number">-1</span>) &#123;</span><br><span class="line">        	<span class="keyword">if</span> (strArr[<span class="built_in">begin</span>] == <span class="string">' '</span>) &#123;</span><br><span class="line">        		<span class="built_in">begin</span>++;</span><br><span class="line">        		<span class="built_in">end</span>++;</span><br><span class="line">        	&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">end</span> == strArr.length || strArr[<span class="built_in">end</span>]==<span class="string">' '</span>) &#123;</span><br><span class="line">        		<span class="built_in">end</span>--;</span><br><span class="line">        		Reverse(strArr, <span class="built_in">begin</span>, <span class="built_in">end</span>);</span><br><span class="line">        		<span class="built_in">begin</span> = ++<span class="built_in">end</span>;</span><br><span class="line">        	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        		</span><br><span class="line">        		<span class="built_in">end</span>++;</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">String</span>.copyValueOf(strArr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(<span class="keyword">char</span>[] strArr, <span class="keyword">int</span> <span class="built_in">begin</span>, <span class="keyword">int</span> <span class="built_in">end</span>)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span> (strArr==null)</span><br><span class="line">    		<span class="keyword">return</span>;</span><br><span class="line">    	<span class="keyword">while</span> (<span class="built_in">begin</span>&lt;<span class="built_in">end</span>) &#123;</span><br><span class="line">    		<span class="keyword">char</span> temp = strArr[<span class="built_in">begin</span>];</span><br><span class="line">    		strArr[<span class="built_in">begin</span>] = strArr[<span class="built_in">end</span>];</span><br><span class="line">    		strArr[<span class="built_in">end</span>] = temp;</span><br><span class="line">    		<span class="built_in">begin</span>++;</span><br><span class="line">    		<span class="built_in">end</span>--;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">    	Solution solu = <span class="keyword">new</span> Solution();</span><br><span class="line">    	<span class="comment">//String str = solu.ReverseSentence("I am a student.");</span></span><br><span class="line">    	<span class="keyword">String</span> str = solu.ReverseSentence(<span class="string">"Wonderful"</span>);</span><br><span class="line">    	System.out.<span class="built_in">println</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="扑克牌顺子"><a href="#扑克牌顺子" class="headerlink" title="扑克牌顺子"></a>扑克牌顺子</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean isContinuous(<span class="built_in">int</span> [] numbers) &#123;</span><br><span class="line">    	<span class="built_in">int</span> length = numbers.length;</span><br><span class="line">    	<span class="keyword">if</span> (numbers==<span class="literal">null</span> || length&lt;<span class="number">1</span>) </span><br><span class="line">    		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    	Integer[] numArr = new Integer[length];</span><br><span class="line">    	<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</span><br><span class="line">    		numArr[i] = numbers[i];</span><br><span class="line">    	&#125;</span><br><span class="line">    	Arrays.sort(numArr, new ComparatorTest());</span><br><span class="line">    	</span><br><span class="line">    	<span class="built_in">int</span> numOfZero = <span class="number">0</span>;</span><br><span class="line">    	<span class="built_in">int</span> numOfGap = <span class="number">0</span>;</span><br><span class="line">    	<span class="comment">// 统计0的个数</span></span><br><span class="line">    	<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;length;i++)</span><br><span class="line">    		<span class="keyword">if</span> (numArr[i] == <span class="number">0</span>)</span><br><span class="line">    			numOfZero++;</span><br><span class="line">    	<span class="comment">// 统计间隔的数目</span></span><br><span class="line">    	<span class="built_in">int</span> small = numOfZero;	<span class="comment">//第一个非零数字的位置</span></span><br><span class="line">    	<span class="built_in">int</span> big = small + <span class="number">1</span>;	<span class="comment">//第二个非零数字的位置</span></span><br><span class="line">    	<span class="keyword">while</span> (big &lt; length) &#123;</span><br><span class="line">    		<span class="comment">// 如果两个数相等，不可能是顺子</span></span><br><span class="line">    		<span class="keyword">if</span> (numArr[small] == numArr[big])</span><br><span class="line">    			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    		numOfGap += numArr[big] - numArr[small] - <span class="number">1</span>;</span><br><span class="line">    		small = big;</span><br><span class="line">    		big++;</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">    	<span class="keyword">return</span> (numOfGap&gt;numOfZero) ? <span class="literal">false</span>: <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">    	Solution solu = new Solution();</span><br><span class="line">    	<span class="comment">//int a[] = &#123;1,2,0,4,5&#125;;</span></span><br><span class="line">    	<span class="built_in">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    	System.<span class="keyword">out</span>.println(solu.isContinuous(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">ComparatorTest</span> <span class="symbol">implements</span> <span class="symbol">Comparator</span>&lt;<span class="symbol">Integer</span>&gt; &#123;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> compare(Integer num1, Integer num2) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> num1-num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="孩子们的游戏（圆圈中最后剩下的数）"><a href="#孩子们的游戏（圆圈中最后剩下的数）" class="headerlink" title="孩子们的游戏（圆圈中最后剩下的数）"></a>孩子们的游戏（圆圈中最后剩下的数）</h3><ul>
<li>分析规律，构建递归公式。</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> LastRemaining_Solution(<span class="built_in">int</span> n, <span class="built_in">int</span> m) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (n&lt;<span class="number">1</span> || m&lt;<span class="number">1</span>)</span><br><span class="line">    		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    	<span class="built_in">int</span> last = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">2</span>; i&lt;=n; i++) &#123;</span><br><span class="line">    		last = (last+m)%i;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="求1-2-3-…-n"><a href="#求1-2-3-…-n" class="headerlink" title="求1+2+3+…+n"></a>求1+2+3+…+n</h3><ul>
<li>要求不让使用循环，条件语句实现。</li>
<li>使用构造函数可以实现。</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Sum_Solution</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        	sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">    	Solution solu = <span class="keyword">new</span> Solution();</span><br><span class="line">    	System.out.<span class="built_in">println</span>(solu.Sum_Solution(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="不用加减乘除做加法"><a href="#不用加减乘除做加法" class="headerlink" title="不用加减乘除做加法"></a>不用加减乘除做加法</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum, carry;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">        	sum = num1 ^ num2;</span><br><span class="line">        	carry = (num1 &amp; num2) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        	num1 = sum;</span><br><span class="line">        	num2 = carry;</span><br><span class="line">        &#125;<span class="keyword">while</span>(num2 != <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">    	Solution solu = <span class="keyword">new</span> Solution();</span><br><span class="line">    	System.out.<span class="built_in">println</span>(solu.Add(<span class="number">3</span>, <span class="number">34</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第七章-两个面试案例"><a href="#第七章-两个面试案例" class="headerlink" title="第七章 两个面试案例"></a>第七章 两个面试案例</h2><h3 id="把字符串转换成整数"><a href="#把字符串转换成整数" class="headerlink" title="把字符串转换成整数"></a>把字符串转换成整数</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">StrToInt</span><span class="params">(<span class="keyword">String</span> str)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">try</span>&#123;</span><br><span class="line">    		result = Integer.valueOf(str);</span><br><span class="line">    	&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    		<span class="comment">//e.printStackTrace();</span></span><br><span class="line">    	&#125; </span><br><span class="line">    	<span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">    	Solution solu = <span class="keyword">new</span> Solution();</span><br><span class="line">    	System.out.<span class="built_in">println</span>(solu.StrToInt(<span class="string">"12a"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第八章-英文版新增面试题"><a href="#第八章-英文版新增面试题" class="headerlink" title="第八章 英文版新增面试题"></a>第八章 英文版新增面试题</h2><h3 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h3><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    // Parameters:</span><br><span class="line">    //    numbers:     an<span class="built_in"> array </span>of integers</span><br><span class="line">    //    length:      the length of<span class="built_in"> array </span>numbers</span><br><span class="line">    //    duplication: (Output) the duplicated number in the<span class="built_in"> array </span>number,length of duplication<span class="built_in"> array </span>is 1,so using duplication[0] = ? in implementation;</span><br><span class="line">    //                  Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++</span><br><span class="line">    //    这里要特别注意~返回任意重复的一个，赋值duplication[0]</span><br><span class="line">    // Return value:       true<span class="built_in"> if </span>the input is valid,<span class="built_in"> and </span>there are some duplications in the<span class="built_in"> array </span>number</span><br><span class="line">    //                     otherwise false</span><br><span class="line">   <span class="keyword"> public</span> boolean duplicate(int numbers[],int length,int [] duplication) &#123;</span><br><span class="line">    	duplication[0] = -1;</span><br><span class="line">    <span class="built_in">	if </span>(numbers==null || numbers.length&lt;1)</span><br><span class="line">    	<span class="built_in">	return </span>false;</span><br><span class="line">    	for (int i=0; i&lt;length; i++) </span><br><span class="line">    	<span class="built_in">	if </span>(numbers[i]&lt;0 || numbers[i]&gt;length-1)</span><br><span class="line">    		<span class="built_in">	return </span>false;</span><br><span class="line">    	</span><br><span class="line">    	for (int i=0; i&lt;length; i++) &#123;</span><br><span class="line">    		while (numbers[i] != i) &#123;</span><br><span class="line">    		<span class="built_in">	if </span>(numbers[i] == numbers[numbers[i]]) &#123;</span><br><span class="line">    				duplication[0] = numbers[i];</span><br><span class="line">    			<span class="built_in">	return </span>true;</span><br><span class="line">    			&#125;</span><br><span class="line">    			// 交换第i个元素和第numbers[i]个元素</span><br><span class="line">    		<span class="built_in">	int </span>temp = numbers[i];</span><br><span class="line">    			numbers[i] = numbers[temp];</span><br><span class="line">    			numbers[temp] = temp;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    <span class="built_in">	return </span>false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> void main (String[] args) &#123;</span><br><span class="line">    	Solution solu =<span class="built_in"> new </span>Solution();</span><br><span class="line">    	//int[] numbers = &#123;2,3,1,0,2,5,3&#125;;</span><br><span class="line">    	int[] numbers = &#123;0,1&#125;;</span><br><span class="line">    	int[] duplication =<span class="built_in"> new </span>int[1];</span><br><span class="line">    	boolean b = solu.duplicate(numbers, numbers.length, duplication);</span><br><span class="line">    	System.out.println(b);</span><br><span class="line">    	System.out.println(duplication[0]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="构建乘积数组"><a href="#构建乘积数组" class="headerlink" title="构建乘积数组"></a>构建乘积数组</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>[] multiply(<span class="built_in">int</span>[] A) &#123;</span><br><span class="line">		<span class="built_in">int</span>[] result = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (A==<span class="literal">null</span> || A.length&lt;<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		result = new <span class="built_in">int</span>[A.length];</span><br><span class="line">		<span class="comment">// result = C*D</span></span><br><span class="line">		<span class="comment">// C</span></span><br><span class="line">		result[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;result.length; i++) &#123;</span><br><span class="line">			result[i] = result[i<span class="number">-1</span>] * A[i<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// D</span></span><br><span class="line">		<span class="built_in">int</span> temp = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i=result.length<span class="number">-2</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">			temp *= A[i+<span class="number">1</span>]; <span class="comment">// D[i]</span></span><br><span class="line">			result[i] *= temp; <span class="comment">// result[i]=C[i]*D[i]</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">    	Solution solu = new Solution();</span><br><span class="line">    	<span class="built_in">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    	<span class="built_in">int</span>[] b = new <span class="built_in">int</span>[<span class="number">3</span>];</span><br><span class="line">    	b = solu.multiply(a);</span><br><span class="line">    	<span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;b.length; i++) &#123;</span><br><span class="line">    		System.<span class="keyword">out</span>.print(b[i]);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    public boolean <span class="keyword">match</span>(<span class="built_in">char</span><span class="literal">[]</span> str, <span class="built_in">char</span><span class="literal">[]</span> pattern)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str==null<span class="operator"> || </span>pattern==null)</span><br><span class="line">        	return <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        return <span class="keyword">match</span><span class="constructor">Core(<span class="params">str</span>, <span class="params">pattern</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public boolean matchCore (<span class="built_in">char</span><span class="literal">[]</span> str, <span class="built_in">char</span><span class="literal">[]</span> pattern) &#123;</span><br><span class="line">    	<span class="comment">// 模式为空的情况</span></span><br><span class="line">    	<span class="keyword">if</span> (str.length==<span class="number">0</span><span class="operator"> &amp;&amp; </span>pattern.length==<span class="number">0</span>)</span><br><span class="line">    		return <span class="literal">true</span>;</span><br><span class="line">    	<span class="keyword">if</span> (str.length!=<span class="number">0</span><span class="operator"> &amp;&amp; </span>pattern.length==<span class="number">0</span>)</span><br><span class="line">    		return <span class="literal">false</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">if</span> (pattern.length&gt;<span class="number">1</span><span class="operator"> &amp;&amp; </span>pattern<span class="literal">[<span class="number">1</span>]</span><span class="operator"> == </span><span class="character">'*'</span>) &#123;</span><br><span class="line">    		<span class="comment">//if (str[0]==pattern[0] || (pattern[0]=='.' &amp;&amp; str.length!=0))&#123;</span></span><br><span class="line">    		<span class="keyword">if</span> (str.length!=<span class="number">0</span><span class="operator"> &amp;&amp; </span>(str<span class="literal">[<span class="number">0</span>]</span>==pattern<span class="literal">[<span class="number">0</span>]</span><span class="operator"> || </span>pattern<span class="literal">[<span class="number">0</span>]</span>==<span class="character">'.'</span>))&#123;</span><br><span class="line">    			boolean b1, b2, b3;</span><br><span class="line">    			b1 = <span class="keyword">match</span><span class="constructor">Core(Arrays.<span class="params">copyOfRange</span>(<span class="params">str</span>, 1, <span class="params">str</span>.<span class="params">length</span>)</span>, <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">OfRange(<span class="params">pattern</span>, 2, <span class="params">pattern</span>.<span class="params">length</span>)</span>);</span><br><span class="line">    			b2 = <span class="keyword">match</span><span class="constructor">Core(Arrays.<span class="params">copyOfRange</span>(<span class="params">str</span>, 1, <span class="params">str</span>.<span class="params">length</span>)</span>, pattern);</span><br><span class="line">    			b3 = <span class="keyword">match</span><span class="constructor">Core(<span class="params">str</span>, Arrays.<span class="params">copyOfRange</span>(<span class="params">pattern</span>, 2, <span class="params">pattern</span>.<span class="params">length</span>)</span>);</span><br><span class="line">    			return b1<span class="operator"> || </span>b2<span class="operator"> || </span>b3;</span><br><span class="line">    		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    			return <span class="keyword">match</span><span class="constructor">Core(<span class="params">str</span>, Arrays.<span class="params">copyOfRange</span>(<span class="params">pattern</span>, 2, <span class="params">pattern</span>.<span class="params">length</span>)</span>);</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">if</span> (str.length!=<span class="number">0</span><span class="operator"> &amp;&amp; </span>(str<span class="literal">[<span class="number">0</span>]</span>==pattern<span class="literal">[<span class="number">0</span>]</span><span class="operator"> || </span>pattern<span class="literal">[<span class="number">0</span>]</span>==<span class="character">'.'</span>))</span><br><span class="line">    		return <span class="keyword">match</span><span class="constructor">Core(Arrays.<span class="params">copyOfRange</span>(<span class="params">str</span>, 1, <span class="params">str</span>.<span class="params">length</span>)</span>, <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">OfRange(<span class="params">pattern</span>, 1, <span class="params">pattern</span>.<span class="params">length</span>)</span>);</span><br><span class="line">    	</span><br><span class="line">    	return <span class="literal">false</span>;    	</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main (String<span class="literal">[]</span> args) &#123;</span><br><span class="line">    	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    	char[] str = &#123;'b'&#125;;</span></span><br><span class="line"><span class="comment">    	char[] str2 = Arrays.copyOfRange(str, 1, str.length);</span></span><br><span class="line"><span class="comment">    	System.out.println(str2.length);</span></span><br><span class="line"><span class="comment">    	*/</span></span><br><span class="line">    	<span class="built_in">char</span><span class="literal">[]</span> str = &#123;&#125;;</span><br><span class="line">    	<span class="built_in">char</span><span class="literal">[]</span> pattern = &#123;<span class="character">'.'</span>&#125;;</span><br><span class="line">    	Solution solu = <span class="keyword">new</span> <span class="constructor">Solution()</span>;</span><br><span class="line">    	boolean res = solu.<span class="keyword">match</span>(str, pattern);</span><br><span class="line">    	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(res);</span><br><span class="line">    	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="表示数值的字符串"><a href="#表示数值的字符串" class="headerlink" title="表示数值的字符串"></a>表示数值的字符串</h3><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class Solution &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> isNumeric(<span class="built_in">char</span>[] <span class="built_in">str</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">str</span>==<span class="keyword">null</span> || <span class="built_in">str</span>.length&lt;<span class="number">1</span>)</span><br><span class="line">        	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//跳过正负号</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">str</span>.length&gt;<span class="number">0</span> &amp;&amp; (<span class="built_in">str</span>[<span class="number">0</span>]==<span class="string">'+'</span> || <span class="built_in">str</span>[<span class="number">0</span>]==<span class="string">'-'</span>))</span><br><span class="line">        	<span class="built_in">str</span> = Arrays.copyOfRange(<span class="built_in">str</span>, <span class="number">1</span>, <span class="built_in">str</span>.length);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">str</span>.length==<span class="number">0</span>)</span><br><span class="line">        	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="built_in">boolean</span>[] isNumeric = &#123;<span class="keyword">true</span>&#125;;</span><br><span class="line">        <span class="comment">// 跳过0-9数字</span></span><br><span class="line">        <span class="built_in">str</span> = scanDigits(<span class="built_in">str</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">str</span>.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        	<span class="comment">// 浮点数</span></span><br><span class="line">        	<span class="keyword">if</span> (<span class="built_in">str</span>[<span class="number">0</span>] == <span class="string">'.'</span>) &#123;</span><br><span class="line">        		<span class="built_in">str</span> = Arrays.copyOfRange(<span class="built_in">str</span>, <span class="number">1</span>, <span class="built_in">str</span>.length);</span><br><span class="line">        		<span class="built_in">str</span> = scanDigits(<span class="built_in">str</span>);</span><br><span class="line">        		<span class="keyword">if</span> (<span class="built_in">str</span>.length&gt;<span class="number">0</span> &amp;&amp; (<span class="built_in">str</span>[<span class="number">0</span>]==<span class="string">'e'</span> || <span class="built_in">str</span>[<span class="number">0</span>]==<span class="string">'E'</span>))</span><br><span class="line">        			<span class="built_in">str</span> = isExponential(<span class="built_in">str</span>, isNumeric);</span><br><span class="line">        	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">str</span>[<span class="number">0</span>]==<span class="string">'e'</span> || <span class="built_in">str</span>[<span class="number">0</span>]==<span class="string">'E'</span>) <span class="comment">// 整数</span></span><br><span class="line">        		<span class="built_in">str</span> = isExponential(<span class="built_in">str</span>, isNumeric);</span><br><span class="line">        	<span class="keyword">else</span></span><br><span class="line">        		isNumeric[<span class="number">0</span>] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> isNumeric[<span class="number">0</span>] &amp;&amp; (<span class="built_in">str</span>.length==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">char</span>[] scanDigits(<span class="built_in">char</span>[] <span class="built_in">str</span>) &#123;</span><br><span class="line">    	<span class="keyword">while</span> (<span class="built_in">str</span>.length&gt;<span class="number">0</span> &amp;&amp; <span class="built_in">str</span>[<span class="number">0</span>]&gt;=<span class="string">'0'</span> &amp;&amp; <span class="built_in">str</span>[<span class="number">0</span>]&lt;=<span class="string">'9'</span>) &#123;</span><br><span class="line">    		<span class="built_in">str</span> = Arrays.copyOfRange(<span class="built_in">str</span>, <span class="number">1</span>, <span class="built_in">str</span>.length);</span><br><span class="line">    		<span class="comment">//System.out.println(String.valueOf(str));</span></span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">char</span>[] isExponential (<span class="built_in">char</span>[] <span class="built_in">str</span>, <span class="built_in">boolean</span>[] isExp) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="built_in">str</span>.length&gt;<span class="number">0</span> &amp;&amp; <span class="built_in">str</span>[<span class="number">0</span>]!=<span class="string">'e'</span> &amp;&amp; <span class="built_in">str</span>[<span class="number">0</span>]!=<span class="string">'E'</span>) &#123;</span><br><span class="line">    		isExp[<span class="number">0</span>] = <span class="keyword">false</span>;</span><br><span class="line">    		<span class="keyword">return</span> <span class="built_in">str</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="built_in">str</span> = Arrays.copyOfRange(<span class="built_in">str</span>, <span class="number">1</span>, <span class="built_in">str</span>.length);</span><br><span class="line">    	<span class="keyword">if</span> (<span class="built_in">str</span>.length&gt;<span class="number">0</span> &amp;&amp; (<span class="built_in">str</span>[<span class="number">0</span>]==<span class="string">'+'</span> || <span class="built_in">str</span>[<span class="number">0</span>]==<span class="string">'-'</span>))</span><br><span class="line">    		<span class="built_in">str</span> = Arrays.copyOfRange(<span class="built_in">str</span>, <span class="number">1</span>, <span class="built_in">str</span>.length);</span><br><span class="line">    	<span class="keyword">if</span> (<span class="built_in">str</span>.length&lt;<span class="number">1</span>) &#123;</span><br><span class="line">    		isExp[<span class="number">0</span>] = <span class="keyword">false</span>;</span><br><span class="line">    		<span class="keyword">return</span> <span class="built_in">str</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="built_in">str</span> = scanDigits(<span class="built_in">str</span>);</span><br><span class="line">    	</span><br><span class="line">    	isExp[<span class="number">0</span>] = (<span class="built_in">str</span>.length==<span class="number">0</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main (<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">    	Solution solu = <span class="keyword">new</span> Solution();</span><br><span class="line">    	<span class="built_in">boolean</span> res = solu.isNumeric(<span class="string">"12E3"</span>.toCharArray());</span><br><span class="line">    	System.out.<span class="built_in">println</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符流中第一个不重复的字符"><a href="#字符流中第一个不重复的字符" class="headerlink" title="字符流中第一个不重复的字符"></a>字符流中第一个不重复的字符</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">	<span class="type">int</span>[] occurrence = <span class="built_in">new</span> <span class="type">int</span>[<span class="number">256</span>];</span><br><span class="line">	<span class="type">int</span> <span class="keyword">index</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> Solution() &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;occurrence.length; i++) &#123;</span><br><span class="line">			occurrence[i] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    //<span class="keyword">Insert</span> one <span class="type">char</span> <span class="keyword">from</span> stringstream</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">Insert</span>(<span class="type">char</span> ch)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (occurrence[ch] == <span class="number">-1</span>) //没出现过，设置为索引</span><br><span class="line">        	occurrence[ch] = <span class="keyword">index</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (occurrence[ch]&gt;=<span class="number">0</span>) //已经出现过，标记为<span class="number">-2</span></span><br><span class="line">        	occurrence[ch] = <span class="number">-2</span>;</span><br><span class="line">        <span class="keyword">index</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">  //<span class="keyword">return</span> the first appearence once <span class="type">char</span> <span class="keyword">in</span> <span class="keyword">current</span> stringstream</span><br><span class="line">    <span class="built_in">public</span> <span class="type">char</span> FirstAppearingOnce()</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="type">char</span> ch = <span class="string">'#'</span>;</span><br><span class="line">    	<span class="type">int</span> minIndex = <span class="type">Integer</span>.MAX_VALUE;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (occurrence[i]&gt;=<span class="number">0</span> &amp;&amp; occurrence[i]&lt;minIndex) &#123;</span><br><span class="line">    			ch = (<span class="type">char</span>)i;</span><br><span class="line">    			minIndex = occurrence[i];</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> ch;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链表中第一个不重复的字符"><a href="#链表中第一个不重复的字符" class="headerlink" title="链表中第一个不重复的字符"></a>链表中第一个不重复的字符</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">	<span class="type">int</span>[] occurrence = <span class="built_in">new</span> <span class="type">int</span>[<span class="number">256</span>];</span><br><span class="line">	<span class="type">int</span> <span class="keyword">index</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> Solution() &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;occurrence.length; i++) &#123;</span><br><span class="line">			occurrence[i] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    //<span class="keyword">Insert</span> one <span class="type">char</span> <span class="keyword">from</span> stringstream</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">Insert</span>(<span class="type">char</span> ch)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (occurrence[ch] == <span class="number">-1</span>) //没出现过，设置为索引</span><br><span class="line">        	occurrence[ch] = <span class="keyword">index</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (occurrence[ch]&gt;=<span class="number">0</span>) //已经出现过，标记为<span class="number">-2</span></span><br><span class="line">        	occurrence[ch] = <span class="number">-2</span>;</span><br><span class="line">        <span class="keyword">index</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">  //<span class="keyword">return</span> the first appearence once <span class="type">char</span> <span class="keyword">in</span> <span class="keyword">current</span> stringstream</span><br><span class="line">    <span class="built_in">public</span> <span class="type">char</span> FirstAppearingOnce()</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="type">char</span> ch = <span class="string">'#'</span>;</span><br><span class="line">    	<span class="type">int</span> minIndex = <span class="type">Integer</span>.MAX_VALUE;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (occurrence[i]&gt;=<span class="number">0</span> &amp;&amp; occurrence[i]&lt;minIndex) &#123;</span><br><span class="line">    			ch = (<span class="type">char</span>)i;</span><br><span class="line">    			minIndex = occurrence[i];</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> ch;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链表中环的入口结点"><a href="#链表中环的入口结点" class="headerlink" title="链表中环的入口结点"></a>链表中环的入口结点</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode EntryNodeOfLoop(ListNode pHead)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead==<span class="keyword">null</span>)</span><br><span class="line">        	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 找到环中的一个结点</span></span><br><span class="line">        ListNode meetingNode = MeetingNode(pHead);</span><br><span class="line">        <span class="keyword">if</span> (meetingNode==<span class="keyword">null</span>)</span><br><span class="line">        	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 计算环中节点的数目</span></span><br><span class="line">        <span class="keyword">int</span> nodesInLoop = <span class="number">1</span>;</span><br><span class="line">        ListNode pNode1 = meetingNode;</span><br><span class="line">        <span class="keyword">while</span>(pNode1.<span class="keyword">next</span>!=meetingNode) &#123;</span><br><span class="line">        	pNode1 = pNode1.<span class="keyword">next</span>;</span><br><span class="line">        	nodesInLoop++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 移动n个</span></span><br><span class="line">        pNode1 = pHead;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nodesInLoop; i++) &#123;</span><br><span class="line">        	pNode1 = pNode1.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 同时移动pNode1和pNode2</span></span><br><span class="line">        ListNode pNode2 = pHead;</span><br><span class="line">        <span class="keyword">while</span> (pNode1 != pNode2) &#123;</span><br><span class="line">        	pNode1 = pNode1.<span class="keyword">next</span>;</span><br><span class="line">        	pNode2 = pNode2.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> pNode1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ListNode MeetingNode(ListNode pHead) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (pHead==<span class="keyword">null</span>) <span class="comment">// 判空</span></span><br><span class="line">    		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    	ListNode pSlow = pHead.<span class="keyword">next</span>; <span class="comment">// 定义慢指针</span></span><br><span class="line">    	<span class="keyword">if</span> (pSlow==<span class="keyword">null</span>)</span><br><span class="line">    		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    	ListNode pFast = pSlow.<span class="keyword">next</span>;</span><br><span class="line">    	<span class="keyword">while</span> (pFast!=<span class="keyword">null</span> &amp;&amp; pSlow!=<span class="keyword">null</span>) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (pFast==pSlow)</span><br><span class="line">    			<span class="keyword">return</span> pFast;</span><br><span class="line">    		pSlow = pSlow.<span class="keyword">next</span>; <span class="comment">// 慢指针走一步</span></span><br><span class="line">    		pFast = pFast.<span class="keyword">next</span>; <span class="comment">// 快指针走两步</span></span><br><span class="line">    		<span class="keyword">if</span> (pFast!=<span class="keyword">null</span>)</span><br><span class="line">    			pFast = pFast.<span class="keyword">next</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除链表中重复的结点"><a href="#删除链表中重复的结点" class="headerlink" title="删除链表中重复的结点"></a>删除链表中重复的结点</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    int <span class="keyword">val</span>;</span><br><span class="line">    ListNode next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode(int <span class="keyword">val</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">val</span> = <span class="keyword">val</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode deleteDuplication(ListNode pHead)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span> (pHead == <span class="literal">null</span>)</span><br><span class="line">    		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    	ListNode pPreNode = <span class="literal">null</span>;</span><br><span class="line">    	ListNode pNode = pHead;</span><br><span class="line">    	<span class="keyword">while</span>(pNode!=<span class="literal">null</span>) &#123;</span><br><span class="line">    		ListNode pNext = pNode.next;</span><br><span class="line">    		boolean needDelete = <span class="literal">false</span>;</span><br><span class="line">    		<span class="keyword">if</span> (pNext!=<span class="literal">null</span> &amp;&amp; pNext.<span class="keyword">val</span>==pNode.<span class="keyword">val</span>)</span><br><span class="line">    			needDelete = <span class="literal">true</span>;</span><br><span class="line">    		</span><br><span class="line">    		<span class="keyword">if</span> (!needDelete) &#123;<span class="comment">//不需要删除</span></span><br><span class="line">    			pPreNode = pNode;</span><br><span class="line">    			pNode = pNode.next;</span><br><span class="line">    		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    			int value = pNode.<span class="keyword">val</span>;</span><br><span class="line">    			ListNode pToBeDel = pNode;</span><br><span class="line">    			<span class="keyword">while</span>(pToBeDel!=<span class="literal">null</span> &amp;&amp; pToBeDel.<span class="keyword">val</span>==value) &#123;</span><br><span class="line">    				pNext=pToBeDel.next;</span><br><span class="line">    				pToBeDel = pNext;</span><br><span class="line">    			&#125;</span><br><span class="line">    			</span><br><span class="line">    			<span class="keyword">if</span> (pPreNode==<span class="literal">null</span>)</span><br><span class="line">    				pHead = pNext;</span><br><span class="line">    			<span class="keyword">else</span></span><br><span class="line">    				pPreNode.next = pNext;</span><br><span class="line">    			pNode = pNext;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> pHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二叉树的下一个结点"><a href="#二叉树的下一个结点" class="headerlink" title="二叉树的下一个结点"></a>二叉树的下一个结点</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeLinkNode</span> </span>&#123;</span><br><span class="line">    int <span class="keyword">val</span>;</span><br><span class="line">    TreeLinkNode left = <span class="literal">null</span>;</span><br><span class="line">    TreeLinkNode right = <span class="literal">null</span>;</span><br><span class="line">    TreeLinkNode next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    TreeLinkNode(int <span class="keyword">val</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">val</span> = <span class="keyword">val</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> TreeLinkNode GetNext(TreeLinkNode pNode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pNode==<span class="literal">null</span>)</span><br><span class="line">        	<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        TreeLinkNode pNext = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (pNode.right != <span class="literal">null</span>) &#123; <span class="comment">// 查询点有右子树的情况</span></span><br><span class="line">        	TreeLinkNode pRight = pNode.right;</span><br><span class="line">        	<span class="keyword">while</span> (pRight.left != <span class="literal">null</span>)</span><br><span class="line">        		pRight = pRight.left;</span><br><span class="line">        	pNext = pRight;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pNode.next != <span class="literal">null</span>) &#123; <span class="comment">// 查询点不存在右子树，存在父节点</span></span><br><span class="line">        	TreeLinkNode pCurrent = pNode;</span><br><span class="line">        	TreeLinkNode pParent = pNode.next;</span><br><span class="line">        	<span class="keyword">while</span> (pParent!=<span class="literal">null</span> &amp;&amp; pCurrent==pParent.right) &#123;</span><br><span class="line">        		pCurrent = pParent;</span><br><span class="line">        		pParent = pParent.next;</span><br><span class="line">        	&#125;</span><br><span class="line">        	</span><br><span class="line">        	pNext = pParent;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> pNext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对称的二叉树"><a href="#对称的二叉树" class="headerlink" title="对称的二叉树"></a>对称的二叉树</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    int <span class="keyword">val</span> = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="literal">null</span>;</span><br><span class="line">    TreeNode right = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode(int <span class="keyword">val</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">val</span> = <span class="keyword">val</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    boolean isSymmetrical(TreeNode pRoot)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> isSymmetrical(pRoot, pRoot);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    boolean isSymmetrical(TreeNode pRoot1, TreeNode pRoot2) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (pRoot1==<span class="literal">null</span> &amp;&amp; pRoot2==<span class="literal">null</span>) <span class="comment">// 两个都为null</span></span><br><span class="line">    		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    	<span class="keyword">if</span> (pRoot1==<span class="literal">null</span> || pRoot2==<span class="literal">null</span>) <span class="comment">// 其中一个为null</span></span><br><span class="line">    		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    	<span class="keyword">if</span> (pRoot1.<span class="keyword">val</span> != pRoot2.<span class="keyword">val</span>)</span><br><span class="line">    		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> isSymmetrical(pRoot1.left, pRoot2.right) </span><br><span class="line">    			&amp;&amp; isSymmetrical(pRoot1.right, pRoot2.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="按之字形顺序打印二叉树"><a href="#按之字形顺序打印二叉树" class="headerlink" title="按之字形顺序打印二叉树"></a>按之字形顺序打印二叉树</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TreeNode &#123;</span><br><span class="line">    <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> TreeNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="built_in">public</span> ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt; &gt; Print(TreeNode pRoot) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (pRoot == <span class="keyword">null</span>)</span><br><span class="line">    		<span class="keyword">return</span> <span class="built_in">new</span> ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt; &gt;();</span><br><span class="line">    	</span><br><span class="line">    	ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt; result = <span class="built_in">new</span> ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt;();</span><br><span class="line">    	</span><br><span class="line">    	Stack&lt;TreeNode&gt; level0 = <span class="built_in">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">    	Stack&lt;TreeNode&gt; level1 = <span class="built_in">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">		Stack&lt;TreeNode&gt; levelCurrent;</span><br><span class="line">		Stack&lt;TreeNode&gt; levelNext;</span><br><span class="line">    	//Stack&lt;TreeNode&gt;levleOdd = <span class="built_in">new</span> Stack&lt;TreeNode&gt;();  // 奇数层栈</span><br><span class="line">    	//Stack&lt;TreeNode&gt;levleEven = <span class="built_in">new</span> Stack&lt;TreeNode&gt;(); // 偶数层栈</span><br><span class="line">    	<span class="type">int</span> <span class="keyword">current</span> = <span class="number">0</span>;</span><br><span class="line">    	<span class="type">int</span> next = <span class="number">1</span>;</span><br><span class="line">    	</span><br><span class="line">    	level0.push(pRoot);</span><br><span class="line">    	<span class="keyword">while</span> (!level0.empty() || !level1.empty()) &#123;</span><br><span class="line">    		<span class="keyword">if</span> (<span class="keyword">current</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    			levelCurrent = level0;</span><br><span class="line">    			levelNext = level1;</span><br><span class="line">    		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    			levelCurrent = level1;</span><br><span class="line">    			levelNext = level0;</span><br><span class="line">    		&#125;</span><br><span class="line">    		ArrayList&lt;<span class="type">Integer</span>&gt; <span class="keyword">temp</span> = <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">    		<span class="keyword">while</span> (!levelCurrent.empty()) &#123;</span><br><span class="line">        		TreeNode pNode = levelCurrent.peek();</span><br><span class="line">        		levelCurrent.pop();</span><br><span class="line">        		<span class="keyword">temp</span>.<span class="keyword">add</span>(pNode.val);</span><br><span class="line">        		<span class="keyword">if</span> (<span class="keyword">current</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        			<span class="keyword">if</span> (pNode.left != <span class="keyword">null</span>)</span><br><span class="line">        				levelNext.push(pNode.left);</span><br><span class="line">        			<span class="keyword">if</span> (pNode.right != <span class="keyword">null</span>) </span><br><span class="line">        				levelNext.push(pNode.right);</span><br><span class="line">        		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        			<span class="keyword">if</span> (pNode.right != <span class="keyword">null</span>)</span><br><span class="line">        				levelNext.push(pNode.right);</span><br><span class="line">        			<span class="keyword">if</span> (pNode.left != <span class="keyword">null</span>)</span><br><span class="line">        				levelNext.push(pNode.left);</span><br><span class="line">        		&#125;</span><br><span class="line">    		&#125;</span><br><span class="line">    		</span><br><span class="line">			result.<span class="keyword">add</span>(<span class="keyword">temp</span>);</span><br><span class="line">			<span class="keyword">current</span> = <span class="number">1</span>-<span class="keyword">current</span>;</span><br><span class="line">			next = <span class="number">1</span>-next;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main (String[] args) &#123;</span><br><span class="line">    	Solution solu = <span class="built_in">new</span> Solution();</span><br><span class="line">    	ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt; &gt; result;</span><br><span class="line">    	TreeNode t0 = <span class="built_in">new</span> TreeNode(<span class="number">8</span>);</span><br><span class="line">    	TreeNode t1 = <span class="built_in">new</span> TreeNode(<span class="number">6</span>);</span><br><span class="line">    	TreeNode t2 = <span class="built_in">new</span> TreeNode(<span class="number">10</span>);</span><br><span class="line">    	TreeNode t3 = <span class="built_in">new</span> TreeNode(<span class="number">5</span>);</span><br><span class="line">    	TreeNode t4 = <span class="built_in">new</span> TreeNode(<span class="number">7</span>);</span><br><span class="line">    	TreeNode t5 = <span class="built_in">new</span> TreeNode(<span class="number">9</span>);</span><br><span class="line">    	TreeNode t6 = <span class="built_in">new</span> TreeNode(<span class="number">11</span>);</span><br><span class="line">    	t0.left = t1;</span><br><span class="line">    	t0.right = t2;</span><br><span class="line">    	t1.left = t3;</span><br><span class="line">    	t1.right = t4;</span><br><span class="line">    	t2.left = t5;</span><br><span class="line">    	t2.right = t6;</span><br><span class="line">    	result = solu.Print(t0);</span><br><span class="line">    	<span class="keyword">System</span>.<span class="keyword">out</span>.println(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="把二叉树打印成多行"><a href="#把二叉树打印成多行" class="headerlink" title="把二叉树打印成多行"></a>把二叉树打印成多行</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TreeNode &#123;</span><br><span class="line">    <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> TreeNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt; &gt; Print(TreeNode pRoot) &#123;</span><br><span class="line">    	ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt; result = <span class="built_in">new</span> ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt;();</span><br><span class="line">    	<span class="keyword">if</span> (pRoot == <span class="keyword">null</span>)</span><br><span class="line">    		<span class="keyword">return</span> result;</span><br><span class="line">    	Queue&lt;TreeNode&gt; nodes = <span class="built_in">new</span> LinkedList&lt;TreeNode&gt;();	//创建队列</span><br><span class="line">    	nodes.<span class="keyword">add</span>(pRoot);</span><br><span class="line">    	<span class="type">int</span> nextLevel = <span class="number">0</span>;	 // 下一层点数</span><br><span class="line">    	<span class="type">int</span> toBePrinted = <span class="number">1</span>; // 当前层中还没有打印的点数</span><br><span class="line">    	<span class="keyword">while</span> (!nodes.isEmpty()) &#123;</span><br><span class="line">    		ArrayList&lt;<span class="type">Integer</span>&gt; <span class="keyword">temp</span> = <span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">    		<span class="keyword">while</span> (toBePrinted &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        		TreeNode pNode = nodes.peek();</span><br><span class="line">        		<span class="keyword">temp</span>.<span class="keyword">add</span>(pNode.val);</span><br><span class="line">        		</span><br><span class="line">        		<span class="keyword">if</span> (pNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        			nodes.<span class="keyword">add</span>(pNode.left);</span><br><span class="line">        			nextLevel++; // 下一层增加一个结点</span><br><span class="line">        		&#125;</span><br><span class="line">        		<span class="keyword">if</span> (pNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">        			nodes.<span class="keyword">add</span>(pNode.right);</span><br><span class="line">        			nextLevel++;</span><br><span class="line">        		&#125;</span><br><span class="line">        		nodes.poll();</span><br><span class="line">        		toBePrinted<span class="comment">--;</span></span><br><span class="line">    		&#125;</span><br><span class="line">    		result.<span class="keyword">add</span>(<span class="keyword">temp</span>);</span><br><span class="line">    		toBePrinted = nextLevel;</span><br><span class="line">    		nextLevel = <span class="number">0</span>;</span><br><span class="line">    		</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="序列化二叉树"><a href="#序列化二叉树" class="headerlink" title="序列化二叉树"></a>序列化二叉树</h3><h3 id="二叉搜索树的第k个结点"><a href="#二叉搜索树的第k个结点" class="headerlink" title="二叉搜索树的第k个结点"></a>二叉搜索树的第k个结点</h3><h3 id="数据流中的中位数"><a href="#数据流中的中位数" class="headerlink" title="数据流中的中位数"></a>数据流中的中位数</h3><h3 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a>滑动窗口的最大值</h3><h3 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h3><h3 id="机器人的运动范围"><a href="#机器人的运动范围" class="headerlink" title="机器人的运动范围"></a>机器人的运动范围</h3>]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>编码练习——Java-String-API-练习</title>
    <url>/dd33.html</url>
    <content><![CDATA[<h2 id="初始化（构造函数）"><a href="#初始化（构造函数）" class="headerlink" title="初始化（构造函数）"></a>初始化（构造函数）</h2><ul>
<li>各种初始化方法<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> str1 = <span class="keyword">new</span> <span class="keyword">String</span>();</span><br><span class="line">System.out.<span class="built_in">println</span>(str1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] arr = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="keyword">String</span> str2 = <span class="keyword">new</span> <span class="keyword">String</span>(arr);</span><br><span class="line">System.out.<span class="built_in">println</span>(str2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">String</span> str3 = <span class="string">"zhang"</span>;</span><br><span class="line">System.out.<span class="built_in">println</span>(str3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">String</span> str4 = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"xuezhi"</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(str4);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="String方法"><a href="#String方法" class="headerlink" title="String方法"></a>String方法</h2><h3 id="str-charAt"><a href="#str-charAt" class="headerlink" title="str.charAt()"></a>str.charAt()</h3><ul>
<li>返回指定位置的字符<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="keyword">new</span> <span class="constructor">String(<span class="string">"hello, world!"</span>)</span>;</span><br><span class="line">		</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.<span class="built_in">char</span><span class="constructor">At(4)</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-codePointAt"><a href="#str-codePointAt" class="headerlink" title="str.codePointAt()"></a>str.codePointAt()</h3><ul>
<li>返回指定位置字符的Unicode编码<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">String</span> str1 = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"hello, world!"</span>);</span><br><span class="line"></span><br><span class="line">System.out.<span class="built_in">println</span>(str1.codePointAt(<span class="number">4</span>)); <span class="comment">//o</span></span><br><span class="line">System.out.<span class="built_in">println</span>(str1.codePointAt(<span class="number">8</span>)); <span class="comment">//o</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-codePointBefore"><a href="#str-codePointBefore" class="headerlink" title="str.codePointBefore()"></a>str.codePointBefore()</h3><ul>
<li>返回指定位置前一位置的字符的Unicode编码<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="keyword">new</span> <span class="constructor">String(<span class="string">"hello, world!"</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.code<span class="constructor">PointBefore(3)</span>); <span class="comment">//l</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.code<span class="constructor">PointBefore(4)</span>); <span class="comment">//l</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-codePointCount"><a href="#str-codePointCount" class="headerlink" title="str.codePointCount()"></a>str.codePointCount()</h3><ul>
<li>返回指定范围内的Unicode的编码数量<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="keyword">new</span> <span class="constructor">String(<span class="string">"hello, world!"</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.code<span class="constructor">PointCount(0, 2)</span>); <span class="comment">//he</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-compareTo"><a href="#str-compareTo" class="headerlink" title="str.compareTo()"></a>str.compareTo()</h3><ul>
<li>比较两个字符串的字典序，相等时返回0<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"ba"</span>;</span><br><span class="line">String str2 = <span class="string">"ba"</span>;</span><br><span class="line">String str3 = <span class="string">"be"</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.compare<span class="constructor">To(<span class="params">str2</span>)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.compare<span class="constructor">To(<span class="params">str3</span>)</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-compareToIgnoreCase"><a href="#str-compareToIgnoreCase" class="headerlink" title="str.compareToIgnoreCase()"></a>str.compareToIgnoreCase()</h3><ul>
<li>不区分大小形式，比较两个字符串的字典序，相等时返回0<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"ba"</span>;</span><br><span class="line">String str2 = <span class="string">"bE"</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.compare<span class="constructor">To(<span class="params">str2</span>)</span>);</span><br><span class="line"><span class="comment">// 不区分大小写</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.compare<span class="constructor">ToIgnoreCase(<span class="params">str2</span>)</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-concat"><a href="#str-concat" class="headerlink" title="str.concat()"></a>str.concat()</h3><ul>
<li>字符串拼接<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"hello "</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str2 </span>= <span class="string">"world!"</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str3 </span>= <span class="keyword">str1.concat(str2); </span>// 通过concat()连接</span><br><span class="line"><span class="keyword">String </span><span class="keyword">str4 </span>= <span class="keyword">str1 </span>+ <span class="keyword">str2;	</span>//通过+连接</span><br><span class="line"><span class="symbol">System.out.println</span>(<span class="keyword">str3);</span></span><br><span class="line"><span class="keyword">System.out.println(str4);</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-contains"><a href="#str-contains" class="headerlink" title="str.contains()"></a>str.contains()</h3><ul>
<li>判断 字符串是否包含另一个字符串<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"hello "</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str2 </span>= <span class="string">"ll"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str3 </span>= <span class="string">"ab"</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">System.out.println</span>(<span class="keyword">str1.contains(str2));</span></span><br><span class="line"><span class="keyword">System.out.println(str1.contains(str3));</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-contentEquals"><a href="#str-contentEquals" class="headerlink" title="str.contentEquals()"></a>str.contentEquals()</h3><ul>
<li>判断 两个字符串是否相等<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"hello "</span>;</span><br><span class="line">String str2 = <span class="string">"ll"</span>;</span><br><span class="line">StringBuffer str3 = <span class="keyword">new</span> <span class="constructor">StringBuffer(<span class="string">"hello "</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.content<span class="constructor">Equals(<span class="params">str2</span>)</span>);	<span class="comment">// String</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.content<span class="constructor">Equals(<span class="params">str3</span>)</span>);	<span class="comment">// StringBuffer</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-copyValueOf"><a href="#str-copyValueOf" class="headerlink" title="str.copyValueOf()"></a>str.copyValueOf()</h3><ul>
<li>将字符数组转换成字符串<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">char</span><span class="literal">[]</span> arr = &#123;<span class="character">'h'</span>, <span class="character">'e'</span>, <span class="character">'l'</span>, <span class="character">'l'</span>, <span class="character">'o'</span>&#125;;</span><br><span class="line">String str1 = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>copy<span class="constructor">ValueOf(<span class="params">arr</span>)</span>;</span><br><span class="line">String str2 = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>copy<span class="constructor">ValueOf(<span class="params">arr</span>, 2, 2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str2);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-endsWith"><a href="#str-endsWith" class="headerlink" title="str.endsWith()"></a>str.endsWith()</h3><ul>
<li>判断是否以子字符串结尾<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"hello, world"</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.ends<span class="constructor">With(<span class="string">"world"</span>)</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-equals-amp-str-equalsIgnoreCase"><a href="#str-equals-amp-str-equalsIgnoreCase" class="headerlink" title="str.equals() &amp; str.equalsIgnoreCase()"></a>str.equals() &amp; str.equalsIgnoreCase()</h3><ul>
<li>判等<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"hello, world"</span>;</span><br><span class="line">String str2 = <span class="string">"Hello, world"</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.equals(str2));</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.equals<span class="constructor">IgnoreCase(<span class="params">str2</span>)</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-format"><a href="#str-format" class="headerlink" title="str.format()"></a>str.format()</h3><ul>
<li>字符串格式化<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>format(<span class="string">"Hi, %s!"</span>, <span class="string">"Xuezhi"</span>);</span><br><span class="line">String str2 = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>format(<span class="string">"价格：%d元"</span>, <span class="number">4</span>);</span><br><span class="line">String str3 = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>format(<span class="string">"价格：%.2f元"</span>, <span class="number">4.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str2);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str3);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-getBytes"><a href="#str-getBytes" class="headerlink" title="str.getBytes()"></a>str.getBytes()</h3><ul>
<li>将字符串编码成byte数组<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"abcdef"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">byte[] </span><span class="keyword">bArr </span>= <span class="keyword">str1.getBytes();</span></span><br><span class="line"><span class="keyword">// </span>打印</span><br><span class="line"><span class="symbol">for</span> (<span class="keyword">byte </span><span class="keyword">item </span>: <span class="keyword">bArr) </span></span><br><span class="line">	System.out.print(<span class="keyword">item </span>+ <span class="string">" "</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-hashCode"><a href="#str-hashCode" class="headerlink" title="str.hashCode()"></a>str.hashCode()</h3><ul>
<li>返回它的哈希码<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"abcdef"</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.hash<span class="constructor">Code()</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-indexOf"><a href="#str-indexOf" class="headerlink" title="str.indexOf()"></a>str.indexOf()</h3><ul>
<li>返回字符首次出现的位置<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"abcabc"</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"a的位置是："</span> + str1.index<span class="constructor">Of(<span class="string">"a"</span>)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"a的位置是："</span> + str1.index<span class="constructor">Of('<span class="params">a</span>')</span>);</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"a的位置是："</span> + str1.index<span class="constructor">Of(<span class="string">"a"</span>, 2)</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-lastIndexOf"><a href="#str-lastIndexOf" class="headerlink" title="str.lastIndexOf()"></a>str.lastIndexOf()</h3><ul>
<li>返回字符最后出现的位置<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"abcabc"</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"a的最后位置是："</span> + str1.last<span class="constructor">IndexOf(<span class="string">"a"</span>)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"a的最后位置是："</span> + str1.last<span class="constructor">IndexOf('<span class="params">a</span>')</span>);</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"a的最后位置是："</span> + str1.last<span class="constructor">IndexOf(<span class="string">"a"</span>, 2)</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-intern"><a href="#str-intern" class="headerlink" title="str.intern()"></a>str.intern()</h3><ul>
<li>？</li>
<li>仅当两字符串相等时，intern()返回值相等<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"abcabc"</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str2 </span>= <span class="keyword">str1.intern();</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">System.out.println(str2);</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-isEmpty"><a href="#str-isEmpty" class="headerlink" title="str.isEmpty()"></a>str.isEmpty()</h3><ul>
<li>判断字符串是否为空<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">String str1 = "abc";</span><br><span class="line">String str2 = "";</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(str1.isEmpty());</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(str2.isEmpty());</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-length"><a href="#str-length" class="headerlink" title="str.length()"></a>str.length()</h3><ul>
<li>返回字符串的长度<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">String str1 = "abc";</span><br><span class="line">String str2 = "";</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(str1.length());</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(str2.length());</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-matches"><a href="#str-matches" class="headerlink" title="str.matches()"></a>str.matches()</h3><ul>
<li>是否匹配给定正则表达式<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"hello, world"</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">System.out.println(str1.matches(<span class="string">"(.*)world(.*)"</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-replace"><a href="#str-replace" class="headerlink" title="str.replace()"></a>str.replace()</h3><ul>
<li>字符替换 或 字符串替换<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> str1 = <span class="string">"hello, world"</span>;</span><br><span class="line"><span class="keyword">String</span> str2 = str1.replace(<span class="string">'h'</span>, <span class="string">'H'</span>); <span class="comment">// char</span></span><br><span class="line"><span class="keyword">String</span> str3 = str1.replace(<span class="string">"world"</span>, <span class="string">"WORLD"</span>); <span class="comment">// String</span></span><br><span class="line"></span><br><span class="line">System.out.<span class="built_in">println</span>(str2);</span><br><span class="line">System.out.<span class="built_in">println</span>(str3);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-replaceAll"><a href="#str-replaceAll" class="headerlink" title="str.replaceAll()"></a>str.replaceAll()</h3><ul>
<li>替换所有的符合正则表达式<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> str1 = <span class="string">"hello, world"</span>;</span><br><span class="line"><span class="keyword">String</span> str2 = str1.replaceAll(<span class="string">"l"</span>, <span class="string">"L"</span>); <span class="comment">// char</span></span><br><span class="line"></span><br><span class="line">System.out.<span class="built_in">println</span>(str2);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-replaceFirst"><a href="#str-replaceFirst" class="headerlink" title="str.replaceFirst()"></a>str.replaceFirst()</h3><ul>
<li>替换第一个字符串<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"hello, world"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str2 </span>= <span class="keyword">str1.replaceFirst("l", </span><span class="string">"L"</span>)<span class="comment">; </span></span><br><span class="line"></span><br><span class="line"><span class="symbol">System.out.println</span>(<span class="keyword">str2);</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-split"><a href="#str-split" class="headerlink" title="str.split()"></a>str.split()</h3><ul>
<li>字符串切分<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"abcabcabcabc"</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">String[] </span><span class="keyword">strArr </span>= <span class="keyword">str1.split("a");</span></span><br><span class="line"><span class="keyword">System.out.println(strArr.length);</span></span><br><span class="line"><span class="keyword">for </span>(<span class="keyword">String </span><span class="keyword">item </span>: <span class="keyword">strArr) </span></span><br><span class="line">	System.out.println(<span class="keyword">item);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">String[] </span><span class="keyword">strArr2 </span>= <span class="keyword">str1.split("a",3);</span></span><br><span class="line"><span class="keyword">System.out.println(strArr2.length);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">for </span>(<span class="keyword">String </span><span class="keyword">item </span>: <span class="keyword">strArr2) </span></span><br><span class="line">	System.out.println(<span class="keyword">item);</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-startsWith"><a href="#str-startsWith" class="headerlink" title="str.startsWith()"></a>str.startsWith()</h3><ul>
<li>判断字符串是否以某子字符串开始<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"hello, world!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.starts<span class="constructor">With(<span class="string">"hello"</span>)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.starts<span class="constructor">With(<span class="string">"world"</span>, 7)</span>);<span class="comment">// 偏移</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-subSequence"><a href="#str-subSequence" class="headerlink" title="str.subSequence()"></a>str.subSequence()</h3><ul>
<li>返回指定区间的字符序列<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"hello, world!"</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">System.out.println</span>(<span class="keyword">str1.subSequence(7, </span><span class="number">12</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-substring"><a href="#str-substring" class="headerlink" title="str.substring()"></a>str.substring()</h3><ul>
<li>返回指定区间的字符串<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">String str1 = "hello, world!";</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(str1.substring(<span class="number">7</span>, <span class="number">12</span>));</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(str1.substring(<span class="number">7</span>));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-toCharArray"><a href="#str-toCharArray" class="headerlink" title="str.toCharArray()"></a>str.toCharArray()</h3><ul>
<li>将字符串转换成字符数组<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">char</span><span class="literal">[]</span> charArr = str1.<span class="keyword">to</span><span class="constructor">CharArray()</span>;</span><br><span class="line"></span><br><span class="line">for (<span class="built_in">char</span> item : charArr) </span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(item + <span class="string">" "</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-toLowerCase"><a href="#str-toLowerCase" class="headerlink" title="str.toLowerCase()"></a>str.toLowerCase()</h3><ul>
<li>转换成小写形式<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"abc DEF"</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.<span class="keyword">to</span><span class="constructor">LowerCase()</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-toUpperCase"><a href="#str-toUpperCase" class="headerlink" title="str.toUpperCase()"></a>str.toUpperCase()</h3><ul>
<li>转换成大写形式<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"abc DEF"</span>;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(str1.<span class="keyword">to</span><span class="constructor">UpperCase()</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-trim"><a href="#str-trim" class="headerlink" title="str.trim()"></a>str.trim()</h3><ul>
<li>去除字符串开头和结尾的空白符<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">String str1 = "  abc def  ";</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(str1.trim());</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="str-valueOf"><a href="#str-valueOf" class="headerlink" title="str.valueOf()"></a>str.valueOf()</h3><ul>
<li>将各种类型的数据 转换成 字符串<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">char</span><span class="literal">[]</span> charArr = &#123;<span class="character">'a'</span>, <span class="character">'b'</span>, <span class="character">'c'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">false</span>)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of('<span class="params">a</span>')</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">charArr</span>)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(4.5)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(4)</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>编码练习——Java-数组-API-练习</title>
    <url>/c2a4.html</url>
    <content><![CDATA[<h2 id="java-util-Arrays"><a href="#java-util-Arrays" class="headerlink" title="java.util.Arrays"></a>java.util.Arrays</h2><h3 id="Arrays-asList"><a href="#Arrays-asList" class="headerlink" title="Arrays.asList()"></a>Arrays.asList()</h3><ul>
<li>数组转换成列表</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String<span class="literal">[]</span> strArray = &#123;<span class="string">"zhang"</span>, <span class="string">"xue"</span>, <span class="string">"zhi"</span>&#125;;</span><br><span class="line">List&lt;String&gt; <span class="built_in">list</span> = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">strArray</span>)</span>;</span><br><span class="line"><span class="comment">// 打印元素</span></span><br><span class="line">for (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">list</span>.size<span class="literal">()</span>; i++) &#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="built_in">list</span>.get(i) + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Arrays-binarySearch"><a href="#Arrays-binarySearch" class="headerlink" title="Arrays.binarySearch()"></a>Arrays.binarySearch()</h3><ul>
<li>二分查找</li>
<li>查找前，一定要<strong>排序</strong>。</li>
<li>如果查找元素不存在，返回(-(insertion point) - 1)。</li>
<li>自然数表示查到，负数表示没有查找。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span><span class="literal">[]</span> a = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>sort(a); <span class="comment">// 排序</span></span><br><span class="line"><span class="comment">// 打印数组</span></span><br><span class="line">for (<span class="built_in">int</span> item : a) </span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(item + <span class="string">" "</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br><span class="line"><span class="comment">// 二分查找</span></span><br><span class="line"><span class="built_in">int</span> ind1 = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>binary<span class="constructor">Search(<span class="params">a</span>, 2)</span>;</span><br><span class="line"><span class="built_in">int</span> ind2 = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>binary<span class="constructor">Search(<span class="params">a</span>, 4)</span>;</span><br><span class="line"><span class="built_in">int</span> ind3 = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>binary<span class="constructor">Search(<span class="params">a</span>, 1, 3, 5)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"2的查找位置："</span> + ind1);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"4的查找位置："</span> + ind2);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"5的查找位置："</span> + ind3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">String<span class="literal">[]</span> strArray = &#123;<span class="string">"aa"</span>, <span class="string">"bc"</span>, <span class="string">"ab"</span>, <span class="string">"cd"</span>&#125;;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>sort(strArray);</span><br><span class="line"><span class="built_in">int</span> ind4 = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>binary<span class="constructor">Search(<span class="params">strArray</span>, <span class="string">"bc"</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"'bc'的查找位置是："</span> + ind4);</span><br></pre></td></tr></table></figure>
<h3 id="Arrays-copyOf"><a href="#Arrays-copyOf" class="headerlink" title="Arrays.copyOf()"></a>Arrays.copyOf()</h3><ul>
<li>复制长度大于原数组长度时，后面补零。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span><span class="literal">[]</span> a = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">int</span><span class="literal">[]</span> newa = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">Of(<span class="params">a</span>, 2)</span>;</span><br><span class="line"><span class="built_in">int</span><span class="literal">[]</span> newa2 = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">Of(<span class="params">a</span>, 7)</span>;	<span class="comment">//复制长度大于原数组的长度</span></span><br><span class="line"></span><br><span class="line">for (<span class="built_in">int</span> item : newa) </span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(item + <span class="string">" "</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">for (<span class="built_in">int</span> item : newa2) </span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(item + <span class="string">" "</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Arrays-copyOfRange"><a href="#Arrays-copyOfRange" class="headerlink" title="Arrays.copyOfRange()"></a>Arrays.copyOfRange()</h3><ul>
<li>复制长度大于原数组长度时，后面补零。</li>
<li>Java中区间一般都是左闭右开[a,b)，即包括左边，不包括右边。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span><span class="literal">[]</span> a = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">int</span><span class="literal">[]</span> newa = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">OfRange(<span class="params">a</span>, 1, 3)</span>;</span><br><span class="line"><span class="built_in">int</span><span class="literal">[]</span> newa2 = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">OfRange(<span class="params">a</span>, 1, 8)</span>;	<span class="comment">//复制长度大于原数组的长度</span></span><br><span class="line"></span><br><span class="line">for (<span class="built_in">int</span> item : newa) </span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(item + <span class="string">" "</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">for (<span class="built_in">int</span> item : newa2) </span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(item + <span class="string">" "</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Arrays-deepEquals"><a href="#Arrays-deepEquals" class="headerlink" title="Arrays.deepEquals()"></a>Arrays.deepEquals()</h3><ul>
<li>比较数组元素是否深层相等。</li>
<li>一维数组无区别，高维数组有区别。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String<span class="literal">[]</span><span class="literal">[]</span> ticTacToe1 = &#123; &#123; <span class="string">" O "</span>, <span class="string">" O "</span>, <span class="string">" X "</span> &#125;, &#123; <span class="string">" O "</span>, <span class="string">" X "</span>, <span class="string">" X "</span> &#125;,&#123; <span class="string">" X "</span>, <span class="string">" O "</span>, <span class="string">" O "</span> &#125; &#125;;</span><br><span class="line">String<span class="literal">[]</span><span class="literal">[]</span> ticTacToe2 = &#123; &#123; <span class="string">" O "</span>, <span class="string">" O "</span>, <span class="string">" X "</span> &#125;, &#123; <span class="string">" O "</span>, <span class="string">" X "</span>, <span class="string">" X "</span> &#125;,&#123; <span class="string">" X "</span>, <span class="string">" O "</span>, <span class="string">" O "</span> &#125; &#125;;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>equals(ticTacToe1, ticTacToe2));<span class="comment">// false</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>deep<span class="constructor">Equals(<span class="params">ticTacToe1</span>, <span class="params">ticTacToe2</span>)</span>);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">String<span class="literal">[]</span> ticTacToe3 = &#123; <span class="string">" O "</span>, <span class="string">" O "</span>, <span class="string">" X "</span> &#125;;</span><br><span class="line">String<span class="literal">[]</span> ticTacToe4 = &#123; <span class="string">" O "</span>, <span class="string">" O "</span>, <span class="string">" X "</span> &#125;;  </span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>equals(ticTacToe3, ticTacToe4));  <span class="comment">// true</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>deep<span class="constructor">Equals(<span class="params">ticTacToe3</span>, <span class="params">ticTacToe4</span>)</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="Arrays-deepHashCode"><a href="#Arrays-deepHashCode" class="headerlink" title="Arrays.deepHashCode()"></a>Arrays.deepHashCode()</h3><ul>
<li>深层相等的两个数组的深层哈希编码也相等。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String<span class="literal">[]</span><span class="literal">[]</span> ticTacToe1 = &#123; &#123; <span class="string">" O "</span>, <span class="string">" O "</span>, <span class="string">" X "</span> &#125;, &#123; <span class="string">" O "</span>, <span class="string">" X "</span>, <span class="string">" X "</span> &#125;,&#123; <span class="string">" X "</span>, <span class="string">" O "</span>, <span class="string">" O "</span> &#125; &#125;;</span><br><span class="line">String<span class="literal">[]</span><span class="literal">[]</span> ticTacToe2 = &#123; &#123; <span class="string">" O "</span>, <span class="string">" O "</span>, <span class="string">" X "</span> &#125;, &#123; <span class="string">" O "</span>, <span class="string">" X "</span>, <span class="string">" X "</span> &#125;,&#123; <span class="string">" X "</span>, <span class="string">" O "</span>, <span class="string">" O "</span> &#125; &#125;;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>equals(ticTacToe1, ticTacToe2));<span class="comment">// false</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>deep<span class="constructor">Equals(<span class="params">ticTacToe1</span>, <span class="params">ticTacToe2</span>)</span>);<span class="comment">// true</span></span><br><span class="line"><span class="comment">// ticTacToe1和ticTacToe1深层相等，深层哈希编码也相等。</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>deep<span class="constructor">HashCode(<span class="params">ticTacToe1</span>)</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>deep<span class="constructor">HashCode(<span class="params">ticTacToe2</span>)</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Arrays-deepToString"><a href="#Arrays-deepToString" class="headerlink" title="Arrays.deepToString()"></a>Arrays.deepToString()</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二维数组有区别</span></span><br><span class="line">String<span class="literal">[]</span><span class="literal">[]</span> ticTacToe1 = &#123; &#123; <span class="string">" O "</span>, <span class="string">" O "</span>, <span class="string">" X "</span> &#125;, &#123; <span class="string">" O "</span>, <span class="string">" X "</span>, <span class="string">" X "</span> &#125;,&#123; <span class="string">" X "</span>, <span class="string">" O "</span>, <span class="string">" O "</span> &#125; &#125;;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>deep<span class="constructor">ToString(<span class="params">ticTacToe1</span>)</span>);	<span class="comment">// 深层变换成字符串</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">ticTacToe1</span>)</span>);		<span class="comment">// 一般</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一维数组无区别</span></span><br><span class="line">String<span class="literal">[]</span> ticTacToe3 = &#123; <span class="string">" O "</span>, <span class="string">" O "</span>, <span class="string">" X "</span> &#125;;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>deep<span class="constructor">ToString(<span class="params">ticTacToe3</span>)</span>);	<span class="comment">// 深层变换成字符串</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">ticTacToe3</span>)</span>);		<span class="comment">// 一般</span></span><br></pre></td></tr></table></figure>
<h3 id="Arrays-equals"><a href="#Arrays-equals" class="headerlink" title="Arrays.equals()"></a>Arrays.equals()</h3><ul>
<li>参考Arrays.deepArrays()</li>
</ul>
<h3 id="Arrays-fill"><a href="#Arrays-fill" class="headerlink" title="Arrays.fill()"></a>Arrays.fill()</h3><ul>
<li>填充数组元素</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">Arrays.fill(a, <span class="number">8</span>);<span class="comment">//全部填充</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> item : a) </span><br><span class="line">	System.<span class="keyword">out</span>.print(item + <span class="string">" "</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println();</span><br><span class="line"></span><br><span class="line">Arrays.fill(a, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>);<span class="comment">//指定范围，替换</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> item : a) </span><br><span class="line">	System.<span class="keyword">out</span>.print(item + <span class="string">" "</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Arrays-hashCode"><a href="#Arrays-hashCode" class="headerlink" title="Arrays.hashCode()"></a>Arrays.hashCode()</h3><ul>
<li>如果两个数组相等，哈希编码也相等。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span><span class="literal">[]</span> a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">int</span><span class="literal">[]</span> b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">String<span class="literal">[]</span> c = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</span><br><span class="line">String<span class="literal">[]</span> d = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"a==b:"</span> + <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>equals(a, b));</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"a和b的哈希码分别为："</span> + <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>hash<span class="constructor">Code(<span class="params">a</span>)</span> + <span class="string">"\t"</span> + <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>hash<span class="constructor">Code(<span class="params">b</span>)</span>);</span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"c==d:"</span> + <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>equals(c, d));</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"c和d的哈希码分别为："</span> + <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>hash<span class="constructor">Code(<span class="params">c</span>)</span> + <span class="string">"\t"</span> + <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>hash<span class="constructor">Code(<span class="params">d</span>)</span>);</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"c==d:"</span> + c.equals(d));</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"c和d的哈希码分别为："</span> + c.hash<span class="constructor">Code()</span> + <span class="string">"\t"</span> + d.hash<span class="constructor">Code()</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Arrays-sort"><a href="#Arrays-sort" class="headerlink" title="Arrays.sort()"></a>Arrays.sort()</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span><span class="literal">[]</span> a = &#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// 指定范围排序</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>sort(a, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">for (<span class="built_in">int</span> item : a) </span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(item + <span class="string">" "</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br><span class="line"><span class="comment">// 全部元素排序</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>sort(a);</span><br><span class="line">for (<span class="built_in">int</span> item : a) </span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(item + <span class="string">" "</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Arrays-toString"><a href="#Arrays-toString" class="headerlink" title="Arrays.toString()"></a>Arrays.toString()</h3><ul>
<li>参考 Arrays.deepToString()</li>
</ul>
<h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><h3 id="遍历一维数组"><a href="#遍历一维数组" class="headerlink" title="遍历一维数组"></a>遍历一维数组</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] a = &#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// 遍历数组 for</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;a.length; i++)</span><br><span class="line">	<span class="keyword">if</span> (i == a.length<span class="number">-1</span>)</span><br><span class="line">		System.<span class="keyword">out</span>.print(a[i]);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		System.<span class="keyword">out</span>.print(a[i] + <span class="string">", "</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组  - foreach</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> item : a)</span><br><span class="line">	<span class="keyword">if</span> (item == a[a.length<span class="number">-1</span>])</span><br><span class="line">		System.<span class="keyword">out</span>.print(item);</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		System.<span class="keyword">out</span>.print(item + <span class="string">", "</span>);</span><br></pre></td></tr></table></figure>
<h3 id="遍历二维数组"><a href="#遍历二维数组" class="headerlink" title="遍历二维数组"></a>遍历二维数组</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[][] a = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line"><span class="comment">// 遍历二维数组 for</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;a.length; i++) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="built_in">int</span> j=<span class="number">0</span>; j&lt;a[i].length; j++)</span><br><span class="line">		<span class="keyword">if</span> (j == a[i].length<span class="number">-1</span>)</span><br><span class="line">			System.<span class="keyword">out</span>.print(a[i][j]);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			System.<span class="keyword">out</span>.print(a[i][j] + <span class="string">", "</span>);</span><br><span class="line">	System.<span class="keyword">out</span>.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组对象的方法"><a href="#数组对象的方法" class="headerlink" title="数组对象的方法"></a>数组对象的方法</h2><ul>
<li>数组从java.lang.Object继承的方法：clone, equals, finalize, getClass, hashCode, notify, toString, wait</li>
</ul>
<h3 id="arr-clone"><a href="#arr-clone" class="headerlink" title="arr.clone()"></a>arr.clone()</h3><ul>
<li>通过克隆生成另一个数组</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">int</span>[] b = a.clone();</span><br><span class="line">Arrays.fill(a, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>); <span class="comment">// 改变a，看是否对b有影响</span></span><br><span class="line"><span class="comment">//打印b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> item : b) </span><br><span class="line">	System.<span class="keyword">out</span>.print(item + <span class="string">" "</span>);</span><br></pre></td></tr></table></figure>
<h3 id="arr-equals"><a href="#arr-equals" class="headerlink" title="arr.equals()"></a>arr.equals()</h3><ul>
<li>arr.equals()和Arrays.equals()不同</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">int</span>[] b = a.clone();</span><br><span class="line"><span class="built_in">int</span>[] c = a;</span><br><span class="line"><span class="comment">// 判等</span></span><br><span class="line">System.<span class="keyword">out</span>.println(Arrays.equals(a, b)); <span class="comment">// 比较内容</span></span><br><span class="line">System.<span class="keyword">out</span>.println(a.equals(b));	<span class="comment">//比较地址</span></span><br><span class="line">System.<span class="keyword">out</span>.println(a.equals(c));</span><br></pre></td></tr></table></figure>
<h3 id="arr-getClass"><a href="#arr-getClass" class="headerlink" title="arr.getClass()"></a>arr.getClass()</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">System.<span class="keyword">out</span>.println(a.getClass());</span><br></pre></td></tr></table></figure>
<h3 id="arr-hashCode"><a href="#arr-hashCode" class="headerlink" title="arr.hashCode()"></a>arr.hashCode()</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span><span class="literal">[]</span> a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种方法的结果不同。</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(a.hash<span class="constructor">Code()</span>); </span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>hash<span class="constructor">Code(<span class="params">a</span>)</span>); <span class="comment">// Arrays.hashCode()</span></span><br></pre></td></tr></table></figure>
<h3 id="arr-toString"><a href="#arr-toString" class="headerlink" title="arr.toString()"></a>arr.toString()</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span><span class="literal">[]</span> a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(a.<span class="keyword">to</span><span class="constructor">String()</span>);	<span class="comment">// 地址</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">a</span>)</span>);	<span class="comment">//字符串</span></span><br></pre></td></tr></table></figure>
<h2 id="数组对象的属性"><a href="#数组对象的属性" class="headerlink" title="数组对象的属性"></a>数组对象的属性</h2><h3 id="arr-length"><a href="#arr-length" class="headerlink" title="arr.length"></a>arr.length</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> len = a.length;</span><br><span class="line">System.<span class="keyword">out</span>.println(len);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>错误-Ubuntu-no talloc stackframe at ../source3/param/loadparm.c:4864, leaking memory</title>
    <url>/eb07.html</url>
    <content><![CDATA[<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><ul>
<li>新安装的操作系统（Ubuntu 14.04），运行命令<code>sudo apt-get udpate</code>时，爆出以下错误。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下是错误信息</span></span><br><span class="line">no talloc stackframe at ../source3/param/loadparm.c:4864, leaking memory</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>该问题使用smb引起的。</li>
<li>运行以下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pam-auth-update</span><br></pre></td></tr></table></figure></li>
<li>弹出对话框，取消“<strong>SMB password synchronization</strong>”的选项即可。（<strong>Tab键</strong>切换，<strong>空格键</strong>取消或选择）</li>
<li>如下图所示：<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160816090434537"></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题-CC150-Java实现</title>
    <url>/a8fc.html</url>
    <content><![CDATA[<hr>
<h1 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h1><h2 id="1-1-字符串互异"><a href="#1-1-字符串互异" class="headerlink" title="1.1 字符串互异"></a>1.1 字符串互异</h2><ul>
<li>确定一个字符串的所有字符是否全都不同。<ul>
<li>方法一：逐字符比较的方法。时间复杂度：$O(n^2)$。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Different</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkDifferent</span><span class="params">(String iniString)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span> (iniString.length()&gt;<span class="number">256</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;iniString.length()-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;iniString.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (iniString.charAt(i) == iniString.charAt(j))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>方法二：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Different</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkDifferent</span><span class="params">(String iniString)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span> (iniString.length()&gt;<span class="number">256</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] char_set = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;iniString.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> val = iniString.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> ((val &lt; <span class="number">0</span>) ||(val &gt; <span class="number">255</span>))	<span class="comment">//检查输入</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (char_set[val])</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            char_set[val] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-原串翻转"><a href="#1-2-原串翻转" class="headerlink" title="1.2 原串翻转"></a>1.2 原串翻转</h2><ul>
<li>翻转一个给定的字符串(可以使用单个过程变量)。<ul>
<li>使用Array实现 </li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reverse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseString</span><span class="params">(String iniString)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">char</span>[] strArray = iniString.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = iniString.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">char</span> tmp = strArray[low];</span><br><span class="line">            strArray[low] = strArray[high];</span><br><span class="line">            strArray[high] = tmp;</span><br><span class="line">            low++;</span><br><span class="line">            high--;</span><br><span class="line">        &#125;</span><br><span class="line">        String tmpString = <span class="keyword">new</span> String(strArray);</span><br><span class="line">        <span class="keyword">return</span> tmpString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用StringBuilder</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reverse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseString</span><span class="params">(String iniString)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(iniString);</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = sb.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">char</span> tmp = sb.charAt(low);</span><br><span class="line">            sb.setCharAt(low, sb.charAt(high));</span><br><span class="line">            sb.setCharAt(high, tmp);</span><br><span class="line">            low++;</span><br><span class="line">            high--;</span><br><span class="line">        &#125;  	</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h2><ul>
<li>确定其中一个字符串的字符重新排列后，能否变成另一个字符串。这里规定大小写为不同字符，且考虑字符串重点空格。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Same</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkSam</span><span class="params">(String stringA, String stringB)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 优化 - 如果两个字符串长度不等，一定不可能</span></span><br><span class="line">        <span class="keyword">if</span> (stringA.length() != stringB.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> sortMy(stringA).equals(sortMy(stringB));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sortMy</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] as = s.toCharArray();</span><br><span class="line">        java.util.Arrays.sort(as);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(as);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-4-空格替换"><a href="#1-4-空格替换" class="headerlink" title="1.4 空格替换"></a>1.4 空格替换</h2><ul>
<li>空格替换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Replacement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String iniString, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iniString.replaceAll(<span class="string">" "</span>, <span class="string">"%20"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-5-基本字符串压缩"><a href="#1-5-基本字符串压缩" class="headerlink" title="1.5 基本字符串压缩"></a>1.5 基本字符串压缩</h2><ul>
<li>基本字符串压缩</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zipper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">zipString</span><span class="params">(String iniString)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        String mystr = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">char</span> last = iniString.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;iniString.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (iniString.charAt(i)==last) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mystr += last + <span class="string">""</span> + count;</span><br><span class="line">                last = iniString.charAt(i);</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mystr += last + <span class="string">""</span> + count;</span><br><span class="line">        <span class="keyword">if</span> (mystr.length() &gt; iniString.length())</span><br><span class="line">            <span class="keyword">return</span> iniString;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mystr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>编码练习——Java-8-输入/输出</title>
    <url>/d486.html</url>
    <content><![CDATA[<h2 id="基础编码"><a href="#基础编码" class="headerlink" title="基础编码"></a>基础编码</h2><ul>
<li>创建和删除文件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		File file = <span class="keyword">new</span> File(<span class="string">"D:/myword"</span>, <span class="string">"test.txt"</span>);</span><br><span class="line">		<span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">			file.delete();</span><br><span class="line">			System.out.println(<span class="string">"文件已删除"</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				file.createNewFile();</span><br><span class="line">				System.out.println(<span class="string">"文件已创建"</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li>获取文件的信息<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		File file = <span class="keyword">new</span> File(<span class="string">"D:/mywork"</span>, <span class="string">"work.txt"</span>);</span><br><span class="line">		<span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">			String name = file.getName();</span><br><span class="line">			<span class="keyword">long</span> length = file.length();</span><br><span class="line">			<span class="keyword">boolean</span> hidden = file.isHidden();</span><br><span class="line">			System.out.println(<span class="string">"文件名称："</span> + name);</span><br><span class="line">			System.out.println(<span class="string">"文件长度："</span> + length);</span><br><span class="line">			System.out.println(<span class="string">"该文件是隐藏文件吗？"</span> + hidden);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"该文件不存在"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>编码练习——Java-7-集合类</title>
    <url>/61ef.html</url>
    <content><![CDATA[<h2 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h2><ul>
<li>List接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String a=<span class="string">"A"</span>, b=<span class="string">"B"</span>, c=<span class="string">"C"</span>, d=<span class="string">"D"</span>, e=<span class="string">"E"</span>;</span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">		list.add(a);</span><br><span class="line">		list.add(e);</span><br><span class="line">		list.add(d);</span><br><span class="line">		Iterator&lt;String&gt; firstIterator = list.iterator();</span><br><span class="line">		System.out.println(<span class="string">"修改前集合中的元素是："</span>);</span><br><span class="line">		<span class="keyword">while</span> (firstIterator.hasNext()) &#123;</span><br><span class="line">			System.out.print(firstIterator.next() + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		list.set(<span class="number">1</span>,b);</span><br><span class="line">		list.set(<span class="number">2</span>,c);</span><br><span class="line">		Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">		System.out.println();</span><br><span class="line">		System.out.println(<span class="string">"修改后集合中的元素是："</span>);</span><br><span class="line">		<span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">			System.out.print(it.next() + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>List索引</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String a=<span class="string">"a"</span>, b=<span class="string">"b"</span>, c=<span class="string">"c"</span>, d=<span class="string">"d"</span>, apple=<span class="string">"apple"</span>;</span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		list.add(a);</span><br><span class="line">		list.add(apple);</span><br><span class="line">		list.add(b);</span><br><span class="line">		list.add(apple);</span><br><span class="line">		list.add(c);</span><br><span class="line">		list.add(apple);</span><br><span class="line">		list.add(d);</span><br><span class="line">		System.out.println(list);</span><br><span class="line">		System.out.println(<span class="string">"apple第一次出现的索引位置是："</span> + list.indexOf(apple));</span><br><span class="line">		System.out.println(<span class="string">"apple最后一次出现的索引位置是："</span> + list.lastIndexOf(apple));</span><br><span class="line">		System.out.println(<span class="string">"b第一次出现的索引位置是："</span> + list.indexOf(b));</span><br><span class="line">		System.out.println(<span class="string">"b最后一次出现的索引位置是："</span> + list.lastIndexOf(b));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Set接口<ul>
<li>利用集合去除重复项</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		list.add(<span class="string">"apple"</span>);</span><br><span class="line">		list.add(<span class="string">"pear"</span>);</span><br><span class="line">		list.add(<span class="string">"banana"</span>);</span><br><span class="line">		list.add(<span class="string">"apple"</span>);</span><br><span class="line">		Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">		set.addAll(list);</span><br><span class="line">		Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">		System.out.println(<span class="string">"集合中的元素是："</span>);</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">			System.out.print(it.next() + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Map接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">		map.put(<span class="string">"1"</span>, <span class="string">"apple"</span>);</span><br><span class="line">		map.put(<span class="string">"2"</span>, <span class="string">"pear"</span>);</span><br><span class="line">		map.put(<span class="string">"3"</span>, <span class="string">"orange"</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=map.size(); i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">"第"</span>+i+<span class="string">"元素是："</span>+map.get(<span class="string">""</span>+i+<span class="string">""</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>List接口的实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		<span class="keyword">int</span> i = (<span class="keyword">int</span>) (Math.random()*(list.size()-<span class="number">1</span>));</span><br><span class="line">		list.add(<span class="string">"a"</span>);</span><br><span class="line">		list.add(<span class="string">"b"</span>);</span><br><span class="line">		list.add(<span class="string">"c"</span>);</span><br><span class="line">		System.out.println(<span class="string">"随机获取数组中的元素："</span> + list.get(i));</span><br><span class="line">		list.remove(<span class="number">2</span>);</span><br><span class="line">		System.out.println(<span class="string">"将索引是‘2’的元素从数组移除后，数组中的元素是："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;list.size(); j++) &#123;</span><br><span class="line">			System.out.print(list.get(j) + <span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Set接口的实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Set&lt;People&gt; hashSet = <span class="keyword">new</span> HashSet&lt;People&gt;();</span><br><span class="line">		hashSet.add(<span class="keyword">new</span> People(<span class="string">"陈同学"</span>, <span class="number">201101</span>));</span><br><span class="line">		hashSet.add(<span class="keyword">new</span> People(<span class="string">"王同学"</span>, <span class="number">201102</span>));</span><br><span class="line">		hashSet.add(<span class="keyword">new</span> People(<span class="string">"李同学"</span>, <span class="number">201103</span>));</span><br><span class="line">		Iterator&lt;People&gt; it = hashSet.iterator();</span><br><span class="line">		System.out.println(<span class="string">"集合中的元素是："</span>);</span><br><span class="line">		<span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">			People person = it.next();</span><br><span class="line">			System.out.println(person.getName() + <span class="string">"  "</span> + person.getId_card());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">long</span> id_card;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name, <span class="keyword">long</span> id_card)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.id_card = id_card;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId_card</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id_card;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId_card</span><span class="params">(<span class="keyword">long</span> id_card)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id_card = id_card;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 使用for循环遍历ArrayList</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">			list.add(i);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"列表中的元素："</span> + list);</span><br><span class="line">		System.out.println(<span class="string">"列表中的奇数序号元素："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;list.size(); i +=<span class="number">2</span>) &#123;</span><br><span class="line">			System.out.print(list.get(i) + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>迭代器的创建和使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ArrayList&lt;Integer&gt; array = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		<span class="comment">//使用Collections类中的工具方法addAll()向集合增加元素</span></span><br><span class="line">		Collections.addAll(array, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">		System.out.println(<span class="string">"集合中的元素："</span> + array);</span><br><span class="line">		<span class="comment">//使用无参数的方法获得ListIterator对象</span></span><br><span class="line">		ListIterator&lt;Integer&gt; iterator = array.listIterator();</span><br><span class="line">		<span class="comment">//对于初始位置，判断是否具有下一个元素</span></span><br><span class="line">		<span class="keyword">boolean</span> hasNext = iterator.hasNext();</span><br><span class="line">		System.out.println(<span class="string">"集合是否具有下一个元素："</span> + hasNext);</span><br><span class="line">		<span class="comment">//对于初始位置，判断是否具有前一个元素</span></span><br><span class="line">		<span class="keyword">boolean</span> hasPrevious = iterator.hasPrevious();</span><br><span class="line">		System.out.println(<span class="string">"集合是否具有前一个元素："</span> + hasPrevious);</span><br><span class="line">		<span class="keyword">int</span> next = iterator.next();</span><br><span class="line">		System.out.println(<span class="string">"获得集合的下一个元素："</span> + next);</span><br><span class="line">		<span class="keyword">int</span> nextIndex = iterator.nextIndex();</span><br><span class="line">		System.out.println(<span class="string">"获得集合的下一个元素的索引："</span> + nextIndex);</span><br><span class="line">		<span class="keyword">int</span> previous = iterator.previous();</span><br><span class="line">		System.out.println(<span class="string">"获得集合的前一个元素："</span> + previous);</span><br><span class="line">		<span class="keyword">int</span> previousIndex = iterator.previousIndex();</span><br><span class="line">		System.out.println(<span class="string">"获得集合的前一个元素的索引："</span> + previousIndex);</span><br><span class="line">		iterator.add(<span class="number">7</span>);</span><br><span class="line">		System.out.println(<span class="string">"向集合中增加元素7后的集合："</span> + array);</span><br><span class="line">		iterator.next();</span><br><span class="line">		iterator.set(<span class="number">12</span>);</span><br><span class="line">		System.out.println(<span class="string">"将获得的下一个元素修改成12后的集合："</span> + array);</span><br><span class="line">		iterator.remove();</span><br><span class="line">		System.out.println(<span class="string">"将获得的下一个元素删除后的集合："</span> + array);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - Iterator遍历ArrayList</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">			list.add(i);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"列表中的全部元素："</span>);</span><br><span class="line">		<span class="keyword">for</span> (Iterator&lt;Integer&gt; it = list.iterator(); it.hasNext();) &#123;</span><br><span class="line">			System.out.print(it.next() + <span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - ListIterator遍历ArrayList</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">			list.add(i);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"列表中的全部元素是："</span> + list);</span><br><span class="line">		System.out.println(<span class="string">"逆序输出列表中的元素："</span> );</span><br><span class="line">		ListIterator&lt;Integer&gt; li = list.listIterator();</span><br><span class="line">		<span class="keyword">for</span> (li=list.listIterator(); li.hasNext();) </span><br><span class="line">			li.next();</span><br><span class="line">		<span class="keyword">for</span> (; li.hasPrevious(); ) </span><br><span class="line">			System.out.print(li.previous() + <span class="string">" "</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>编码练习——Java-6-类的高级特性</title>
    <url>/8297.html</url>
    <content><![CDATA[<h2 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h2><ul>
<li>定义抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String color;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		color = <span class="string">"绿色"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>定义抽象方法<ul>
<li>抽象类：Fruit</li>
<li>抽象方法：harvest()</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"调用Apple类的harvest()方法的结果是："</span>);</span><br><span class="line">		Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line">		apple.harvest();</span><br><span class="line">		System.out.println(<span class="string">"嗲用Orange类的harvest()方法的结果是："</span>);</span><br><span class="line">		Orange orange = <span class="keyword">new</span> Orange();</span><br><span class="line">		orange.harvest();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String color;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		color = <span class="string">"绿色"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">harvest</span><span class="params">()</span></span>;	<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">harvest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"苹果已经收获！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>成员内部类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">	innerClass in = <span class="keyword">new</span> innerClass();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ouf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		in.inf();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">innerClass</span> </span>&#123;</span><br><span class="line">		innerClass() &#123;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> y =  <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> innerClass <span class="title">doit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		in.y = <span class="number">4</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> innerClass();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		OuterClass out = <span class="keyword">new</span> OuterClass();</span><br><span class="line">		<span class="comment">//内部类的对象实例化操作必须在外部类或外部类中的非静态方法中实现</span></span><br><span class="line">		OuterClass.innerClass in = out.doit();</span><br><span class="line">		OuterClass.innerClass in2 = out.<span class="keyword">new</span> innerClass(); <span class="comment">//实例化内部类对象</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>获取内部类和外部类的引用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">int</span> x=<span class="number">9</span>;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">			x++;	<span class="comment">//调用形参x</span></span><br><span class="line">			<span class="keyword">this</span>.x++;	<span class="comment">//调用内部类的变量</span></span><br><span class="line">			OuterClass.<span class="keyword">this</span>.x++;	<span class="comment">//调用外部类的变量x</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>局部内部类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellOutClass</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SellOutClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		name = <span class="string">"苹果"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span>&#123;</span><br><span class="line">			<span class="keyword">int</span> innerPrice=<span class="number">0</span>;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">				innerPrice = price;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"现在开始销售"</span> + name);</span><br><span class="line">				System.out.println(<span class="string">"单价为："</span> + innerPrice + <span class="string">"元"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Apple apple = <span class="keyword">new</span> Apple(price);</span><br><span class="line">		apple.price();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SellOutClass sample = <span class="keyword">new</span> SellOutClass();</span><br><span class="line">		sample.sell(<span class="number">100</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>匿名内部类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutString</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> String sourceStr = <span class="string">"吉林省 明日 科技有限公司 —— 编程 词典！"</span>;</span><br><span class="line">		IStringDeal s = <span class="keyword">new</span> IStringDeal() &#123;	<span class="comment">//匿名内部类</span></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">filterBlankChar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				String convertStr = sourceStr;</span><br><span class="line">				convertStr = convertStr.replaceAll(<span class="string">" "</span>, <span class="string">""</span>);</span><br><span class="line">				<span class="keyword">return</span> convertStr;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		System.out.println(<span class="string">"源字符串："</span> + sourceStr);</span><br><span class="line">		System.out.println(<span class="string">"转换后的字符串："</span> + s.filterBlankChar());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IStringDeal</span> </span>&#123; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">filterBlankChar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>静态内部类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClass</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doitInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"外部类的成员变量"</span>+x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">			doitInner();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>内部类的继承</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputInnerClass</span> <span class="keyword">extends</span> <span class="title">ClassA</span>.<span class="title">ClassB</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">OutputInnerClass</span><span class="params">(ClassA a)</span> </span>&#123;</span><br><span class="line">		a.<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 静态内部类求极值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span>[] array = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">5</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.length; i++) &#123;</span><br><span class="line">			array[i] = <span class="number">100</span>*Math.random();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"源数组："</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.length; i++) &#123;</span><br><span class="line">			System.out.print(array[i] + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		System.out.println(<span class="string">"最大值："</span> + MaxMin.getResult(array).getMax());</span><br><span class="line">		System.out.println(<span class="string">"最小值："</span> + MaxMin.getResult(array).getMin());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxMin</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">double</span> max;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">double</span> min;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(<span class="keyword">double</span> max, <span class="keyword">double</span> min)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.max = max;</span><br><span class="line">			<span class="keyword">this</span>.min = min;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> max;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> min;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">getResult</span><span class="params">(<span class="keyword">double</span>[] array)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> max = Double.MIN_VALUE;</span><br><span class="line">		<span class="keyword">double</span> min = Double.MAX_VALUE;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">double</span> i : array) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i&gt;max)</span><br><span class="line">				max = i;</span><br><span class="line">			<span class="keyword">if</span> (i&lt;min)</span><br><span class="line">				min = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Result(max, min);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>编码练习——Java-5-类和对象</title>
    <url>/f0b0.html</url>
    <content><![CDATA[<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><ul>
<li>构造方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnyThing</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AnyThing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(<span class="string">"this调用有参构造方法"</span>);</span><br><span class="line">		System.out.println(<span class="string">"无参构造函数"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AnyThing</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"有参构造方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>主方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;args.length; i++) &#123;</span><br><span class="line">			System.out.println(args[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>成员变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String category;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">		setName(<span class="string">"Java"</span>);</span><br><span class="line">		<span class="keyword">return</span> id + <span class="keyword">this</span>.name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">getBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argvs[])</span> </span>&#123;</span><br><span class="line">		Book book = <span class="keyword">new</span> Book();</span><br><span class="line">		String name = book.getName();</span><br><span class="line">		System.out.println(name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>静态变量、常量和方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">double</span> PI=<span class="number">3.1415</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"静态方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(Test.PI);</span><br><span class="line">		System.out.println(Test.id);</span><br><span class="line">		Test.method1();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Test test = <span class="keyword">new</span> Test();</span><br><span class="line">		test.method2();</span><br><span class="line">		Test.method1();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>权限修饰符<ul>
<li>public</li>
<li>protected</li>
<li>private</li>
</ul>
</li>
</ul>
<ul>
<li>实例 - 自定义图书类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String title;</span><br><span class="line">	<span class="keyword">private</span> String author;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, String author, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.title = title;</span><br><span class="line">		<span class="keyword">this</span>.author = author;</span><br><span class="line">		<span class="keyword">this</span>.price = price;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> title;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> author;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> price;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Book book = <span class="keyword">new</span> Book(<span class="string">"《Java从入门到精通》"</span>, <span class="string">"明日科技"</span>, <span class="number">59.8</span>);</span><br><span class="line">		System.out.println(<span class="string">"书名："</span> + book.getTitle());</span><br><span class="line">		System.out.println(<span class="string">"作者："</span> + book.getAuthor());</span><br><span class="line">		System.out.println(<span class="string">"价格："</span> + book.getPrice() + <span class="string">"元"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 温度单位换算工具</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CelsiusConverter</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getFahrenheit</span><span class="params">(<span class="keyword">double</span> celsius)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> fahrenheit = <span class="number">1.8</span> * celsius + <span class="number">32</span>;</span><br><span class="line">		<span class="keyword">return</span> fahrenheit;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"请输入要转换的温度（单位：摄氏度）"</span>);</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">double</span> celsius = in.nextDouble();</span><br><span class="line">		CelsiusConverter converter = <span class="keyword">new</span> CelsiusConverter();</span><br><span class="line">		<span class="keyword">double</span> fahrenheit = converter.getFahrenheit(celsius);</span><br><span class="line">		System.out.println(<span class="string">"转换完成的温度（单位：华氏度）："</span> + fahrenheit);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;	<span class="comment">//构造方法</span></span><br><span class="line">		System.out.println(<span class="string">"创建对象..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Test();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>调用类成员（变量和函数）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferProperty</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">47</span>;	<span class="comment">// 成员变量</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;	<span class="comment">//成员方法</span></span><br><span class="line">		System.out.println(<span class="string">"调用call()方法"</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">			System.out.print(i + <span class="string">"  "</span>);</span><br><span class="line">			<span class="keyword">if</span> (i==<span class="number">2</span>)</span><br><span class="line">				System.out.println(<span class="string">"\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;	<span class="comment">//构造方法</span></span><br><span class="line">		TransferProperty t1 = <span class="keyword">new</span> TransferProperty();</span><br><span class="line">		TransferProperty t2 = <span class="keyword">new</span> TransferProperty();</span><br><span class="line">		t2.i=<span class="number">60</span>;</span><br><span class="line">		<span class="comment">//使用第一个对象调用类成员变量</span></span><br><span class="line">		System.out.println(<span class="string">"第一个实例对象调用变量i的结果："</span> + t1.i++);</span><br><span class="line">		t1.call();</span><br><span class="line">		<span class="comment">//使用第二个对象调用类成员变量</span></span><br><span class="line">		System.out.println(<span class="string">"第二个实例对象调用变量i的结果："</span> + t2.i);</span><br><span class="line">		t2.call();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对象的比较</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String c1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">		String c2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">		String c3 = c1;</span><br><span class="line">		System.out.println(<span class="string">"c2==c3的运算结果："</span> + (c2==c3));</span><br><span class="line">		System.out.println(<span class="string">"c2.equals(c3)的运算结果："</span> + (c2.equals(c3)));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 统计图书销量（静态变量）<br>Book类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> counter=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"售出图书："</span> + title);</span><br><span class="line">		counter++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCounter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> counter;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类（Test）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String[] titles = &#123;<span class="string">"《Java从入门到精通》"</span>, <span class="string">"《Java编程词典》"</span>, <span class="string">"&lt;视频学Java&gt;"</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">new</span> Book(titles[<span class="keyword">new</span> Random().nextInt(<span class="number">3</span>)]);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"总计销售了"</span> + Book.getCounter() + <span class="string">"本图书！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 重新计算对象的哈希码<br>Cat类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> weight;</span><br><span class="line">	<span class="keyword">private</span> Color color;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> weight, Color color)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		<span class="keyword">this</span>.weight = weight;</span><br><span class="line">		<span class="keyword">this</span>.color=  color;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (getClass() != obj.getClass()) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Cat cat = (Cat) obj;</span><br><span class="line">		<span class="keyword">return</span> name.equals(cat.name) &amp;&amp; (age == cat.age) </span><br><span class="line">				&amp;&amp; (weight == cat.weight) &amp;&amp; (color.equals(cat.color));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">7</span>*name.hashCode() + <span class="number">11</span>* <span class="keyword">new</span> Integer(age).hashCode() + <span class="number">13</span>* <span class="keyword">new</span> Double(weight).hashCode() + <span class="number">17</span>* color.hashCode();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类（Test）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Cat cat1 = <span class="keyword">new</span> Cat(<span class="string">"Java"</span>, <span class="number">12</span>, <span class="number">21</span>, Color.BLACK);</span><br><span class="line">		Cat cat2 = <span class="keyword">new</span> Cat(<span class="string">"C++"</span>, <span class="number">12</span>, <span class="number">21</span>, Color.WHITE);</span><br><span class="line">		Cat cat3 = <span class="keyword">new</span> Cat(<span class="string">"Java"</span>, <span class="number">12</span>,<span class="number">21</span>,Color.BLACK);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"猫咪1号的哈希码："</span> + cat1.hashCode());</span><br><span class="line">		System.out.println(<span class="string">"猫咪2号的哈希码："</span> + cat2.hashCode());</span><br><span class="line">		System.out.println(<span class="string">"猫咪3号的哈希码："</span> + cat3.hashCode());</span><br><span class="line">		System.out.println(<span class="string">"猫咪1号是否与猫咪2号相同："</span> + cat1.equals(cat2));</span><br><span class="line">		System.out.println(<span class="string">"猫咪1号是否与猫咪3号相同："</span> + cat1.equals(cat3));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 汉诺塔问题求解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">moveDish</span><span class="params">(<span class="keyword">int</span> level, <span class="keyword">char</span> from, <span class="keyword">char</span> inter, <span class="keyword">char</span> to)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (level == <span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"从 "</span> + from + <span class="string">" 移动盘子 1 号到 "</span> + to);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			moveDish(level-<span class="number">1</span>, from, to, inter);</span><br><span class="line">			System.out.println(<span class="string">"从 "</span> + from + <span class="string">" 移动盘子 "</span> + level + <span class="string">" 号到 "</span> + to);</span><br><span class="line">			moveDish(level-<span class="number">1</span>, inter, from, to);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> nDisks = <span class="number">3</span>;</span><br><span class="line">		moveDish(nDisks, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 单例模式的应用<br>Emperor类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emperor</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Emperor emperor=<span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Emperor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Emperor <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(emperor==<span class="keyword">null</span>) &#123;</span><br><span class="line">			emperor = <span class="keyword">new</span> Emperor();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> emperor;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我是皇帝：明日科技"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类（Test）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"创建皇帝1对象："</span>);</span><br><span class="line">		Emperor emperor1 = Emperor.getInstance();</span><br><span class="line">		emperor1.getName();</span><br><span class="line">		System.out.println(<span class="string">"创建皇帝2对象："</span>);</span><br><span class="line">		Emperor emperor2 = Emperor.getInstance();</span><br><span class="line">		emperor2.getName();</span><br><span class="line">		System.out.println(<span class="string">"创建皇帝3对象："</span>);</span><br><span class="line">		Emperor emperor3 = Emperor.getInstance();</span><br><span class="line">		emperor3.getName();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>编码练习——Java-5-接口、继承与多态</title>
    <url>/4938.html</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li>定义接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICalculate</span> </span>&#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">float</span> PI=<span class="number">3.14159f</span>;</span><br><span class="line">	<span class="function"><span class="keyword">float</span> <span class="title">getArea</span><span class="params">(<span class="keyword">float</span> r)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">float</span> <span class="title">getCircumference</span><span class="params">(<span class="keyword">float</span> r)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实现接口<ul>
<li>注意：要实现接口的所有方法（抽象）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cire</span> <span class="keyword">implements</span> <span class="title">ICalculate</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 计算圆面积</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getArea</span><span class="params">(<span class="keyword">float</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">float</span> area = PI*r*r;</span><br><span class="line">		<span class="keyword">return</span> area;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 计算圆周长</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getCircumference</span><span class="params">(<span class="keyword">float</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">float</span> circumference = <span class="number">2</span>*PI*r;</span><br><span class="line">		<span class="keyword">return</span> circumference;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>实例 - 图片的不同格式保存<br>定义接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageSaver</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现接口<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GIFSaver</span> <span class="keyword">implements</span> <span class="title">ImageSaver</span> </span>&#123;</span><br><span class="line">	<span class="comment">//重写 - 多态</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"将图片保存成GIF格式"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>实例 - 为汽车增加GPS定位功能<br>父类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> speed;</span><br><span class="line">	<span class="comment">//省略getXX()和setXX()</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> speed;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		sb.append(<span class="string">"车名："</span> + name + <span class="string">"，"</span>);</span><br><span class="line">		sb.append(<span class="string">"速度："</span> + speed + <span class="string">"千米/小时"</span>);</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Point;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GPS</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Point <span class="title">getLocation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Point;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GPSCar</span> <span class="keyword">extends</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">GPS</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Point <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Point point = <span class="keyword">new</span> Point();</span><br><span class="line">		point.setLocation(<span class="keyword">super</span>.getSpeed(), <span class="keyword">super</span>.getSpeed());</span><br><span class="line">		<span class="keyword">return</span> point;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		sb.append(<span class="keyword">super</span>.toString());</span><br><span class="line">		sb.append(<span class="string">"，坐标：（"</span> + getLocation().x + <span class="string">","</span> + getLocation().y + <span class="string">"）"</span>);</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Point;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		GPSCar gcar = <span class="keyword">new</span> GPSCar();</span><br><span class="line">		Point point = gcar.getLocation();</span><br><span class="line">		System.out.println(<span class="string">"坐标：（"</span> + point.x + <span class="string">","</span> + point.y + <span class="string">"）"</span>);</span><br><span class="line">		String info = gcar.toString();</span><br><span class="line">		System.out.println(info);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>继承</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Pigeon pigeon = <span class="keyword">new</span> Pigeon();</span><br><span class="line">		System.out.println(pigeon.color);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">	String color = <span class="string">"白色"</span>;</span><br><span class="line">	String skin = <span class="string">"羽毛"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类 - 继承（属性和方法）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pigeon</span> <span class="keyword">extends</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>继承-重写</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">		System.out.println(<span class="string">"执行dog.cry();语句时的输出结果："</span>);</span><br><span class="line">		dog.cry();</span><br><span class="line">		Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">		System.out.println(<span class="string">"执行cat.cry();语句时的输出结果："</span>);</span><br><span class="line">		cat.cry();</span><br><span class="line">		Sheep sheep = <span class="keyword">new</span> Sheep();</span><br><span class="line">		System.out.println(<span class="string">"执行cat.cry();语句时的输出结果："</span>);</span><br><span class="line">		sheep.cry();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"动物发出叫声！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"狗发出“汪汪...”声！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"猫发出“喵喵...”声！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>调用父类的构造函数、成员变量和成员方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Tiger tiger = <span class="keyword">new</span> Tiger();</span><br><span class="line">		System.out.println(<span class="string">"Tiger的皮肤："</span> + tiger.skin);</span><br><span class="line">		tiger.test();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Beast</span> </span>&#123;</span><br><span class="line">	String skin = <span class="string">""</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Beast</span><span class="params">()</span> </span>&#123;	<span class="comment">//无参构造函数</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Beast</span><span class="params">(String strSkin)</span> </span>&#123;</span><br><span class="line">		skin = strSkin;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"跑"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类 - 继承（属性和方法）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tiger</span> <span class="keyword">extends</span> <span class="title">Beast</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Tiger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(<span class="string">"条纹"</span>);	<span class="comment">//使用父类带参数的构造方法</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"父类的肤色："</span> + <span class="keyword">super</span>.skin);</span><br><span class="line">		System.out.println(<span class="string">"父类的动作跑："</span>);</span><br><span class="line">		<span class="keyword">super</span>.move();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 经理（子类）和员工（父类）的差异</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">		employee.setName(<span class="string">"Java"</span>);</span><br><span class="line">		employee.setSalary(<span class="number">100</span>);</span><br><span class="line">		employee.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">		Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">		manager.setName(<span class="string">"明日科技"</span>);</span><br><span class="line">		manager.setSalary(<span class="number">3000</span>);</span><br><span class="line">		manager.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">		manager.setBonus(<span class="number">2000</span>);</span><br><span class="line">		<span class="comment">//输出经理和员工的属性值</span></span><br><span class="line">		System.out.println(<span class="string">"员工的姓名："</span> + employee.getName());</span><br><span class="line">		System.out.println(<span class="string">"员工的工资："</span> + employee.getSalary());</span><br><span class="line">		System.out.println(<span class="string">"员工的生日："</span> + employee.getBirthday());</span><br><span class="line">		System.out.println(<span class="string">"经理的姓名："</span> + manager.getName());</span><br><span class="line">		System.out.println(<span class="string">"经理的工资："</span> + manager.getSalary());</span><br><span class="line">		System.out.println(<span class="string">"经理的生日："</span> + manager.getBirthday());</span><br><span class="line">		System.out.println(<span class="string">"经理的奖金："</span> + manager.getBonus());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">	<span class="keyword">private</span> Date birthday;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> salary;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.salary = salary;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类 - 继承（属性和方法）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> bonus;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBonus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> bonus;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBonus</span><span class="params">(<span class="keyword">double</span> bonus)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 重写父类中的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">		System.out.println(employee.getInfo());</span><br><span class="line">		Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">		System.out.println(manager.getInfo());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"父类：我是明日科技的员工！"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类 - 重写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"子类：我是明日科技的经理！"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>多态</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">float</span> PI=<span class="number">3.14159f</span>;</span><br><span class="line">	<span class="comment">// 求圆形的面积</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getArea</span><span class="params">(<span class="keyword">float</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">float</span> area = PI*r*r;</span><br><span class="line">		<span class="keyword">return</span> area;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 求矩形的面积</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getArea</span><span class="params">(<span class="keyword">float</span> l, <span class="keyword">float</span> w)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">float</span> area = l*w;</span><br><span class="line">		<span class="keyword">return</span> area;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 画任意形状的图形</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"画"</span> + num + <span class="string">"个任意形状的图形"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 画指定形状的图形</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(String shape)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"画一个"</span> + shape);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Test test = <span class="keyword">new</span> Test();</span><br><span class="line">		<span class="keyword">float</span> l=<span class="number">20</span>;</span><br><span class="line">		<span class="keyword">float</span> w=<span class="number">30</span>;</span><br><span class="line">		<span class="keyword">float</span> areaRectangle = test.getArea(l, w);</span><br><span class="line">		System.out.println(<span class="string">"求长为"</span>+l+<span class="string">" 宽为"</span>+w+<span class="string">"的矩形的面积是："</span> + areaRectangle);</span><br><span class="line">		<span class="keyword">float</span> r = <span class="number">7</span>;</span><br><span class="line">		<span class="keyword">float</span> areaCirc = test.getArea(r);</span><br><span class="line">		System.out.println(<span class="string">"求半径为"</span>+r+<span class="string">"的圆的面积是："</span>+areaCirc);</span><br><span class="line">		<span class="keyword">int</span> num=<span class="number">7</span>;</span><br><span class="line">		test.draw(num);</span><br><span class="line">		test.draw(<span class="string">"三角形"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 计算几何图形的面积</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Circle circle = <span class="keyword">new</span> Circle(<span class="number">1</span>);</span><br><span class="line">		System.out.println(<span class="string">"图形的名称是："</span> + circle.getName());</span><br><span class="line">		System.out.println(<span class="string">"图形的面积是："</span> + circle.getArea());</span><br><span class="line">		</span><br><span class="line">		Rectangle rectangle = <span class="keyword">new</span> Rectangle(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">		System.out.println(<span class="string">"图形的名称是："</span> + rectangle.getName());</span><br><span class="line">		System.out.println(<span class="string">"图形的面积是："</span> + rectangle.getArea());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.getClass().getSimpleName();	<span class="comment">//获得图形的名称</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;	<span class="comment">//获得图形的面积</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.radius = radius;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Math.PI*Math.pow(radius, <span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> length;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">double</span> length, <span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.length = length;</span><br><span class="line">		<span class="keyword">this</span>.width = width;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> length * width;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 简单的汽车销售商场</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"顾客要购买BMW："</span>);</span><br><span class="line">		Car bmw = CarFactory.getCar(<span class="string">"BMW"</span>);</span><br><span class="line">		System.out.println(<span class="string">"提取汽车："</span> + bmw.getInfo());</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"顾客要购买Benz："</span>);</span><br><span class="line">		Car benz = CarFactory.getCar(<span class="string">"Benz"</span>);</span><br><span class="line">		System.out.println(<span class="string">"提取汽车："</span> + benz.getInfo());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMW</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"BMW"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Benz"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (name.equalsIgnoreCase(<span class="string">"BMW"</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> BMW();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equalsIgnoreCase(<span class="string">"Benz"</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 使用Comparable接口自定义排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age)</span> </span>&#123;	<span class="comment">// 构造函数</span></span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Employee o)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (id &gt; o.id) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (id &lt; o.id) &#123;</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		sb.append(<span class="string">"员工的编号："</span> + id + <span class="string">"，"</span>);</span><br><span class="line">		sb.append(<span class="string">"员工的姓名："</span> + name + <span class="string">"，"</span>);</span><br><span class="line">		sb.append(<span class="string">"员工的年龄："</span> + age);</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Employee employee1 = <span class="keyword">new</span> Employee(<span class="number">1000</span>,<span class="string">"学志"</span>, <span class="number">27</span>);</span><br><span class="line">		Employee employee2 = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">"珊妮"</span>, <span class="number">27</span>);</span><br><span class="line">		System.out.println(<span class="string">"比较结果："</span> + employee1.compareTo(employee2));</span><br><span class="line">		System.out.println(<span class="string">"员工信息："</span> + employee1.toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>编码练习——Java-4-字符串</title>
    <url>/8359.html</url>
    <content><![CDATA[<h2 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h2><ul>
<li>创建字符串对象-1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="keyword">new</span> String(); <span class="comment">//创建字符串</span></span><br><span class="line">		System.out.println(s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建字符串对象-2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">char</span> a[] = &#123;<span class="string">'g'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'d'</span>&#125;;</span><br><span class="line">		String s = <span class="keyword">new</span> String(a); <span class="comment">// 创建字符串</span></span><br><span class="line">		System.out.println(a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>创建字符串对象-3</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">char</span>[] a = &#123;<span class="string">'s'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'n'</span>,<span class="string">'t'</span>&#125;;</span><br><span class="line">		String s = <span class="keyword">new</span> String(a, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">		System.out.println(s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><ul>
<li>字符串操作-拼接（+）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s1 = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br><span class="line">		String s2 = <span class="keyword">new</span> String(<span class="string">"world"</span>);</span><br><span class="line">		String s = s1 + <span class="string">" "</span> + s2;</span><br><span class="line">		System.out.println(s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串操作-拼接（+）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> booktime = <span class="number">4</span>;</span><br><span class="line">		<span class="keyword">float</span> practice = <span class="number">2.5f</span>;</span><br><span class="line">		System.out.println(<span class="string">"我每天花费"</span> + booktime + <span class="string">"小时看书；"</span> + practice + <span class="string">"小时上机练习"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串操作-获取字符串长度</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">"We are students"</span>;</span><br><span class="line">		System.out.println(<span class="string">"字符串的长度是："</span> + s.length());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串操作 - 获取指定字符的索引位置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">"We are students"</span>;</span><br><span class="line">		System.out.println(<span class="string">"字符s在字符串s中的位置是："</span> + s.indexOf(<span class="string">"s"</span>));</span><br><span class="line">		System.out.println(<span class="string">"字符st在字符串s中的位置是："</span> + s.indexOf(<span class="string">"st"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">"We are students"</span>;</span><br><span class="line">		System.out.print(<span class="string">"字符s在字符串s中的最后位置是："</span>);</span><br><span class="line">		System.out.println(s.lastIndexOf(<span class="string">"s"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串操作-获取指定索引位置的字符</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">"hello world"</span>;</span><br><span class="line">		<span class="keyword">char</span> mychar2 = s.charAt(<span class="number">6</span>);</span><br><span class="line">		System.out.println(<span class="string">"字符串s中索引位置是6的字符位："</span> + mychar2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串操作-去除前导和尾部空格</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s1 = <span class="string">"   Java class    "</span>;</span><br><span class="line">		String s2 = s1.trim();</span><br><span class="line">		System.out.println(<span class="string">"字符串原来的长度："</span> + s1.length());</span><br><span class="line">		System.out.println(<span class="string">"去除空格后的长度："</span> + s2.length());</span><br><span class="line">		System.out.println(<span class="string">"去除空格后的字符串是："</span> + s2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串操作-去除字符串中的所有空格</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String text = <span class="string">"  We are student  "</span>;</span><br><span class="line">		System.out.println(<span class="string">"原来字符串是："</span>);</span><br><span class="line">		System.out.println(text);</span><br><span class="line">		StringTokenizer st = <span class="keyword">new</span> StringTokenizer(text, <span class="string">" "</span>);</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (st.hasMoreElements()) &#123;</span><br><span class="line">			i++;</span><br><span class="line">			sb.append(st.nextToken());</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"去掉字符串中所有空格之后的字符串是："</span>);</span><br><span class="line">		System.out.println(sb.toString());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">"J a v a 编 程 词  典  "</span>;</span><br><span class="line">		s = s.replaceAll(<span class="string">" "</span>, <span class="string">""</span>);</span><br><span class="line">		System.out.println(<span class="string">"去掉空格后的字符串为："</span> + s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串操作-字符串替换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">"bad bad study"</span>;</span><br><span class="line">		String news = s.replace(<span class="string">"bad"</span>, <span class="string">"good"</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"替换后的字符串是："</span> + news);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">"bad bad study"</span>;</span><br><span class="line">		s = s.replaceFirst(<span class="string">"bad"</span>, <span class="string">"good"</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"替换后的字符串是："</span> + s);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串操作-判断字符串是否相等</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s1 = <span class="keyword">new</span> String(<span class="string">"I am a student"</span>);</span><br><span class="line">		String s2 = <span class="keyword">new</span> String(<span class="string">"I am a student"</span>);</span><br><span class="line">		String s3 = <span class="keyword">new</span> String(<span class="string">"I AM A STUDENT"</span>);</span><br><span class="line">		String s4 = s1;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">boolean</span> b1 = (s1 == s2);</span><br><span class="line">		<span class="keyword">boolean</span> b2 = (s1 == s4);</span><br><span class="line">		<span class="keyword">boolean</span> b3 = s1.equals(s2);</span><br><span class="line">		<span class="keyword">boolean</span> b4 = s1.equals(s3);</span><br><span class="line">		<span class="keyword">boolean</span> b5 = s1.equalsIgnoreCase(s2);</span><br><span class="line">		<span class="keyword">boolean</span> b6 = s1.equalsIgnoreCase(s3);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"s1 == s2："</span> + b1);</span><br><span class="line">		System.out.println(<span class="string">"s1 == s4:"</span> + b2);</span><br><span class="line">		System.out.println(<span class="string">"s1 equals s2："</span> + b3);</span><br><span class="line">		System.out.println(<span class="string">"s1 equals s3："</span> + b4);</span><br><span class="line">		System.out.println(<span class="string">"s1 equalsIgnoreCase s2："</span> + b5);</span><br><span class="line">		System.out.println(<span class="string">"s1 equalsIgnoreCase s3："</span> + b6);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串操作-判断字符串的开始与结尾</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String num1 = <span class="string">"22045612"</span>;</span><br><span class="line">		String num2 = <span class="string">"21304578"</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">boolean</span> b1 = num1.startsWith(<span class="string">"22"</span>);</span><br><span class="line">		<span class="keyword">boolean</span> b2 = num1.endsWith(<span class="string">"78"</span>);</span><br><span class="line">		<span class="keyword">boolean</span> b3 = num2.startsWith(<span class="string">"22"</span>);</span><br><span class="line">		<span class="keyword">boolean</span> b4 = num2.endsWith(<span class="string">"78"</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"字符串num1是以'22'开始的吗？"</span> + b1);</span><br><span class="line">		System.out.println(<span class="string">"字符串num1是以'78'结束的吗？"</span> + b2);</span><br><span class="line">		System.out.println(<span class="string">"字符串num2是以'22'开始的吗？"</span> + b3);</span><br><span class="line">		System.out.println(<span class="string">"字符串num2是以'78'结束的吗？"</span> + b4);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串操作-字母大小写转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="keyword">new</span> String(<span class="string">"abc DEF"</span>);</span><br><span class="line">		String news1 = s.toLowerCase();</span><br><span class="line">		String news2 = s.toUpperCase();</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"原字符串："</span> + s);</span><br><span class="line">		System.out.println(<span class="string">"全部转换成小写字母后的字符串："</span> + news1);</span><br><span class="line">		System.out.println(<span class="string">"全部转换成大写字母后的字符串："</span> + news2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串操作-字符串分割</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="keyword">new</span> String(<span class="string">"abc,def,ghi,gkl"</span>);</span><br><span class="line">		String[] news = s.split(<span class="string">","</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"原字符串："</span> + s);</span><br><span class="line">		System.out.println(<span class="string">"按分割字符分割后的字符串是："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;news.length; i++) &#123;</span><br><span class="line">			System.out.println(news[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="keyword">new</span> String(<span class="string">"abc,def,ghi,gkl"</span>);</span><br><span class="line">		String[] news2 = s.split(<span class="string">","</span>, <span class="number">2</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;news2.length; j++) &#123;</span><br><span class="line">			System.out.println(<span class="string">"按分割字符分割一次后的字符串是："</span>);</span><br><span class="line">			System.out.println(news2[j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 根据指定分隔符把字符串分行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">"无言独上西楼，月如钩，寂寞梧桐深院锁清秋。"</span> + </span><br><span class="line">					<span class="string">"剪不断、理还乱、是离愁，别是一般滋味在心头。"</span>;</span><br><span class="line">		System.out.println(<span class="string">"源字符串："</span> + s);</span><br><span class="line">		System.out.println(<span class="string">"源字符串的长度是："</span> + s.length());</span><br><span class="line">		String[] news = s.split(<span class="string">"，|。"</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;news.length; i++) &#123;</span><br><span class="line">			System.out.println(news[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"分行后字符串数组的长度是："</span> + news.length);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 判断字符串是否是数字格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="string">"12312312"</span>;</span><br><span class="line">		<span class="keyword">if</span> (IsNumber(s)) &#123;</span><br><span class="line">			System.out.println(s + <span class="string">"是数字格式"</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(s + <span class="string">"不是数字格式"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">IsNumber</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">char</span>[] c = str.toCharArray();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;c.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Character.isDigit(c[i]))</span><br><span class="line">				;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h2><ul>
<li>Eclipse<ul>
<li>Babel可以汉化Eclipse</li>
<li>Ctrl+Alt+/：自动补全Java关键字</li>
<li>Alt+/：启动Eclipse代码辅助菜单</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>编码练习——Java-3-数组</title>
    <url>/9562.html</url>
    <content><![CDATA[<h2 id="创建与输出数组"><a href="#创建与输出数组" class="headerlink" title="创建与输出数组"></a>创建与输出数组</h2><ul>
<li>数组 - 实例 - 求一位数组各元素的和</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		System.out.println(<span class="string">"一维数组中各元素的和是："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">9</span>)</span><br><span class="line">				System.out.print(num[i] + <span class="string">"="</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				System.out.print(num[i] + <span class="string">"+"</span>);</span><br><span class="line">			sum = sum + num[i];</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>数组 - 实例 - 获取一维数组的最小值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] num = &#123;<span class="number">8</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">10</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">"输出一维数组："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num.length; i++) &#123;</span><br><span class="line">			System.out.print(num[i] + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> min = num[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;num.length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (min &gt; num[j+<span class="number">1</span>]) &#123;</span><br><span class="line">				min = num[j+<span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"\n一维数组的最小值是："</span> + min);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>二维数组 - 输出<ul>
<li>Java创建数组后，将元素初始化为0.</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">		System.out.println(<span class="string">"输出3行4列的数组："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.length; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a[i].length; j++) &#123;</span><br><span class="line">				System.out.print(a[i][j] + <span class="string">"  "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>三维数组 - 输出</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> arr[][][] = <span class="keyword">new</span> <span class="keyword">int</span>[][][] &#123;</span><br><span class="line">				&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;,</span><br><span class="line">				&#123;&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,&#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;,</span><br><span class="line">				&#123;&#123;<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>&#125;,&#123;<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>&#125;&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">"三维数组的第"</span> + (i+<span class="number">1</span>) + <span class="string">"个元素是一个"</span>+arr[i].length + <span class="string">"维数组，内容如下："</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr[i].length; j++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;arr[i][j].length; k++) &#123;</span><br><span class="line">					System.out.print(arr[i][j][k] + <span class="string">"\t"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 对矩阵进行转置运算</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> arr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line">		System.out.println(<span class="string">"转置前的矩阵是："</span>);</span><br><span class="line">		printArray(arr);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> arr2[][] = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length][arr.length];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr[i].length; j++)</span><br><span class="line">				arr2[j][i] = arr[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"转置后的矩阵是："</span>);</span><br><span class="line">		printArray(arr2);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[][] arr)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length; j++) &#123;</span><br><span class="line">				System.out.print(arr[i][j] + <span class="string">"  "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 求方阵的迹</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> arr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line">		<span class="keyword">int</span> tr = <span class="number">0</span>;</span><br><span class="line">		System.out.println(<span class="string">"方阵arr[][]是："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length; j++) &#123;</span><br><span class="line">				System.out.print(arr[i][j] + <span class="string">"  "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)</span><br><span class="line">			tr += arr[i][i];</span><br><span class="line">		System.out.println(<span class="string">"方阵arr[][]的迹是："</span> + tr);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h2><ul>
<li>数组的基本操作 - 遍历一维数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> day[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">12</span>; i++) &#123;</span><br><span class="line">			System.out.print((i+<span class="number">1</span>) + <span class="string">"月有"</span> + day[i] + <span class="string">"天"</span> + <span class="string">"\t\t"</span>);</span><br><span class="line">			<span class="keyword">if</span> ((i+<span class="number">1</span>)%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">				System.out.println(<span class="string">"\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数组的基本操作 - 遍历二维数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> b[][] = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">		System.out.println(<span class="string">"二维数组是："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;b.length; k++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c&lt;b[k].length; c++) &#123;</span><br><span class="line">				System.out.print(b[k][c] + <span class="string">"  "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数组的基本操作 - 遍历二维数组（foreach）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> arr2[][] = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>&#125;, &#123;<span class="number">1</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x[]:arr2) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> e : x) &#123;</span><br><span class="line">				System.out.print(e + <span class="string">"  "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数组的基本操作 - 填充数组元素（fill）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">		Arrays.fill(arr, <span class="number">8</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)</span><br><span class="line">			System.out.println(<span class="string">"第"</span> + (i+<span class="number">1</span>) + <span class="string">"个元素是："</span> + arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数组的基本操作 - 填充数组元素（fill）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">45</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">1</span>&#125;;</span><br><span class="line">		Arrays.fill(arr, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">"第"</span> + (i+<span class="number">1</span>) + <span class="string">"个元素是："</span> + arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数组的基本操作 - 排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">23</span>, <span class="number">42</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">10</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">"原一维数组是："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">			System.out.print(arr[i] + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Arrays.sort(arr);</span><br><span class="line">		System.out.println(<span class="string">"\n升序排列后的数组是："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">			System.out.print(arr[i] + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数组的基本操作 - 复制</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">23</span>, <span class="number">42</span>, <span class="number">12</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">"复制前的数组是："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">			System.out.print(arr[i] + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> newarr[] = Arrays.copyOf(arr, <span class="number">5</span>);</span><br><span class="line">		System.out.println(<span class="string">"\n复制后的数组是："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;newarr.length; i++)&#123;</span><br><span class="line">			System.out.print(newarr[i] + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数组的基本操作 - 复制</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">23</span>, <span class="number">42</span>, <span class="number">12</span>, <span class="number">84</span>, <span class="number">10</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">"复制前的数组是："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">			System.out.print(arr[i] + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> newarr[] = Arrays.copyOfRange(arr, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">		System.out.println(<span class="string">"\n将数组下标0~3复制到新数组中："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;newarr.length; i++)&#123;</span><br><span class="line">			System.out.print(newarr[i] + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 对比一维、二维数组所占内存</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> num1 = <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[num1];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr1.length; i++)</span><br><span class="line">			arr1[i] = i;</span><br><span class="line">		<span class="comment">//获得占用内存总数，并将单位转换为MB</span></span><br><span class="line">		<span class="keyword">long</span> memory1 = Runtime.getRuntime().totalMemory()/<span class="number">1024</span>/<span class="number">1024</span>;</span><br><span class="line">		System.out.println(<span class="string">"用一维数组存储占用内存总量为："</span> + memory1);</span><br><span class="line">		<span class="keyword">int</span> num2 = <span class="number">1024</span>*<span class="number">1024</span>;</span><br><span class="line">		<span class="keyword">int</span>[][] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[num2][<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr2.length; i++) &#123;</span><br><span class="line">			arr2[i][<span class="number">0</span>] = i;</span><br><span class="line">			arr2[i][<span class="number">1</span>] = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> memory2 = Runtime.getRuntime().totalMemory()/<span class="number">1024</span>/<span class="number">1024</span>;</span><br><span class="line">		System.out.println(<span class="string">"用二维数组存储占用的内存总量为："</span> + memory2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 使用直接插入排序法排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">20</span>, <span class="number">40</span>, <span class="number">90</span>, <span class="number">30</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">50</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">"排序前："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.length; i++) &#123;</span><br><span class="line">			System.out.print(array[i] + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> tmp;</span><br><span class="line">		<span class="keyword">int</span> j;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;array.length; i++) &#123;</span><br><span class="line">			tmp = array[i];</span><br><span class="line">			<span class="keyword">for</span> (j=i-<span class="number">1</span>; j&gt;=<span class="number">0</span> &amp;&amp; array[j] &gt; tmp; j--) &#123;</span><br><span class="line">				array[j+<span class="number">1</span>] = array[j];</span><br><span class="line">			&#125;</span><br><span class="line">			array[j+<span class="number">1</span>] = tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"\n排序后："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.length; i++) &#123;</span><br><span class="line">			System.out.print(array[i] + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 冒泡排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">63</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">13</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">"冒泡排序法的过程是："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;array.length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;array.length-i; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (array[j] &gt; array[j+<span class="number">1</span>]) &#123;</span><br><span class="line">					<span class="keyword">int</span> tmp = array[j];</span><br><span class="line">					array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">					array[j+<span class="number">1</span>] = tmp;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.print(array[j] + <span class="string">"  "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.print(<span class="string">"【"</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=array.length-i; j&lt;array.length; j++) &#123;</span><br><span class="line">				System.out.print(array[j] + <span class="string">"  "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">"】"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>编码练习——Java-2-流程控制</title>
    <url>/51eb.html</url>
    <content><![CDATA[<h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ul>
<li>条件语句 - if</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">		<span class="keyword">if</span>(a==<span class="number">100</span>) &#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"a的值是 100"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> x = <span class="number">45</span>;</span><br><span class="line">		<span class="keyword">int</span> y = <span class="number">12</span>;</span><br><span class="line">		<span class="keyword">if</span> (x&gt;y) &#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"变量x 大于 变量y"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x&lt;y) &#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"变量x 小于 变量y"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> math = <span class="number">95</span>;</span><br><span class="line">		<span class="keyword">if</span> (math&gt;<span class="number">60</span>) &#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"数学及格了"</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"数学没有及格"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">30</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"a的值大于30"</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x&gt;<span class="number">10</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"a的值大于10，但小于30"</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x&gt;<span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"a的值大于0，但小于10"</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"a的值小于0"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>条件语句 - switch</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"今天是星期几："</span>);</span><br><span class="line">		<span class="keyword">int</span> week = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">switch</span>(week) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"Monday"</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"Tuesday"</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"Wednesday"</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"Sorry, I don't know"</span>);</span><br><span class="line">				</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 验证登录信息的合法性</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		Scanner scan = <span class="built_in">new</span> Scanner(<span class="keyword">System</span>.<span class="keyword">in</span>);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("请输入登录用户名：");</span><br><span class="line">		String username = scan.nextLine();</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("请输入登录密码：");</span><br><span class="line">		String <span class="keyword">password</span> = scan.nextLine();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (!username.equals("mr")) &#123;</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println("用户名非法");</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">password</span>.equals("mrsoft")) &#123;</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println("登录密码错误");</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println("恭喜您， 登录信息通过验证");</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 为新员工分配部门</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"请输入新员工的姓名："</span>);</span><br><span class="line">		<span class="keyword">String</span> name = scan.nextLine();</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"请输入新员工应聘的编程语言："</span>);</span><br><span class="line">		<span class="keyword">String</span> language = scan.nextLine();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">switch</span>(language.hashCode()) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3254818</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2301506</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2269730</span>:</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"员工"</span> + name + <span class="string">"被分配到Java程序开发部门。"</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3104</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2112</span>:</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"员工"</span> + name + <span class="string">"被分配到C#项目维护组。"</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">-709190099</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">955463181</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="number">9745901</span>:</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"员工"</span>+name+<span class="string">"被分配到Asp.net程序测试部门。"</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"本公司不需要"</span> + language + <span class="string">"语言的程序开发人员。"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul>
<li>循环语句 - while</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (x&lt;=<span class="number">10</span>) &#123;</span><br><span class="line">			<span class="keyword">sum</span> = <span class="keyword">sum</span>+x;</span><br><span class="line">			x++;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"从1到10的和是："</span> + <span class="keyword">sum</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>循环语句 - do…while<ul>
<li>循环体，至少执行一次。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">		<span class="keyword">while</span> (a==<span class="number">60</span>) &#123;	<span class="comment">//一遍不执行</span></span><br><span class="line">			System.out.println(<span class="string">"Ok! a==60"</span>);</span><br><span class="line">			a--;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line">		<span class="keyword">do</span> &#123;	<span class="comment">//至少执行一次</span></span><br><span class="line">			System.out.println(<span class="string">"Ok! b==60"</span>);</span><br><span class="line">			b--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (b==<span class="number">60</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>循环语句 - for</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i+=<span class="number">1</span>) &#123;</span><br><span class="line">			sum = sum+i;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"1到100之间数的和为："</span> + sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>循环语句 -foreach</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> arr[] = &#123;<span class="number">7</span>, <span class="number">10</span>, <span class="number">1</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">"一维数组中的元素分别为："</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x : arr) &#123;</span><br><span class="line">			System.out.print(x+<span class="string">"\t"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 使用while循环遍历数组</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String[] aves = <span class="keyword">new</span> String[] &#123;<span class="string">"白露"</span>, <span class="string">"丹顶鹤"</span>, <span class="string">"黄鹂"</span>, <span class="string">"乌鸦"</span>, <span class="string">"喜鹊"</span>, <span class="string">"布谷鸟"</span>, <span class="string">"灰文鸟"</span>, <span class="string">"百灵鸟"</span>&#125;;</span><br><span class="line">		<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">		System.out.println(<span class="string">"我的花园里有很多鸟，种类有："</span>);</span><br><span class="line">		<span class="keyword">while</span> (index &lt; aves.length) &#123;</span><br><span class="line">			System.out.print(aves[index++] + <span class="string">"   "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 使用for循环输出九九乘法表</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">9</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; j++) &#123;</span><br><span class="line">				System.out.print(j + <span class="string">"*"</span> + i + <span class="string">"="</span> + (i*j) + <span class="string">"\t"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>跳转语句 - break</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		String flag = <span class="string">"从1到100之间连续整数的和是："</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">			sum +=i;</span><br><span class="line">			<span class="keyword">if</span>(sum&gt;<span class="number">1000</span>) &#123;</span><br><span class="line">				flag = <span class="string">"从1到"</span> + i + <span class="string">"之间连续整数的和是："</span>;</span><br><span class="line">				<span class="comment">//跳出该层循环</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(flag + sum);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>跳转语句 - continue</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		System.out.println(<span class="string">"10以内的奇数有："</span>);</span><br><span class="line">		<span class="keyword">while</span> (i&lt;<span class="number">10</span>) &#123;</span><br><span class="line">			i++;</span><br><span class="line">			<span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.print(i + <span class="string">"  "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>跳转语句 - return</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 终止循环体（break）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\n----中断单层循环的例子----"</span>);</span><br><span class="line">		String[] array = <span class="keyword">new</span> String[] &#123;<span class="string">"白露"</span>,<span class="string">"丹顶鹤"</span>,<span class="string">"黄鹂"</span>,<span class="string">"鹦鹉"</span>,<span class="string">"乌鸦"</span>,<span class="string">"喜鹊"</span>,<span class="string">"老鹰"</span>,<span class="string">"布谷鸟"</span>,<span class="string">"老鹰"</span>,<span class="string">"灰文鸟"</span>,<span class="string">"老鹰"</span>,<span class="string">"百灵鸟"</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span> (String string : array) &#123;</span><br><span class="line">			<span class="keyword">if</span> (string.equalsIgnoreCase(<span class="string">"老鹰"</span>))</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			System.out.print(<span class="string">"有："</span> + string + <span class="string">"   "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"\n\n----中单2层循环的例子----"</span>);</span><br><span class="line">		<span class="keyword">int</span>[][] myScores = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;&#123;<span class="number">67</span>,<span class="number">78</span>,<span class="number">63</span>,<span class="number">22</span>,<span class="number">66</span>&#125;, &#123;<span class="number">55</span>,<span class="number">68</span>,<span class="number">78</span>,<span class="number">95</span>,<span class="number">44</span>&#125;,&#123;<span class="number">95</span>,<span class="number">97</span>,<span class="number">92</span>,<span class="number">93</span>,<span class="number">81</span>&#125;&#125;;</span><br><span class="line">		System.out.println(<span class="string">"宝宝这次考试成绩：\n数学\t语文\t英语\t美术\t历史"</span>);</span><br><span class="line">		No1: <span class="keyword">for</span> (<span class="keyword">int</span>[] is : myScores) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i : is) &#123;</span><br><span class="line">				System.out.print(i + <span class="string">"\t"</span>);</span><br><span class="line">				<span class="keyword">if</span>(i&lt;<span class="number">60</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">"\n等等，"</span> + i + <span class="string">"分的是什么？这个为什么不及格？"</span>);</span><br><span class="line">					<span class="keyword">break</span> No1;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 循环体的过滤器（continue）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String[] array = <span class="keyword">new</span> String[] &#123;<span class="string">"白露"</span>,<span class="string">"丹顶鹤"</span>,<span class="string">"黄鹂"</span>,<span class="string">"鹦鹉"</span>,<span class="string">"乌鸦"</span>,<span class="string">"喜鹊"</span>,<span class="string">"老鹰"</span>,<span class="string">"布谷鸟"</span>,<span class="string">"老鹰"</span>,<span class="string">"灰文鸟"</span>,<span class="string">"老鹰"</span>,<span class="string">"百灵鸟"</span>&#125;;</span><br><span class="line">		System.out.println(<span class="string">"在我的花园里有很多鸟类，但是最近来了几只老鹰，请帮我把他们抓走。"</span>);</span><br><span class="line">		<span class="keyword">int</span> eagleCount = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(String string : array) &#123;</span><br><span class="line">			<span class="keyword">if</span>(string.equals(<span class="string">"老鹰"</span>)) &#123;</span><br><span class="line">				System.out.println(<span class="string">"发现一只老鹰，已经抓到笼子里。"</span>);</span><br><span class="line">				eagleCount++;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">"搜索鸟类，发现了："</span> + string);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"一共捉到了："</span> + eagleCount + <span class="string">"只老鹰。"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 使用for循环输出空心的菱形</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		printHollowRhombus(<span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printHollowRhombus</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (size%<span class="number">2</span>==<span class="number">0</span>) </span><br><span class="line">			size++;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size/<span class="number">2</span>+<span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=size/<span class="number">2</span>; j&gt;i+<span class="number">1</span>; j--) &#123;</span><br><span class="line">				System.out.print(<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">2</span>*i+<span class="number">1</span>; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(j==<span class="number">0</span> || j==<span class="number">2</span>*i) </span><br><span class="line">					System.out.print(<span class="string">"*"</span>);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					System.out.print(<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">""</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=size/<span class="number">2</span>+<span class="number">1</span>; i&lt;size; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i-size/<span class="number">2</span>; j++) &#123;</span><br><span class="line">				System.out.print(<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">2</span>*size-<span class="number">1</span>-<span class="number">2</span>*i; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(j==<span class="number">0</span> || j==<span class="number">2</span>*(size-i-<span class="number">1</span>))</span><br><span class="line">					System.out.print(<span class="string">"*"</span>);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					System.out.print(<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">""</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 使用for循环输出杨辉三角</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> triangle[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;triangle.length; i++) &#123;</span><br><span class="line">			triangle[i] = <span class="keyword">new</span> <span class="keyword">int</span>[i+<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=triangle[i].length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(i==<span class="number">0</span>||j==<span class="number">0</span>||j==triangle[i].length-<span class="number">1</span>)</span><br><span class="line">					triangle[i][j] = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					triangle[i][j] = triangle[i-<span class="number">1</span>][j] + triangle[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">				System.out.print(triangle[i][j] + <span class="string">"\t"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>编码练习——Java-1-基础</title>
    <url>/572.html</url>
    <content><![CDATA[<h2 id="基础练习"><a href="#基础练习" class="headerlink" title="基础练习"></a>基础练习</h2><ul>
<li>输出</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"我能学好Java语言！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>整数类型</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">byte</span> mybyte = <span class="number">124</span>;</span><br><span class="line">		<span class="keyword">short</span> myshort = <span class="number">32564</span>;</span><br><span class="line">		<span class="keyword">int</span> myint = <span class="number">45784612</span>;</span><br><span class="line">		<span class="keyword">long</span> mylong = <span class="number">46789451L</span>;</span><br><span class="line">		<span class="keyword">long</span> result = mybyte+myshort+myint+mylong;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"四种类型相加的结果为："</span>+result);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>浮点型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">float</span> f1 = <span class="number">12.23f</span>;</span><br><span class="line">		<span class="keyword">double</span> d1 = <span class="number">4562.12</span>d;</span><br><span class="line">		<span class="keyword">double</span> d2 = <span class="number">45678.1564</span>;</span><br><span class="line">		<span class="keyword">double</span> result = f1+d1+d2;</span><br><span class="line">		System.out.println(<span class="string">"浮点数相加达到结果为："</span>+result);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>字符型</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="string">'d'</span>;</span><br><span class="line">		<span class="keyword">char</span> c = <span class="number">97</span>;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"字符d的Unicode码是："</span>+i);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"Unicode码97代表的字符是："</span>+c);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>转义字符</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">char</span> char1 = <span class="string">'\\'</span>;</span><br><span class="line">		<span class="keyword">char</span> char2 = <span class="string">'\u2605'</span>;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"输出反斜杠："</span> + char1);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"输出五角星："</span> + char2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>变量（声明与定义）</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i= <span class="number">10</span>;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"i的初值是："</span>+i);</span><br><span class="line">		i= <span class="number">100</span>;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"i现在的值是："</span>+i);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>声明常量<ul>
<li>final</li>
<li>一般大写</li>
</ul>
</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="built_in">double</span> PI = <span class="number">3.1415926</span>F; <span class="comment">// final 大写</span></span><br><span class="line">		<span class="keyword">final</span> <span class="built_in">bool</span>ean BOOL = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>变量和常量（静态变量）</li>
</ul>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class Test &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="literal">PI</span> = <span class="number">3.14</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="built_in">int</span> age = <span class="number">23</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="built_in">int</span> number;</span><br><span class="line">		number = <span class="number">1235</span>;</span><br><span class="line">		age = <span class="number">22</span>;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"常量PI的值为："</span>+<span class="literal">PI</span>);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"赋值后number的值为："</span>+number);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"int型变量age的值为："</span> + age);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>成员变量（静态变量）和局部变量</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">times</span> = <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="keyword">times</span> = <span class="number">4</span>;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="string">"times的值为："</span> + <span class="keyword">times</span>);</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="string">"times的值为："</span> + Test.<span class="keyword">times</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>赋值运算符</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a,b,c;</span><br><span class="line">		a = <span class="number">15</span>;</span><br><span class="line">		c = b = a+<span class="number">4</span>;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"c的值为："</span> + c);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"b的值为："</span> + b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>算术运算符</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="type">float</span> number1 = <span class="number">45.56</span>f;</span><br><span class="line">		<span class="type">int</span> number2 = <span class="number">152</span>;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("45.56f和152的和为：" + (number1+number2));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("45.56f和152的差为：" + (number1-number2));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("45.56f和152的积为：" + (number1*number2));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("45.56f和152的商为：" + (number1/number2));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>关系运算符</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="type">int</span> number1 = <span class="number">4</span>;</span><br><span class="line">		<span class="type">int</span> number2 = <span class="number">5</span>;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("4&gt;5是否成立：" + (number1&gt;number2));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("4&lt;5是否成立：" + (number1&lt;number2));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("4==5是否成立：" + (number1==number2));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("4!=5是否成立：" + (number1!=number2));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("4&gt;=5是否成立：" + (number1&gt;=number2));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("4&lt;=5是否成立：" + (number1&lt;=number2));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>逻辑运算符</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">		<span class="keyword">boolean</span> result1 = ((a&gt;b) &amp;&amp; (a!=b));</span><br><span class="line">		<span class="keyword">boolean</span> result2 = ((a&gt;b) ||(a!=b));</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"(a&gt;b) &amp;&amp; (a!=b)的值是："</span> + result1);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"(a&gt;b) ||(a!=b)的值是："</span> + result2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>按位运算符</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">46</span>;</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">97</span>;</span><br><span class="line">		<span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"46 &amp; 97 的值是："</span> + (i&amp;j));</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"46 &amp; 'a' 的值是："</span> + (i^c));</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"46 &gt;&gt;1  的值是："</span> + (i&gt;&gt;<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>三元条件运算符</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="built_in">int</span> i = <span class="number">46</span>;</span><br><span class="line">		<span class="built_in">int</span> j = <span class="number">97</span>;</span><br><span class="line">		<span class="built_in">int</span> z = i&gt;j ? <span class="number">100</span> : <span class="number">200</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"i&gt;j?100:200 的值是："</span> + z);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 不用其它变量实现两个变量互换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">"请输入变量A的值：\n"</span>);</span><br><span class="line">		<span class="keyword">long</span> A = scan.nextLong();</span><br><span class="line">		System.out.println(<span class="string">"请输入变狼B的值：\n"</span>);</span><br><span class="line">		<span class="keyword">long</span> B = scan.nextLong();</span><br><span class="line">		System.out.println(<span class="string">"A="</span>+A+<span class="string">"\tB="</span>+B);</span><br><span class="line">		System.out.println(<span class="string">"执行变量互换..."</span>);</span><br><span class="line">		A = A^B;</span><br><span class="line">		B = B^A;</span><br><span class="line">		A = A^B;</span><br><span class="line">		System.out.println(<span class="string">"A="</span>+A+<span class="string">"\tB="</span>+B);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 判断数字的奇偶性</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"请输入一个整数："</span>);</span><br><span class="line">		<span class="keyword">long</span> number = scan.nextLong();</span><br><span class="line">		<span class="keyword">String</span> check = (number%<span class="number">2</span> == <span class="number">0</span>) ? <span class="string">"这个数字是：偶数"</span> : <span class="string">"这个数字是：奇数"</span>;</span><br><span class="line">		System.out.<span class="built_in">println</span>(check);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>自动类型转换</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="built_in">float</span> number1 = <span class="number">45f</span>;</span><br><span class="line">		<span class="built_in">int</span> number2 = <span class="number">152</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(number1+number2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">byte</span> mybyte = <span class="number">127</span>;</span><br><span class="line">		<span class="keyword">int</span> myint = <span class="number">150</span>;</span><br><span class="line">		<span class="keyword">float</span> myfloat = <span class="number">452.12f</span>;</span><br><span class="line">		<span class="keyword">char</span> mychar = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">double</span> mydouble = <span class="number">45.46546</span>;</span><br><span class="line">		<span class="comment">//将运算结果输出</span></span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"127 + 452.12 = "</span> + (mybyte+myfloat));</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"127*150 = "</span> + (mybyte*myint));</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"127/10 = "</span> + (mybyte/mychar));</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"45.46546+10 = "</span> + (mydouble+mychar));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>强制类型转换</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = (<span class="keyword">int</span>) <span class="number">45.23</span>;</span><br><span class="line">		<span class="keyword">long</span> y = (<span class="keyword">long</span>)<span class="number">456.6F</span>;</span><br><span class="line">		<span class="keyword">int</span> b = (<span class="keyword">int</span>)<span class="string">'a'</span>;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"a = "</span> + a);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"y = "</span> + y);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"b = "</span> + b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 类型转换</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">int</span>Num = <span class="number">4</span>;</span><br><span class="line">		<span class="built_in">float</span> <span class="built_in">float</span>Num = <span class="number">9.5</span>F;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">float</span>Num /= <span class="built_in">int</span>Num; <span class="comment">//自动类型转换</span></span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"9.5F/4 = "</span> + <span class="built_in">float</span>Num);</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">double</span> numX = <span class="number">4.88</span>;</span><br><span class="line">		<span class="built_in">double</span> numY = <span class="number">78.83</span>;</span><br><span class="line">		<span class="built_in">int</span> numZ = (<span class="built_in">int</span>)numX + (<span class="built_in">int</span>)numY; <span class="comment">//强制类型转换</span></span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"4.88 + 78.83 = "</span> + numZ);</span><br><span class="line">		</span><br><span class="line">		char charVar = <span class="string">'T'</span>;</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">int</span>Var = (<span class="built_in">int</span>) charVar;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"将字符T转换成int型变量是："</span> + <span class="built_in">int</span>Var);</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">int</span> num1 = <span class="number">34</span>;</span><br><span class="line">		<span class="built_in">double</span> num2 = (<span class="built_in">double</span>) num1/<span class="number">3</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"34的三分之一是："</span>+num2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注释<ul>
<li>单行</li>
<li>多行</li>
<li>文档注释</li>
</ul>
</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 单行注释</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 多行注释1</span></span><br><span class="line"><span class="comment">		 * 多行注释2</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 文档注释</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 判断某一年是否是闰年</li>
</ul>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> class Test &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"请输入一个年份："</span>);</span><br><span class="line">		<span class="keyword">long</span> <span class="built_in">year</span> = scan.nextLong();</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">year</span>%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; <span class="built_in">year</span>%<span class="number">100</span>!=<span class="number">0</span> || <span class="built_in">year</span>%<span class="number">400</span>==<span class="number">0</span>) &#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="built_in">year</span> + <span class="string">"年是闰年！"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="built_in">year</span> + <span class="string">"年不是闰年！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实例 - 求球形的体积</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		Scanner scan = <span class="built_in">new</span> Scanner(<span class="keyword">System</span>.<span class="keyword">in</span>);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("请输入球形的半径：");</span><br><span class="line">		<span class="type">double</span> r = scan.nextDouble();</span><br><span class="line">		final <span class="type">double</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">		<span class="type">double</span> volume = <span class="number">4.0</span>/<span class="number">3.0</span>*PI*r*r*r;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("球形的半径是：" + r);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("圆周率是：" + PI);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println("球形的体积是：" + volume);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>复合语句</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> y = <span class="number">40</span>;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"输出y的值："</span> + y);</span><br><span class="line">		<span class="keyword">int</span> z = <span class="number">245</span>;</span><br><span class="line">		<span class="keyword">boolean</span> b;</span><br><span class="line">		<span class="comment">// 复合语句</span></span><br><span class="line">		&#123;</span><br><span class="line">			b = y&gt;z;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"y&gt;z城里吗："</span> + b);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记——Java</title>
    <url>/5a2b.html</url>
    <content><![CDATA[<h2 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h2><ul>
<li>第一个Java程序（HelloWorld.java）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123; <span class="comment">// 公开类 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123; <span class="comment">// 程序入口</span></span><br><span class="line">       System.out.println(<span class="string">"Hello World"</span>);    <span class="comment">// 标准输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。</li>
<li>类、对象、方法和实例<ul>
<li>类：类是一个模板，它描述一类对象的行为和状态。</li>
<li>对象：对象是类的一个实例，有状态和行为。</li>
<li>方法：方法就是行为。</li>
<li>实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</li>
</ul>
</li>
<li>基本语法<ul>
<li>大小写敏感</li>
<li>类名大写</li>
<li>方法名小写</li>
<li>源文件名必须和类名相同</li>
<li>主方法入口：所有的Java 程序由<code>public static void main(String []args)</code>方法开始执行</li>
</ul>
</li>
<li><p>标识符</p>
<ul>
<li>字母、美元符和下划线开始</li>
<li>首字符之后可以是任何字符的组合</li>
<li>不能使用关键字</li>
<li>大小写敏感</li>
</ul>
</li>
<li><p>修饰符</p>
<ul>
<li>可访问：default, public , protected, private</li>
<li>不可访问：final, abstract, strictfp</li>
</ul>
</li>
<li><p>变量</p>
<ul>
<li>局部变量</li>
<li>类变量（静态变量）</li>
<li>成员变量（非静态变量）</li>
</ul>
</li>
<li><p>数组</p>
<ul>
<li>数组可以存储多个同类型的变量。</li>
</ul>
</li>
<li><p>枚举</p>
<ul>
<li>枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的bug。</li>
</ul>
</li>
<li><p>注释</p>
<ul>
<li>单行注释：<code>//</code></li>
<li>多行注释：<code>/*....*/</code></li>
</ul>
</li>
<li><p>继承</p>
<ul>
<li>一个类可以由其他类派生。利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。超类→子类。</li>
</ul>
</li>
<li><p>接口</p>
<ul>
<li>对象间相互通信的协议。</li>
<li>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</li>
</ul>
</li>
<li><p>关键字</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>关键字</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>abstract</td>
<td style="text-align:left">抽象方法，抽象类的修饰符</td>
</tr>
<tr>
<td>assert</td>
<td style="text-align:left">断言条件是否满足</td>
</tr>
<tr>
<td>boolean</td>
<td style="text-align:left">布尔数据类型</td>
</tr>
<tr>
<td>break</td>
<td style="text-align:left">跳出循环或者label代码段</td>
</tr>
<tr>
<td>byte</td>
<td style="text-align:left">8-bit 有符号数据类型</td>
</tr>
<tr>
<td>case</td>
<td style="text-align:left">switch语句的一个条件</td>
</tr>
<tr>
<td>catch</td>
<td style="text-align:left">和try搭配扑捉异常信息</td>
</tr>
<tr>
<td>char</td>
<td style="text-align:left">16-bit Unicode字符数据类型</td>
</tr>
<tr>
<td>class</td>
<td style="text-align:left">定义类</td>
</tr>
<tr>
<td>const</td>
<td style="text-align:left">未使用</td>
</tr>
<tr>
<td>continue</td>
<td style="text-align:left">不执行循环体剩余部分</td>
</tr>
<tr>
<td>default</td>
<td style="text-align:left">switch语句中的默认分支</td>
</tr>
<tr>
<td>do</td>
<td style="text-align:left">循环语句，循环体至少会执行一次</td>
</tr>
<tr>
<td>double</td>
<td style="text-align:left">64-bit双精度浮点数</td>
</tr>
<tr>
<td>else</td>
<td style="text-align:left">if条件不成立时执行的分支</td>
</tr>
<tr>
<td>enum</td>
<td style="text-align:left">枚举类型</td>
</tr>
<tr>
<td>extends</td>
<td style="text-align:left">表示一个类是另一个类的子类</td>
</tr>
<tr>
<td>final</td>
<td style="text-align:left">表示一个值在初始化之后就不能再改变了。表示方法不能被重写，或者一个类不能有子类</td>
</tr>
<tr>
<td>finally</td>
<td style="text-align:left">为了完成执行的代码而设计的，主要是为了程序的健壮性和完整性，无论有没有异常发生都执行代码。</td>
</tr>
<tr>
<td>float</td>
<td style="text-align:left">32-bit单精度浮点数</td>
</tr>
<tr>
<td>for</td>
<td style="text-align:left">for循环语句</td>
</tr>
<tr>
<td>goto</td>
<td style="text-align:left">未使用</td>
</tr>
<tr>
<td>if</td>
<td style="text-align:left">条件语句</td>
</tr>
<tr>
<td>implements</td>
<td style="text-align:left">表示一个类实现了接口</td>
</tr>
<tr>
<td>import</td>
<td style="text-align:left">导入类</td>
</tr>
<tr>
<td>instanceof</td>
<td style="text-align:left">测试一个对象是否是某个类的实例</td>
</tr>
<tr>
<td>int</td>
<td style="text-align:left">32位整型数</td>
</tr>
<tr>
<td>interface</td>
<td style="text-align:left">接口，一种抽象的类型，仅有方法和常量的定义</td>
</tr>
<tr>
<td>long</td>
<td style="text-align:left">64位整型数</td>
</tr>
<tr>
<td>native</td>
<td style="text-align:left">表示方法用非java代码实现</td>
</tr>
<tr>
<td>new</td>
<td style="text-align:left">分配新的类实例</td>
</tr>
<tr>
<td>package</td>
<td style="text-align:left">一系列相关类组成一个包</td>
</tr>
<tr>
<td>private</td>
<td style="text-align:left">表示私有字段，或者方法等，只能从类内部访问</td>
</tr>
<tr>
<td>protected</td>
<td style="text-align:left">表示字段只能通过类或者其子类访问。子类或者在同一个包内的其他类</td>
</tr>
<tr>
<td>public</td>
<td style="text-align:left">表示共有属性或者方法</td>
</tr>
<tr>
<td>return</td>
<td style="text-align:left">方法返回值</td>
</tr>
<tr>
<td>short</td>
<td style="text-align:left">16位数字</td>
</tr>
<tr>
<td>static</td>
<td style="text-align:left">表示在类级别定义，所有实例共享的</td>
</tr>
<tr>
<td>strictfp</td>
<td style="text-align:left">浮点数比较使用严格的规则</td>
</tr>
<tr>
<td>super</td>
<td style="text-align:left">表示基类</td>
</tr>
<tr>
<td>switch</td>
<td style="text-align:left">选择语句</td>
</tr>
<tr>
<td>synchronized</td>
<td style="text-align:left">表示同一时间只能由一个线程访问的代码块</td>
</tr>
<tr>
<td>this</td>
<td style="text-align:left">表示调用当前实例，或者调用另一个构造函数</td>
</tr>
<tr>
<td>throw    抛出异常</td>
</tr>
<tr>
<td>throws</td>
<td style="text-align:left">定义方法可能抛出的异常</td>
</tr>
<tr>
<td>transient</td>
<td style="text-align:left">修饰不要序列化的字段</td>
</tr>
<tr>
<td>try</td>
<td style="text-align:left">表示代码块要做异常处理或者和finally配合表示是否抛出异常都执行finally中的代码</td>
</tr>
<tr>
<td>void</td>
<td style="text-align:left">标记方法不返回任何值</td>
</tr>
<tr>
<td>volatile</td>
<td style="text-align:left">标记字段可能会被多个线程同时访问，而不做同步</td>
</tr>
<tr>
<td>while</td>
<td style="text-align:left">while循环</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Java对象和类"><a href="#Java对象和类" class="headerlink" title="Java对象和类"></a>Java对象和类</h2><ul>
<li><p>Java支持以下概念：</p>
<ul>
<li>多态</li>
<li>继承</li>
<li>封装</li>
<li>抽象</li>
<li>类：类是一个模板，它描述一类对象的行为和状态。</li>
<li>对象：对象是类的一个实例，有状态和行为。</li>
<li>实例</li>
<li>方法</li>
<li>重载</li>
</ul>
</li>
<li><p>举例：定义类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123; <span class="comment">// Dog类（模板）</span></span><br><span class="line">   String breed;  <span class="comment">// 实例变量（属性）</span></span><br><span class="line">   <span class="keyword">int</span> age;</span><br><span class="line">   String color;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">barking</span><span class="params">()</span></span>&#123;<span class="comment">// 方法</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>类变量：</p>
<ul>
<li><strong>局部变量</strong>：<strong>在方法、构造方法或者语句块中</strong>定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li>
<li><strong>成员变量</strong>：成员变量是<strong>定义在类中，方法体之外</strong>的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li>
<li><strong>类变量</strong>：类变量也<strong>声明在类中，方法体之外</strong>，但必须声明为<strong>static类型</strong>。</li>
</ul>
</li>
<li><p>构造方法</p>
<ul>
<li>构造方法的名称必须与类同名。</li>
<li>一个类可以有多个构造方法。</li>
<li>如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。</li>
</ul>
</li>
<li><p>创建对象</p>
<ul>
<li>使用关键字<strong>new</strong>来创建一个新的对象。</li>
<li>创建对象的步骤：<ul>
<li>声明：包括名称和类型。</li>
<li>实例化：用<strong>new</strong>创建对象。</li>
<li>初始化：调用构造方法初始化对象。</li>
</ul>
</li>
</ul>
</li>
<li><p>访问实例的<strong>变量和方法</strong></p>
<ul>
<li>运算符：<strong>.</strong></li>
</ul>
</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 实例化对象 */</span></span><br><span class="line">ObjectReference = <span class="keyword">new</span> <span class="constructor">Constructor()</span>;</span><br><span class="line"><span class="comment">/* 访问其中的变量 */</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">ObjectReference</span>.</span></span>variableName;</span><br><span class="line"><span class="comment">/* 访问类中的方法 */</span></span><br><span class="line">ObjectReference.<span class="constructor">MethodName()</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>源文件声明规则</p>
<ul>
<li>一个源文件中只能有一个public类</li>
<li>一个源文件可以有多个非public类</li>
<li>源文件的名称应该和public类的类名保持</li>
<li>如果一个类定义在某个包中，那么package语句应该在源文件的首行。</li>
<li>mport语句放在package语句和类定义之间。</li>
<li>import语句和package语句对源文件中定义的所有类都有效。</li>
</ul>
</li>
<li><p>Java包：用于对类和接口分类。</p>
</li>
<li>Import语句是用来提供一个合理的路径，使得编译器可以找到某个类。</li>
</ul>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul>
<li><p>Java两大数据类型：</p>
<ul>
<li><strong>内置</strong>数据类型</li>
<li><strong>引用</strong>数据类型</li>
</ul>
</li>
<li><p>内置数据类型</p>
<ul>
<li>Java语言提供了<strong>八种基本类型</strong>。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</li>
<li>四种整数类型：byte、short、int、long。</li>
<li>两种浮点型：float、double。</li>
<li>一个布尔型：boolean (true、false)</li>
<li>一个字符型：char (16 bits Unicode字符)</li>
</ul>
</li>
<li><p>引用类型</p>
<ul>
<li>类似于C++指针。</li>
<li>引用类型指向一个对象，指向对象的变量是引用变量。</li>
<li>对象、数组都是引用数据类型。</li>
<li>所有引用类型的默认值都是null。</li>
<li>一个引用变量可以用来引用与任何与之兼容的类型。</li>
<li>例子：<code>Site site = new Site(&quot;Runoob&quot;)</code></li>
</ul>
</li>
<li><p>常量</p>
<ul>
<li>使用<strong>final</strong>关键字修饰常量。</li>
<li>一般用<strong>大写字母</strong>表示。</li>
<li>常量前缀：八进制（0）和十六进制（0x）。</li>
<li>字符串常量：<code>&quot;....&quot;</code></li>
<li>字符串常量和字符常量都可以包含任何Unicode字符。<code>String a = &quot;\u0001&quot;;</code>。</li>
</ul>
</li>
</ul>
<h2 id="Java变量类型"><a href="#Java变量类型" class="headerlink" title="Java变量类型"></a>Java变量类型</h2><ul>
<li>声明变量格式：<code>type identifier [ = value][, identifier [= value] ...] ;</code>。</li>
<li>Java变量类型：<ul>
<li>局部变量<ul>
<li>声明在方法、构造方法或者语句块中；</li>
<li>用完即毁；</li>
<li>只在声明它的方法、构造方法或者语句块中可见；</li>
<li>在<strong>栈</strong>上分配；</li>
<li>没有默认值，需要初始化。</li>
</ul>
</li>
<li>成员变量（实例变量）<ul>
<li>声明在一个类中，但在方法、构造方法和语句块之外；</li>
<li>可以声明在使用前或者使用后；</li>
<li>在对象创建的时候创建，在对象被销毁的时候销毁；</li>
<li>访问修饰符可以修饰实例变量；</li>
<li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。</li>
<li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。</li>
<li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li>
</ul>
</li>
<li>类变量（静态变量）<ul>
<li>在类中以static关键字声明，但必须在方法构造方法和语句块之外。</li>
<li>类只拥有类变量的一份拷贝。</li>
<li>静态变量储存在静态存储区。</li>
<li>静态变量在程序开始时创建，在程序结束时销毁。</li>
<li>静态变量具有默认值。</li>
<li>类变量被声明为public static final类型时，类变量名称必须使用大写字母。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h2><ul>
<li><p>分为2类：</p>
<ul>
<li>访问修饰符</li>
<li>非访问修饰符</li>
</ul>
</li>
<li><p>访问修饰符</p>
<ul>
<li>default，默认的，同一包内可见，不使用修饰符。</li>
<li>private，私有的，同一类内可见。</li>
<li>public，公有的，对所有类可见。</li>
<li>protected，受保护的，同一包和所有子类可见。</li>
</ul>
</li>
<li><p>基本知识</p>
<ul>
<li>类和接口不能声明为private。</li>
<li>Private访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。</li>
<li>私有访问类型的变量只能通过类中公共的getter方法被外部类访问。</li>
<li>public的类、方法、构造方法和接口能够被任何其他类访问。</li>
<li>如果几个相互访问的public类分布在不同的包中，则需要导入相应public类所在的包。</li>
<li>Java程序的main() 方法必须设置成公有的，否则，Java解释器将不能运行该类。</li>
<li>protected的变量、方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问。</li>
</ul>
</li>
<li><p>方法继承规则：</p>
<ul>
<li>父类中声明为public的方法在子类中也必须为public。</li>
<li>父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。</li>
<li>父类中声明为private的方法，不能够被继承。</li>
</ul>
</li>
<li><p>非访问修饰符</p>
<ul>
<li>static，创建类方法和类变量。</li>
<li>final，inal修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</li>
<li>abstract，创建抽象类和抽象方法。</li>
<li>synchronized和volatile，用于线程编程。</li>
</ul>
</li>
<li><p>基本知识：</p>
<ul>
<li>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</li>
<li>如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</li>
<li>抽象类可以包含抽象方法和非抽象方法。</li>
<li>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。</li>
</ul>
</li>
</ul>
<h2 id="Java运算符"><a href="#Java运算符" class="headerlink" title="Java运算符"></a>Java运算符</h2><ul>
<li><p>运算符分类：</p>
<ul>
<li>算术运算符</li>
<li>关系运算符</li>
<li>位运算符</li>
<li>逻辑运算符</li>
<li>赋值运算符</li>
<li>其他运算符</li>
</ul>
</li>
<li><p>算术运算符</p>
<ul>
<li><code>+、-、*、/、%、++、--</code></li>
</ul>
</li>
<li>关系运算符<ul>
<li><code>==/!=、&gt;、&lt;、&gt;=、&lt;=</code></li>
</ul>
</li>
<li><p>位运算符</p>
<ul>
<li>应用对象：字节型（byte）、字符型（char）、短整型（short）、整型、长整型。</li>
<li>&amp;，按位与</li>
<li>|，按位或</li>
<li>^，按位异或</li>
<li>~，按位补，翻转每一位</li>
<li>&lt;&lt;，按位左移</li>
<li><blockquote>
<blockquote>
<p>，按位右移</p>
</blockquote>
</blockquote>
</li>
<li><blockquote>
<blockquote>
<blockquote>
<p>，按位右移补零</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ul>
</li>
<li><p>逻辑运算符</p>
<ul>
<li><code>&amp;&amp;、||、!</code></li>
</ul>
</li>
<li><p>赋值运算符</p>
<ul>
<li><code>=、+=、-=、*=、/=、%=、&lt;&lt;=、&gt;&gt;=、&amp;=、^=、|=</code></li>
</ul>
</li>
<li><p>条件运算符（?:）</p>
<ul>
<li><code>variable x = (expression) ? value if true : value if false</code></li>
</ul>
</li>
<li><p>instanceOf</p>
<ul>
<li>检查该对象是否是一个特定类型（类类型或接口类型）</li>
</ul>
</li>
<li><p>运算符优先级<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160809133521483"></p>
</li>
</ul>
<h2 id="Java循环结构"><a href="#Java循环结构" class="headerlink" title="Java循环结构"></a>Java循环结构</h2><ul>
<li>三种循环结构：<ul>
<li>while</li>
<li>do…while</li>
<li>for（主要用于数组）</li>
</ul>
</li>
<li>while<ul>
<li>最基本循环</li>
</ul>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">while</span><span class="params">( 布尔表达式 )</span></span> &#123;</span><br><span class="line">    <span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>do…while<ul>
<li>至少执行一次</li>
</ul>
</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">       <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure>
<ul>
<li>for<ul>
<li>for循环执行的次数是在执行前就确定的</li>
</ul>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(初始化; 布尔表达式; 更新)</span></span> &#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>增强for循环<ul>
<li>主要用于数组</li>
</ul>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(声明语句 : 表达式)</span></span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>break</p>
<ul>
<li>跳出一层循环和switch语句块</li>
</ul>
</li>
<li><p>continue</p>
<ul>
<li>跳过一次循环</li>
</ul>
</li>
</ul>
<h2 id="Java分支结构"><a href="#Java分支结构" class="headerlink" title="Java分支结构"></a>Java分支结构</h2><ul>
<li><p>2种分支结构:</p>
<ul>
<li>if…else…</li>
<li>switch</li>
</ul>
</li>
<li><p>if</p>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(布尔表达式)</span></span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式为true将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>if…else…</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(布尔表达式)</span></span>&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式的值为true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式的值为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>if…else if…else</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line">   /<span class="regexp">/如果布尔表达式 1的值为true执行代码</span></span><br><span class="line"><span class="regexp">&#125;else if(布尔表达式 2)&#123;</span></span><br><span class="line"><span class="regexp">   /</span><span class="regexp">/如果布尔表达式 2的值为true执行代码</span></span><br><span class="line"><span class="regexp">&#125;else if(布尔表达式 3)&#123;</span></span><br><span class="line"><span class="regexp">   /</span><span class="regexp">/如果布尔表达式 3的值为true执行代码</span></span><br><span class="line"><span class="regexp">&#125;else &#123;</span></span><br><span class="line"><span class="regexp">   /</span><span class="regexp">/如果以上布尔表达式都不为true执行代码</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>嵌套的if…else</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">if(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line">   /<span class="regexp">//</span><span class="regexp">/如果布尔表达式 1的值为true执行代码</span></span><br><span class="line"><span class="regexp">   if(布尔表达式 2)&#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">//</span><span class="regexp">/如果布尔表达式 2的值为true执行代码</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>switch<ul>
<li>判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</li>
<li>switch语句中的变量类型只能为byte、short、int或者char。</li>
</ul>
</li>
</ul>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">value</span> :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">value</span> :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">//可选</span></span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Number类"><a href="#Number类" class="headerlink" title="Number类"></a>Number类</h2><ul>
<li>Java语言为每一个内置数据类型提供了对应的包装类。</li>
<li>所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类Number的子类。</li>
<li>由编译器特别支持的包装称为<strong>装箱</strong>，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为<strong>包装类</strong>。相似的，编译器也可以把一个对象<strong>拆箱</strong>为内置类型。Number类属于java.lang包。</li>
<li>区分：内置数据类型和对象？</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Integer x</span> = 5;</span><br></pre></td></tr></table></figure>
<h2 id="Character类"><a href="#Character类" class="headerlink" title="Character类"></a>Character类</h2><ul>
<li>用于对单个字符进行操作。</li>
<li>Character 类在对象中包装一个基本类型 char 的值。</li>
<li>需要使用对象，而不是内置数据类型的情况。</li>
<li>注意:String类是不可改变的，所以你一旦创建了String对象，那它的值就无法改变了。 如果需要对字符串做很多修改，那么应该选择使用StringBuffer &amp; StringBuilder 类。</li>
<li>用于获取有关对象的信息的方法称为访问器方法。</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Character ch</span> = <span class="string">'a'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><ul>
<li>在Java中，String属于对象。</li>
<li>创建字符串：<code>String greeting = &quot;Hello world!&quot;;</code></li>
<li>方法：<ul>
<li>字符串长度：str.length()</li>
<li>连接字符串：str.concat()、str1+str2</li>
<li>创建格式化字符串<ul>
<li>printf()</li>
<li>format()</li>
<li>String类的静态方法format()能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.printf(<span class="string">"浮点型变量的的值为 "</span> +</span><br><span class="line">                  <span class="string">"%f, 整型变量的值为 "</span> +</span><br><span class="line">                  <span class="string">" %d, 字符串变量的值为 "</span> +</span><br><span class="line">                  <span class="string">"is %s"</span>, floatVar, intVar, stringVar);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">String fs;</span><br><span class="line">fs = String.format(<span class="string">"浮点型变量的的值为 "</span> +</span><br><span class="line">                   <span class="string">"%f, 整型变量的值为 "</span> +</span><br><span class="line">                   <span class="string">" %d, 字符串变量的值为 "</span> +</span><br><span class="line">                   <span class="string">" %s"</span>, floatVar, intVar, stringVar);</span><br><span class="line">System.out.println(fs);</span><br></pre></td></tr></table></figure>
<h2 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h2><ul>
<li>当对字符串进行修改的时候，需要使用StringBuffer和StringBuilder类。</li>
<li>StringBuilder的方法不是线程安全的（不能同步访问），这一点和StringBuffer不同。</li>
<li>StringBuilder有速度优势，一般使用它。当程序要求线程安全时，必须使用StringBuffer。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">       StringBuffer sBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">" test"</span>);</span><br><span class="line">       sBuffer.append(<span class="string">" String Buffer"</span>);</span><br><span class="line">       System.out.println(sBuffer);  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Java数组"><a href="#Java数组" class="headerlink" title="Java数组"></a>Java数组</h2><ul>
<li>Java数组是用来存储固定大小的同类型元素。</li>
<li>声明数组变量：</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">dataType[] <span class="built_in">array</span>RefVar;   <span class="comment">// 首选的方法</span></span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">dataType <span class="built_in">array</span>RefVar[];  <span class="comment">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建数组（new）</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>RefVar = new dataType[<span class="built_in">array</span>Size];</span><br><span class="line"><span class="comment">// 1. 使用dataType[arraySize]创建了一个数组。</span></span><br><span class="line"><span class="comment">// 2. 把新创建的数组的引用赋值给变量 arrayRefVar。</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建数组和声明数组变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br><span class="line">dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>处理数组<ul>
<li>数组元素类型和大小都是确定的，通常使用基本循环或foreach循环。</li>
<li>foreach循环或者加强型循环，它能在不使用下标的情况下遍历数组。</li>
<li>数组可以作为参数传递给方法。</li>
<li>数组作为函数的返回值。</li>
</ul>
</li>
</ul>
<h2 id="Java日期时间"><a href="#Java日期时间" class="headerlink" title="Java日期时间"></a>Java日期时间</h2><ul>
<li>java.util包提供了Date类来封装当前的日期和时间。 </li>
<li>Date类提供两个构造函数来实例化Date对象。<ul>
<li>第一个构造函数使用当前日期和时间来初始化对象。</li>
<li>第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。</li>
</ul>
</li>
</ul>
<h2 id="Java正则表达式"><a href="#Java正则表达式" class="headerlink" title="Java正则表达式"></a>Java正则表达式</h2><ul>
<li><p>Java正则表达式</p>
<ul>
<li>正则表达式定义了字符串的模式。</li>
<li>正则表达式可以用来搜索、编辑或处理文本。</li>
<li>Java正则表达式和Perl的是最为相似的。</li>
<li>java.util.regex包主要包括以下三个类：<ul>
<li>Pattern类：pattern对象是一个正则表达式的编译表示。</li>
<li>Matcher类：Matcher对象是对输入字符串进行解释和匹配操作的引擎。</li>
<li>PatternSyntaxException类：PatternSyntaxException是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</li>
</ul>
</li>
</ul>
</li>
<li><p>捕获组</p>
<ul>
<li>捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。</li>
</ul>
</li>
</ul>
<h2 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h2><ul>
<li>System.out.println()<ul>
<li>System：系统类</li>
<li>out：标准输出对象</li>
<li>println()：方法</li>
</ul>
</li>
<li>方法的定义：</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 (参数类型 参数名)&#123;</span><br><span class="line">    <span class="params">...</span></span><br><span class="line">    方法体</span><br><span class="line">    <span class="params">...</span></span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>方法调用：<ul>
<li>根据是否返回值，分为2种：<ul>
<li>方法返回一个值的时候，方法调用通常被当做一个值。</li>
<li>如果方法返回值是void，方法调用一定是一条语句。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Java-Stream、File、IO"><a href="#Java-Stream、File、IO" class="headerlink" title="Java Stream、File、IO"></a>Java Stream、File、IO</h2><ul>
<li>Java.io包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。</li>
<li>Java.io包中的流支持很多种格式。</li>
<li>一个流可以理解为一个数据的序列。</li>
<li>读取控制台输入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> </span><br><span class="line">                      InputStreamReader(System.in));</span><br><span class="line"><span class="comment">//从控制台读取单字符</span></span><br><span class="line"><span class="keyword">char</span> c = br.read();</span><br><span class="line"><span class="comment">//从控制台读取字符串</span></span><br><span class="line">String str = br.readLine();</span><br></pre></td></tr></table></figure>
<ul>
<li>控制台输出<ul>
<li>控制台的输出由 print( ) 和println( )完成。这些方法都由类PrintStream 定义，System.out是该类对象的一个引用。</li>
<li>PrintStream 继承了OutputStream类，并且实现了方法write()。这样，write()也可以用来往控制台写操作。</li>
</ul>
</li>
</ul>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="http://www.runoob.com/java/java-tutorial.html" target="_blank" rel="noopener">Java教程</a></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指Offer——Python答案</title>
    <url>/6c52.html</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul>
<li>《剑指Offer》书中所有题目的答案是C++语言编写的。本人在<a href="http://www.nowcoder.com/activity/oj" target="_blank" rel="noopener">牛客网</a>上做题时，用Python编写了一套答案，整理如下。</li>
<li>《剑指Offer》在线刷题网址：<a href="http://www.nowcoder.com/ta/coding-interviews?page=1" target="_blank" rel="noopener">牛客网-剑指Offer</a></li>
<li>牛客网上的剑指Offer题目有一点需要说明：题目不是完全一样，具体要求有点小的改动。不知道是故意为之，还没认真输入题目。</li>
</ul>
<a id="more"></a>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h2><ul>
<li>第一种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 借助于in</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># array 二维列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Find</span><span class="params">(self, array, target)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(len(array)):</span><br><span class="line">            <span class="keyword">if</span> target <span class="keyword">in</span> array[index]:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure>
<ul>
<li>第二种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 线性复杂度</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># array 二维列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Find</span><span class="params">(self, array, target)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="comment"># 标识变量</span></span><br><span class="line">        found = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 检查输入 None，空数组</span></span><br><span class="line">        <span class="keyword">if</span> array == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> found</span><br><span class="line">        nRow = len(array)</span><br><span class="line">        nCol = len(array[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 右上角位置</span></span><br><span class="line">        row = <span class="number">0</span></span><br><span class="line">        col =  nCol<span class="number">-1</span></span><br><span class="line">        <span class="comment"># 从右上角遍历</span></span><br><span class="line">        <span class="keyword">while</span> (row&lt;nRow) <span class="keyword">and</span> (col&gt;=<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">if</span> array[row][col] ==  target:</span><br><span class="line">            	found = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> array[row][col] &gt;  target:</span><br><span class="line">                col = col<span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                row = row+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> found</span><br></pre></td></tr></table></figure>
<h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h2><ul>
<li>第一种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 线性空间复杂度</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># s 源字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> s == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> len(s) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        result = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> item.isspace():</span><br><span class="line">            	result = result+<span class="string">'%20'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = result+item</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<ul>
<li>第二种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># s 源字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">return</span> s.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="从头到尾打印链表"><a href="#从头到尾打印链表" class="headerlink" title="从头到尾打印链表"></a>从头到尾打印链表</h2><ul>
<li>第一种方法：使用insert()方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 返回从尾部到头部的列表值序列，例如[1,2,3]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printListFromTailToHead</span><span class="params">(self, listNode)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        L = []</span><br><span class="line">        head = listNode</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            L.insert(<span class="number">0</span>, head.val)</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure>
<ul>
<li>第二种方法：使用append()和reverse()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 假定是个栈结构，append移动元素少</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 返回从尾部到头部的列表值序列，例如[1,2,3]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printListFromTailToHead</span><span class="params">(self, listNode)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        L = []</span><br><span class="line">        head = listNode</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            L.append(head.val)</span><br><span class="line">            head = head.next</span><br><span class="line">        L.reverse()</span><br><span class="line">        <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure>
<h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 返回构造的TreeNode根节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reConstructBinaryTree</span><span class="params">(self, pre, tin)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> (len(pre) == <span class="number">0</span>) <span class="keyword">or</span> (len(tin) == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            </span><br><span class="line">        rootValue = pre[<span class="number">0</span>]</span><br><span class="line">        root = TreeNode(rootValue)</span><br><span class="line">        <span class="keyword">if</span> len(pre)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        rootTinIndex = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(tin)):</span><br><span class="line">            <span class="keyword">if</span> tin[i] == rootValue:</span><br><span class="line">                rootTinIndex = i</span><br><span class="line">        preStart = <span class="number">1</span></span><br><span class="line">        preEnd = rootTinIndex+<span class="number">1</span></span><br><span class="line">        tinStart = <span class="number">0</span></span><br><span class="line">        tinEnd = rootTinIndex</span><br><span class="line">        <span class="keyword">if</span> rootTinIndex &gt; <span class="number">0</span>:</span><br><span class="line">            root.left = self.reConstructBinaryTree(pre[preStart:preEnd], tin[tinStart:tinEnd])</span><br><span class="line">        <span class="keyword">if</span> rootTinIndex &lt; len(pre):</span><br><span class="line">            root.right = self.reConstructBinaryTree(pre[preEnd:], tin[tinEnd+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
<h2 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    stack1 = []</span><br><span class="line">    stack2 = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        self.stack1.append(node)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># return xx</span></span><br><span class="line">        <span class="keyword">if</span> len(self.stack2) !=  <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.stack2.pop()</span><br><span class="line">        <span class="keyword">elif</span> len(self.stack1) != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">while</span> len(self.stack1):</span><br><span class="line">            	self.stack2.append(self.stack1.pop())</span><br><span class="line">            <span class="keyword">return</span> self.stack2.pop()</span><br></pre></td></tr></table></figure>
<h2 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h2><ul>
<li>第一种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> len(rotateArray) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> min(rotateArray)</span><br></pre></td></tr></table></figure>
<ul>
<li>第二种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> len(rotateArray) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        if len(rotateArray) == 1:</span></span><br><span class="line"><span class="string">            return rotateArray[0];</span></span><br><span class="line"><span class="string">		'''</span></span><br><span class="line">        index1 = <span class="number">0</span></span><br><span class="line">        index2 = len(rotateArray)<span class="number">-1</span></span><br><span class="line">        indexMid = index1</span><br><span class="line">        <span class="keyword">while</span> rotateArray[index1] &gt;= rotateArray[index2]:</span><br><span class="line">            <span class="keyword">if</span> index2-index1 == <span class="number">1</span>:</span><br><span class="line">                indexMid = index2</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            indexMid = (index1+index2)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> rotateArray[indexMid] &gt;= rotateArray[index1]:</span><br><span class="line">                index1 = indexMid</span><br><span class="line">            <span class="keyword">elif</span> rotateArray[indexMid] &lt;= rotateArray[index2]:</span><br><span class="line">                index2 = indexMid </span><br><span class="line">        <span class="keyword">return</span> rotateArray[indexMid]</span><br></pre></td></tr></table></figure>
<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Fibonacci</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        N2 = <span class="number">0</span></span><br><span class="line">        N1 = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> n&gt;<span class="number">1</span>:</span><br><span class="line">            N1 = N1+N2</span><br><span class="line">            N2 = N1-N2</span><br><span class="line">            n = n<span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> N1</span><br></pre></td></tr></table></figure>
<h2 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloor</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        N1 = <span class="number">2</span></span><br><span class="line">        N2 = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> number==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> number==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> number&gt;<span class="number">2</span>:</span><br><span class="line">            N1 = N1+N2</span><br><span class="line">            N2 = N1-N2</span><br><span class="line">            number = number<span class="number">-1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> N1</span><br></pre></td></tr></table></figure>
<h2 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloorII</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="comment"># 规律：f(n) = 2^(n-1)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>**(number<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="矩形覆盖"><a href="#矩形覆盖" class="headerlink" title="矩形覆盖"></a>矩形覆盖</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rectCover</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="comment"># 菲波那切数列</span></span><br><span class="line">        N1 = <span class="number">2</span></span><br><span class="line">        N2 = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> number &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> number == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> N2</span><br><span class="line">        <span class="keyword">if</span> number == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> N1</span><br><span class="line">        <span class="keyword">while</span> number &gt; <span class="number">2</span>:</span><br><span class="line">            N1 = N1+N2</span><br><span class="line">            N2 = N1-N2</span><br><span class="line">            number -=<span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> N1</span><br></pre></td></tr></table></figure>
<h2 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NumberOf1</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        print(type(flag))</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="comment"># int 4字节，4x8=32位</span></span><br><span class="line">        <span class="comment"># python能表示任意大的数字，所以手动限定</span></span><br><span class="line">        maxBit = <span class="number">32</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(maxBit):</span><br><span class="line">            <span class="keyword">if</span> n &amp; flag:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            flag = flag &lt;&lt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>
<h2 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h2><ul>
<li>第一种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Power</span><span class="params">(self, base, exponent)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">return</span> base ** exponent</span><br></pre></td></tr></table></figure>
<ul>
<li>第二种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Power</span><span class="params">(self, base, exponent)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        result = <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">if</span> exponent &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(exponent):</span><br><span class="line">            	result *= base</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(abs(exponent)):</span><br><span class="line">                result *= base</span><br><span class="line">            result = <span class="number">1.0</span>/result</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h2 id="调整数组顺序使奇数位于偶数前面"><a href="#调整数组顺序使奇数位于偶数前面" class="headerlink" title="调整数组顺序使奇数位于偶数前面"></a>调整数组顺序使奇数位于偶数前面</h2><ul>
<li>第一种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reOrderArray</span><span class="params">(self, array)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        oddL = [item <span class="keyword">for</span> item <span class="keyword">in</span> array <span class="keyword">if</span> item % <span class="number">2</span>]</span><br><span class="line">        evenL = [item <span class="keyword">for</span> item <span class="keyword">in</span> array <span class="keyword">if</span> <span class="keyword">not</span> (item % <span class="number">2</span>)]</span><br><span class="line">        result = oddL + evenL</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<ul>
<li>第二种方法：</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># -*- coding:utf<span class="number">-8</span> -*-</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Solution:</span></span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">reOrderArray</span>(<span class="symbol">self, <span class="symbol">array</span></span>):</span><br><span class="line">        # <span class="symbol">write</span> <span class="symbol">code</span> <span class="symbol">here</span></span><br><span class="line">        <span class="symbol">oddL</span> = <span class="symbol">filter</span>(<span class="symbol">lambda</span> <span class="symbol">x: <span class="symbol">x</span></span>%<span class="symbol">2, <span class="symbol">array</span></span>)</span><br><span class="line">        <span class="symbol">evenL</span> = <span class="symbol">filter</span>(<span class="symbol">lambda</span> <span class="symbol">x:<span class="symbol">not</span></span> (<span class="symbol">x</span>%<span class="symbol">2</span>), <span class="symbol">array</span>)</span><br><span class="line">        <span class="symbol">result</span> = <span class="symbol">oddL</span> + <span class="symbol">evenL</span></span><br><span class="line">        <span class="symbol">return</span> <span class="symbol">result</span></span><br></pre></td></tr></table></figure>
<h2 id="链表中倒数第k个结点"><a href="#链表中倒数第k个结点" class="headerlink" title="链表中倒数第k个结点"></a>链表中倒数第k个结点</h2><ul>
<li>第一种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FindKthToTail</span><span class="params">(self, head, k)</span>:</span></span><br><span class="line">        <span class="comment"># 检查输入：空表</span></span><br><span class="line">        <span class="keyword">if</span>  <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="comment"># 检查输入：k&lt;=0</span></span><br><span class="line">        <span class="keyword">if</span> k &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> ListNode(<span class="number">0</span>).next</span><br><span class="line">        pNode = head</span><br><span class="line">        p1 = head</span><br><span class="line">        p2 = head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k<span class="number">-1</span>):</span><br><span class="line">            <span class="comment"># 检查k大于链表长度的情况</span></span><br><span class="line">            <span class="keyword">if</span> p1.next:</span><br><span class="line">            	p1 = p1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> p1.next</span><br><span class="line">        <span class="keyword">while</span> p1.next :</span><br><span class="line">            p1 = p1.next</span><br><span class="line">            p2 = p2.next</span><br><span class="line">        <span class="keyword">return</span> p2</span><br></pre></td></tr></table></figure>
<ul>
<li>第二种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FindKthToTail</span><span class="params">(self, head, k)</span>:</span></span><br><span class="line">        <span class="comment"># 检查输入：空表</span></span><br><span class="line">        <span class="keyword">if</span>  <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="comment"># 检查输入：k&lt;=0</span></span><br><span class="line">        <span class="keyword">if</span> k &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> ListNode(<span class="number">0</span>).next</span><br><span class="line">        <span class="comment"># 栈</span></span><br><span class="line">        stack1 = []</span><br><span class="line">        pNode = head</span><br><span class="line">        stack1.append(pNode)</span><br><span class="line">        <span class="keyword">while</span> pNode.next:</span><br><span class="line">            pNode = pNode.next</span><br><span class="line">            stack1.append(pNode)</span><br><span class="line">        <span class="keyword">if</span> k &lt;= len(stack1):</span><br><span class="line">            <span class="keyword">return</span> stack1[-k]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ListNode(<span class="number">0</span>).next</span><br></pre></td></tr></table></figure>
<h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 返回ListNode</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReverseList</span><span class="params">(self, pHead)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="comment"># 检查输入:空链表</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pHead:</span><br><span class="line">            <span class="keyword">return</span> pHead</span><br><span class="line">        pNode = pHead</span><br><span class="line">        <span class="keyword">while</span> pNode:</span><br><span class="line">            pAfter = pNode.next</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pAfter:</span><br><span class="line">                pReversedHead = pNode</span><br><span class="line">            <span class="keyword">if</span> pNode == pHead:</span><br><span class="line">                pNode.next = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pNode.next = pBefore</span><br><span class="line">            pBefore = pNode</span><br><span class="line">            pNode = pAfter</span><br><span class="line">        <span class="keyword">return</span> pReversedHead</span><br></pre></td></tr></table></figure>
<h2 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a>合并两个排序的链表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 返回合并后列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Merge</span><span class="params">(self, pHead1, pHead2)</span>:</span></span><br><span class="line">        <span class="comment"># 检查输入：空链表</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pHead1:</span><br><span class="line">            <span class="keyword">return</span> pHead2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pHead2:</span><br><span class="line">            <span class="keyword">return</span> pHead1</span><br><span class="line">        <span class="comment"># 确定pHead</span></span><br><span class="line">        pNode1 = pHead1</span><br><span class="line">        pNode2 = pHead2</span><br><span class="line">        <span class="keyword">if</span> pNode1.val &lt;= pNode2.val:</span><br><span class="line">            pNode = pNode1</span><br><span class="line">            pNode1 = pNode1.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pNode = pNode2</span><br><span class="line">            pNode2 = pNode2.next</span><br><span class="line">        pHead = pNode</span><br><span class="line">        <span class="keyword">while</span> pNode1 <span class="keyword">or</span> pNode2:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pNode1:</span><br><span class="line">                pNode.next = pNode2</span><br><span class="line">                pNode2 = pNode2.next</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> pNode2:</span><br><span class="line">                pNode.next = pNode1</span><br><span class="line">                pNode1 = pNode1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> pNode1.val &lt;= pNode2.val:</span><br><span class="line">                    pNode.next = pNode1</span><br><span class="line">                    pNode1 = pNode1.next</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pNode.next = pNode2</span><br><span class="line">                    pNode2 = pNode2.next</span><br><span class="line">            pNode = pNode.next</span><br><span class="line">        <span class="keyword">return</span> pHead</span><br></pre></td></tr></table></figure>
<h2 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a>树的子结构</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DoesTree1HaveTree2</span><span class="params">(self, pRoot1, pRoot2)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRoot2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRoot1:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> pRoot1.val != pRoot2.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.DoesTree1HaveTree2(pRoot1.left, pRoot2.left) <span class="keyword">and</span> self.DoesTree1HaveTree2(pRoot1.right, pRoot2.right)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HasSubtree</span><span class="params">(self, pRoot1, pRoot2)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        result = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> pRoot1 <span class="keyword">and</span> pRoot2:</span><br><span class="line">            <span class="keyword">if</span> pRoot1.val == pRoot2.val:</span><br><span class="line">                result = self.DoesTree1HaveTree2(pRoot1, pRoot2)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">                result = self.HasSubtree(pRoot1.left, pRoot2)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">                result = self.HasSubtree(pRoot1.right, pRoot2)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h2 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a>包含min函数的栈</h2><ul>
<li>第一种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        self.data.append(node)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">return</span> self.data.pop()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">return</span> self.data[<span class="number">-1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">min</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">return</span> min(self.data)</span><br></pre></td></tr></table></figure>
<ul>
<li>第二种方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 借助于辅助栈，操作的时间复杂度都为O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stackData = []</span><br><span class="line">        self.stackMin = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        self.stackData.append(node)</span><br><span class="line">        <span class="keyword">if</span> (len(self.stackMin)==<span class="number">0</span>) <span class="keyword">or</span> (node&lt;self.stackMin[<span class="number">-1</span>]):</span><br><span class="line">            self.stackMin.append(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.stackMin.append(self.stackMin[<span class="number">-1</span>])</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> len(self.stackData) &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Stack is empty, can't pop."</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.stackMin.pop()</span><br><span class="line">        <span class="keyword">return</span> self.stackData.pop()</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">return</span> self.stackData[<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">min</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> len(self.stackMin) &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Stack is empty, can't pop."</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> self.stackMin[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<h2 id="栈的压入、弹出序列"><a href="#栈的压入、弹出序列" class="headerlink" title="栈的压入、弹出序列"></a>栈的压入、弹出序列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stackT =[]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">IsPopOrder</span><span class="params">(self, pushV, popV)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        pushV.reverse()</span><br><span class="line">        popV.reverse()</span><br><span class="line">        <span class="keyword">while</span> len(pushV)&gt;<span class="number">0</span>:</span><br><span class="line">            self.stackT.append(pushV.pop())</span><br><span class="line">            <span class="keyword">while</span> (len(self.stackT)&gt;<span class="number">0</span>) <span class="keyword">and</span> (len(popV)&gt;<span class="number">0</span>) <span class="keyword">and</span> (self.stackT[<span class="number">-1</span>] == popV[<span class="number">-1</span>]):</span><br><span class="line">                self.stackT.pop()</span><br><span class="line">                popV.pop()</span><br><span class="line">        <span class="keyword">if</span> len(self.stackT) == <span class="number">0</span>:</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure>
<h2 id="从上往下打印二叉树"><a href="#从上往下打印二叉树" class="headerlink" title="从上往下打印二叉树"></a>从上往下打印二叉树</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 返回从上到下每个节点值列表，例：[1,2,3]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.queue = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PrintFromTopToBottom</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        self.queue.append(root)</span><br><span class="line">        <span class="keyword">while</span> len(self.queue) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#print self.queue[0]</span></span><br><span class="line">            tmpNode = self.queue[<span class="number">0</span>]</span><br><span class="line">            result.append(tmpNode.val)</span><br><span class="line">            <span class="keyword">if</span> tmpNode.left:</span><br><span class="line">                self.queue.append(tmpNode.left)</span><br><span class="line">            <span class="keyword">if</span> tmpNode.right:</span><br><span class="line">                self.queue.append(tmpNode.right)</span><br><span class="line">            self.queue.remove(self.queue[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h2 id="二叉搜索树的后序遍历序列"><a href="#二叉搜索树的后序遍历序列" class="headerlink" title="二叉搜索树的后序遍历序列"></a>二叉搜索树的后序遍历序列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">VerifySquenceOfBST</span><span class="params">(self, sequence)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sequence:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        length = len(sequence)</span><br><span class="line">        <span class="keyword">if</span> length&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        rootValue = sequence[length<span class="number">-1</span>]</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> range(length<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> sequence[i] &gt; rootValue:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i = i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, length<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> sequence[j] &lt; rootValue:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        leftFlag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            leftFlag = self.VerifySquenceOfBST(sequence[:i])</span><br><span class="line">        rightFlag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; length<span class="number">-1</span>:</span><br><span class="line">            rightFlag = self.VerifySquenceOfBST(sequence[i:length<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> leftFlag <span class="keyword">and</span> rightFlag</span><br></pre></td></tr></table></figure>
<p><strong>(持续更新中……)</strong></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记——Git</title>
    <url>/e9ae.html</url>
    <content><![CDATA[<h1 id="一、安装和设置"><a href="#一、安装和设置" class="headerlink" title="一、安装和设置"></a>一、安装和设置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu安装Git</span></span><br><span class="line">sudo apt-get install git -y</span><br><span class="line"><span class="comment"># 设置全局用户名和邮件，该机器上所有仓库使用该配置</span></span><br><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="二、创建版本库"><a href="#二、创建版本库" class="headerlink" title="二、创建版本库"></a>二、创建版本库</h1><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个空目录</span></span><br><span class="line">mkdir learngit</span><br><span class="line"><span class="built_in">cd</span> learngit</span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># 将目录变成“Git仓库”</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
<ul>
<li>该Git库是空仓库。不要私自修改.git目录，Git用它来跟踪管理版本库。</li>
<li>不是必须在空目录下创建Git仓库。</li>
<li>所有的版本控制系统，其实只能跟踪文本文件的改动，Git也是如此。对于图片和视频等二进制文件，可以使用Git管理，但没法跟踪文件的变化。</li>
</ul>
<h2 id="添加和提交文件"><a href="#添加和提交文件" class="headerlink" title="添加和提交文件"></a>添加和提交文件</h2><ul>
<li>创建readme.txt，添加如下内容。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure>
<ul>
<li>使用下面的命令添加和提交文件：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加到仓库</span></span><br><span class="line">git add readme.txt</span><br><span class="line"><span class="comment"># 提交到仓库</span></span><br><span class="line">git commit –m “wrote a readme file”</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-m “….”</code>是注释，便于查找改动。推荐使用。</li>
<li><code>git commit</code> 相当于保存一个快照，可以用于恢复。</li>
<li>为什么Git添加文件需要add、commit两步？因为commit可以一次提交很多文件。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多次add，一次提交</span></span><br><span class="line">git add file1.txt</span><br><span class="line">git add file2.txt file3.txt</span><br><span class="line">git commit –m “add 3 file.”</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看仓库状态和文件变化</span></span><br><span class="line">* 要随时掌握工作区的状态，使用git status命令。</span><br><span class="line">* 如果git status告诉你有文件被修改过，使用git diff查看修改内容。</span><br><span class="line">* 修改readme.txt，如下所示。</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure>
<ul>
<li>输入以下命令练习。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 掌握仓库的当前状态</span></span><br><span class="line">git status <span class="comment">#红色</span></span><br><span class="line"><span class="comment"># 查看修改内容</span></span><br><span class="line"><span class="comment"># git diff的显示格式是Unix通用的diff格式</span></span><br><span class="line">git diff readme.txt</span><br><span class="line"><span class="comment"># 添加到仓库</span></span><br><span class="line">git status <span class="comment">#绿色</span></span><br><span class="line"><span class="comment"># 提交到仓库</span></span><br><span class="line">git commit -m “add distributed”</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<h1 id="三、时光穿梭机"><a href="#三、时光穿梭机" class="headerlink" title="三、时光穿梭机"></a>三、时光穿梭机</h1><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><ul>
<li><code>git log</code> 显示提交日志（从最近到最远）</li>
<li><code>git log –pretty=online</code> 精简显示</li>
<li><code>git reset</code> 版本回退</li>
<li>类似<code>0347cda67cf047da1ad612ab2319e2ef2bf8cff8</code>是<strong>commit id</strong>（版本号）。之所以不用1,2…，是为了防止多人在同一个仓库工作时出现冲突。</li>
<li>Git把每次提交串成一条时间线。</li>
<li>在Git中，用HEAD表示当前版本，也就是最新的提交。上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本就是HEAD~100。</li>
<li>只要记得版本号，回退之后还可以恢复。（命令行窗口未关或提前保存了git log）</li>
<li>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向当前版本，改为指向上一个版本。</li>
<li>让HEAD指向哪个版本号，你就把当前版本定位在哪。</li>
<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset —hard commit_id。</li>
<li>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</li>
<li>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</li>
</ul>
<p>修改readme.txt，如下所示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br></pre></td></tr></table></figure>
<p>输入以下命令练习。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git add readme.txt</span><br><span class="line">git commit –m “append GPL”</span><br><span class="line"><span class="comment"># 查看提交日志</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 保存提交日志</span></span><br><span class="line">git <span class="built_in">log</span> &gt; ../log.txt</span><br><span class="line"><span class="comment"># 精简显示日志</span></span><br><span class="line">git <span class="built_in">log</span> –pretty=oneline</span><br><span class="line"><span class="comment"># 回退到上个版本</span></span><br><span class="line">git reset –hard HEAD^</span><br><span class="line"><span class="comment"># 查看提交日志（最新的已经没有了）</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 恢复最新版本（前提：命令行窗口未关）</span></span><br><span class="line"><span class="comment"># 查看最新版本的版本号。假定为: 73bdb9efc29b3ed95567e57e4640418e8e809307</span></span><br><span class="line">git reset –hard 73bdb9efc</span><br><span class="line"><span class="comment"># 如果命令行窗口已关，通过git reflog命令查看历史命令（包含版本号）</span></span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><ul>
<li>Git区别于其它版本控制器之处在于：Git有暂存区。</li>
<li>工作区：在电脑里能看到的目录。</li>
<li>版本库：工作区中的隐藏目录.git。</li>
<li>版本库中有：暂存区（stage或index），master分支，以及指向master的指针HEAD。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160802105724206"></li>
<li>提交文件到Git仓库分为2步：git add是把文件修改添加到暂存区；git commit是把暂存区的所有内容提交到当前分支。</li>
<li>master分支是创建Git版本库时，Git自动创建的。</li>
<li>简单理解：需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改到当前分支。</li>
</ul>
<p>修改readme.txt，如下所示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br></pre></td></tr></table></figure>
<ul>
<li>在工作区新增文件LICENSE，内容随便。</li>
</ul>
<p>执行以下命令，检查状态和添加文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git add readme.txt</span><br><span class="line">git add LICENSE</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<ul>
<li>暂存区的状态如下图所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160802105927894"></li>
<li>git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m “understand how stage works”</span><br><span class="line">git stauts</span><br></pre></td></tr></table></figure>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160802110018172"></p>
<ul>
<li>暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。</li>
</ul>
<h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><ul>
<li>Git比其它版本控制系统优秀的地方在于：GTI跟踪并管理修改，而非文件。</li>
<li>下面的例子说明了这个过程。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改readme.txt</span></span><br><span class="line">git add readme.txt</span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 继续修改</span></span><br><span class="line">git commit -m “git tracks changes”</span><br><span class="line">git status</span><br><span class="line"><span class="comment">#说明：第一次修改提交了，第二次修改没有提交</span></span><br><span class="line"><span class="comment"># 检查工作区和版本库里最新版的区别</span></span><br><span class="line">git diff HEAD -- readme.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>Git跟踪修改原理：每次修改，如果不add到暂存区，那就不会加入到commit中。</li>
</ul>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><ul>
<li>git checkout — filename</li>
<li>git checkout – readme.txt 就是把readme.txt文件在工作区的修改全部撤销。分两种情况：第一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；第二种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。总之，就是让这个文件回到最近一次git commit或git add时的状态。</li>
<li>如果想删除已经git add，但是没有git commit的内容。就使用git reset HEAD readme.txt命令。git reset HEAD filename 可以把暂存的修改撤销掉，重新放回工作区。</li>
<li>git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。</li>
<li>如果已经git commit，但是没有把自己的本地库推送到远程。可以通过git reset实现版本回退。</li>
<li>如果已经推送到远程，就没有办法删除了。</li>
</ul>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><ul>
<li>真的删除文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm test.txt</span><br><span class="line">git rm test.txt</span><br><span class="line">git commit -m “remove test.txt”</span><br></pre></td></tr></table></figure>
<ul>
<li>误删文件，恢复到最新版</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm test.txt</span><br><span class="line"><span class="comment"># 发现删错了，恢复</span></span><br><span class="line">git checkout -- tes.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</li>
</ul>
<h1 id="四、远程仓库"><a href="#四、远程仓库" class="headerlink" title="四、远程仓库"></a>四、远程仓库</h1><ul>
<li>Git杀手级功能：远程仓库。Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。</li>
<li>最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。</li>
<li>实际情况：找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。</li>
<li>Github，提供了Git仓库托管服务。国内有类似的coding。</li>
<li>本地Git仓库和GitHub仓库之间的传输是通过SSH加密的。</li>
<li>配置：<ul>
<li>第1步：创建SSH Key。</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建SSH Key</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-keygen -t rsa -C “youremail@example.com” </span><br><span class="line"><span class="comment">#~/.ssh目录下生成两个文件：id_rsa（私匙）和id_rsa.pub（公匙）</span></span><br></pre></td></tr></table></figure>
<pre><code>* 第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面；然后，点“Bew SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
</code></pre><ul>
<li>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的。</li>
<li>Github上的免费托管的Git仓库是公开的，别人可以看到。国内的coding.net可以免费托管私有仓库。</li>
</ul>
<h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><ul>
<li>在Github上创建一个远程库，可以克隆这个库，或者和本地的仓库进行合并。<ul>
<li>在Github上创建远程库learngit；</li>
<li>上传自己的SSH公匙；</li>
<li>关联本地仓库和远程仓库。</li>
<li>推送代码</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关联远程库</span></span><br><span class="line">git remote add origin git@github.com:xuezhisd/learngit.git</span><br><span class="line"><span class="comment">#关联后，远程库的名字就是origin</span></span><br><span class="line"><span class="comment"># 推送本地库内容到远程库上</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="comment"># -u把本地的master分支和远程的master分支关联起来，简化以后推送命令。</span></span><br><span class="line"><span class="comment"># 以后使用下面命令推送</span></span><br><span class="line">git push orgin master</span><br></pre></td></tr></table></figure>
<ul>
<li>本地库的内容推送到远程，用git push命令。</li>
</ul>
<h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><ul>
<li>要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。<br>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:xuezhisd/learngit.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/xuezhisd/learngit.git</span><br><span class="line"><span class="built_in">cd</span> learngit</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><ul>
<li>分支==平行宇宙</li>
<li>通过创建自己的分支，既可以随时提交，又能避免丢失每天进度的风险。直到开发完成后，在一次性合并到原来的分支上。既安全，有不影响别人工作。</li>
<li>Git分支优点：无论创建、切换和删除分支，1秒完成。</li>
</ul>
<h2 id="创建于合并分支"><a href="#创建于合并分支" class="headerlink" title="创建于合并分支"></a>创建于合并分支</h2><ul>
<li>每次提交串起来，就是一个分支。Git中的master分支是主分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</li>
<li>Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160802110930107"></li>
<li>创建dev分支，并把HEAD指向dev：<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160802110957404"></li>
<li>dev上的工作完成了，就可以把dev合并到master上：<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160802111026992"></li>
<li>合并完分支后，可以删除dev分支。删除dev分支就是把dev指针给删掉：<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160802111056218"></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建dev分支，然后切换到dev分支</span></span><br><span class="line"><span class="comment"># -b表示创建并切换分支</span></span><br><span class="line">git checkout -b dev</span><br><span class="line"><span class="comment"># 查看当前分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 修改readme.txt</span></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git add readme.txt</span><br><span class="line">git commit -m “branch <span class="built_in">test</span>”</span><br><span class="line"><span class="comment"># 切回master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 将dev分支的工作合并到master分支</span></span><br><span class="line"><span class="comment"># 注意：当前在master分支中</span></span><br><span class="line">git merge dev</span><br><span class="line"><span class="comment"># 删除dev分支</span></span><br><span class="line">git branch -d dev</span><br><span class="line"><span class="comment"># 查看剩余分支</span></span><br><span class="line">git branch</span><br></pre></td></tr></table></figure>
<ul>
<li>git merge命令用于合并指定分支到当前分支。</li>
</ul>
<h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><ul>
<li>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</li>
<li>用git log —graph命令可以看到分支合并图。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加分支</span></span><br><span class="line">git checkout -b feature1</span><br><span class="line"><span class="comment">#readme.txt最后一行添加</span></span><br><span class="line"><span class="comment">#Creating a new branch is quick AND simple</span></span><br><span class="line"><span class="comment">#提交</span></span><br><span class="line">git add readme.txt</span><br><span class="line">git commit -m “AND simple”</span><br><span class="line"><span class="comment">#切回master</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment">#readme.txt最后一行添加</span></span><br><span class="line"><span class="comment">#Creating a new branch is quick &amp; simple.</span></span><br><span class="line">gti add readme.txt</span><br><span class="line">git commit -m “&amp; simple”</span><br><span class="line"><span class="comment"># 此时，master分支和feature1分支各自有了新的提交。此时，快速合并无法执行</span></span><br><span class="line"><span class="comment"># 尝试合并</span></span><br><span class="line">git merge feature1</span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 查看冲突内容，修改为</span></span><br><span class="line"><span class="comment"># Creating a new branch is quick and simple.</span></span><br><span class="line"><span class="comment"># 重新提交</span></span><br><span class="line">git add readme.txt</span><br><span class="line">git commit -m “conflict fixed”</span><br><span class="line"><span class="comment"># 查看分支合并情况</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty-oneline --abbrev-commit</span><br><span class="line"><span class="comment"># 删除feature1分支</span></span><br><span class="line">git branch -d feature1</span><br></pre></td></tr></table></figure>
<h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><ul>
<li>分支管理的几个基本原则：<ul>
<li>master分支应该是稳定的，仅用于发布新版本，不用来干活；</li>
<li>平时大家都在dev分支上干活。发布新版本时，再合并到master分支上。</li>
</ul>
</li>
<li>强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建并切换dev分支</span></span><br><span class="line">git checkout -b dev</span><br><span class="line"><span class="comment"># 随便修改readme.txt文件</span></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git add readme.txt</span><br><span class="line">git commit -m “add merge”</span><br><span class="line"><span class="comment"># 切回master分支</span></span><br><span class="line"><span class="comment"># 合并dev分支</span></span><br><span class="line"><span class="comment"># --no-ff参数：表示禁用Fast forward</span></span><br><span class="line">git merge --no-ff -m “merge with no-ff” dev</span><br><span class="line"><span class="comment"># 查看分支历史</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>
<ul>
<li>Git分支十分强大，在团队开发中应该充分应用。</li>
<li>合并分支时，加上—no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。</li>
</ul>
<h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2><ul>
<li>鉴于Git的分支如此强大，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</li>
<li>先将正在工作现场“储藏”起来，等修复完Bug之后，再恢复现场，继续工作。</li>
<li>git stash 把当前工作现场“储藏”起来，等以后恢复现场后继续工作。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保存工作现场</span></span><br><span class="line">git stash</span><br><span class="line"><span class="comment"># 查看工作区，就是干净的，可以放心创建分支修复Bug</span></span><br><span class="line"><span class="comment"># 假定需从master分支上修复，就从master创建临时分支</span></span><br><span class="line"><span class="comment"># 切回master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 创建并切到issue-101分支（Bug分支）</span></span><br><span class="line">git checkout -b issue-101</span><br><span class="line"><span class="comment"># 修改Bug</span></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git add readme.txt</span><br><span class="line">git commit -m “fix bug 101”</span><br><span class="line"><span class="comment"># 切回master分支，合并</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge --no-ff -m “merged bug fix 101” issue-101</span><br><span class="line"><span class="comment"># 删除Bug分支</span></span><br><span class="line">git branch -d issue-101</span><br><span class="line"><span class="comment"># 切回dev分支</span></span><br><span class="line">git checkout dev</span><br><span class="line"><span class="comment"># 查看装填，此时是干净的</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 查看工作现场（此时工作现场存在）</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="comment"># 恢复现场，并删除stash内容</span></span><br><span class="line">git stash pop</span><br><span class="line"><span class="comment"># 查看工作现场（此时无stash内容了）</span></span><br><span class="line">git stash list</span><br></pre></td></tr></table></figure>
<ul>
<li>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</li>
<li>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</li>
</ul>
<h2 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h2><ul>
<li>每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为Vulan功能创建并切换分支</span></span><br><span class="line">git checkout -b feature-vulcan</span><br><span class="line"><span class="comment">#开发功能</span></span><br><span class="line"><span class="comment">#开发完毕，提交</span></span><br><span class="line">git add vulcan.py</span><br><span class="line">git status</span><br><span class="line">git commit -m “add feature vulcan”</span><br><span class="line"><span class="comment"># 切回dev分支</span></span><br><span class="line">git checkout dev</span><br><span class="line"><span class="comment">#因某些状况，新功能取消，就地销毁该分支</span></span><br><span class="line">git branch -D feature-vulcan</span><br></pre></td></tr></table></figure>
<ul>
<li>开发一个新feature，最好新建一个分支；</li>
<li>如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。</name></li>
</ul>
<h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><ul>
<li>从远程仓库克隆时，Git自动把本地的master分支和远程的master分支对应起来，并且，远程仓库的默认名称是origin。</li>
<li><strong>推送分支</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看远程库信息</span></span><br><span class="line">git remote</span><br><span class="line"><span class="comment"># 查看更详细的远程库信息</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="comment"># 推送master分支到远程库master</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment"># 推送dev分支到远程库dev</span></span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>抓取分支</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆远程库</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:xuezhisd/learngit.git</span><br><span class="line"><span class="comment"># 从远程库克隆时，默认只有master分支</span></span><br><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment">#在dev分支上开发，就必须创建远程origin的dev分支到本地</span></span><br><span class="line">git checkout -b dev origin/dev</span><br><span class="line"><span class="comment"># 多人协作时，可能同时修改了dev分支中的同一文件，这时就会推送失败</span></span><br><span class="line"><span class="comment"># 此时需要先抓取分支</span></span><br><span class="line"><span class="comment"># 地dev分支与远程origin/dev分支的链接</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream dev origin/dev</span><br><span class="line">git pull</span><br><span class="line"><span class="comment"># 有冲突，需要手动解决，再push</span></span><br></pre></td></tr></table></figure>
<h1 id="五、标签管理"><a href="#五、标签管理" class="headerlink" title="五、标签管理"></a>五、标签管理</h1><ul>
<li>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。标签也是版本库的一个快照。</li>
<li>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像，但是分支可以移动，标签不能移动）。</li>
<li>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</li>
<li>tag如下图所示：<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160802112427859"></li>
</ul>
<h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><ul>
<li>首先，切到需要打标签的分支上：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看分支情况</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 切换</span></span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure>
<ul>
<li>然后，使用命令<code>git tag name</code>打标签：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag v1.0</span><br></pre></td></tr></table></figure>
<ul>
<li>查看所有的标签：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>
<ul>
<li>默认标签是打在最新提交的commit上。如果想给历史commit打标签，需要先找到它的<code>commit id</code>，然后打标签：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找标签</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline -abbrev-commit</span><br><span class="line"><span class="comment"># 为历史提交打标签</span></span><br><span class="line"><span class="comment"># 加入想打标签的commit id是6224937</span></span><br><span class="line">git tag v0.9 62249</span><br><span class="line"><span class="comment"># 查看所有标签</span></span><br><span class="line"><span class="comment"># 注：标签按字母顺序列出</span></span><br><span class="line">git tag</span><br><span class="line"><span class="comment"># 查看标签信息</span></span><br><span class="line">git show v0.9</span><br></pre></td></tr></table></figure>
<ul>
<li>创建带注释的标签：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建带注释的标签</span></span><br><span class="line">git tag -a v0.1 -m <span class="string">"version 0.1 released"</span> 3628164</span><br><span class="line"><span class="comment"># 查看标签信息</span></span><br><span class="line">git show v0.1</span><br></pre></td></tr></table></figure>
<ul>
<li>使用PGP私匙签名打标签：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -m 用私匙签名一个标签</span></span><br><span class="line">fec145a是commit id</span><br><span class="line">git tag -s -m <span class="string">"signed version 0.2 released"</span> fec145a</span><br><span class="line"><span class="comment"># 查看PGP签名信息</span></span><br><span class="line">git show v0.2</span><br></pre></td></tr></table></figure>
<h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><ul>
<li>标签打错了，删除标签：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -d v0.1</span><br></pre></td></tr></table></figure>
<ul>
<li>创建的标签只存储在本地，不会自动推送到远程。</li>
<li>将某个标签推送到远程：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推送v1.0标签</span></span><br><span class="line">git push origin v1.0</span><br><span class="line"><span class="comment"># 推送所有标签（为上传的）</span></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>
<ul>
<li>删除远程标签</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先删除本地标签</span></span><br><span class="line">git tag -d v0.9</span><br><span class="line"><span class="comment"># 再从远程删除</span></span><br><span class="line">git push origin :refs/tags/v0.9</span><br></pre></td></tr></table></figure>
<h1 id="六、参考"><a href="#六、参考" class="headerlink" title="六、参考"></a>六、参考</h1><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程——廖雪峰</a></li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在ipython或python中使用Spark</title>
    <url>/777a.html</url>
    <content><![CDATA[<h1 id="如何在ipython中使用spark"><a href="#如何在ipython中使用spark" class="headerlink" title="如何在ipython中使用spark"></a>如何在ipython中使用spark</h1><ul>
<li>说明：<ul>
<li>spark 1.6.0</li>
<li>scala 2.10.5</li>
<li>spark安装路径是<code>/usr/local/spark</code>；已经在<code>.bashrc</code>中配置了<code>SPARK_HOME</code>环境变量。</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ul>
<li><code>/usr/local/spark/bin/pyspark</code>默认打开的是python，而不是ipython。通过在pyspark文件中添加一行，来使用ipython打开。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp pyspark ipyspark</span><br><span class="line">vi ipyspark</span><br><span class="line"><span class="comment"># 在最前面添加</span></span><br><span class="line">IPYTHON=1</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">ipyspark</span><br></pre></td></tr></table></figure>
<h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><ul>
<li>通过为spark创建一个ipython 配置的方式实现。</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为spark创建一个ipython 配置</span></span><br><span class="line">ipython<span class="built_in"> profile </span>create spark</span><br><span class="line"><span class="comment"># 创建启动配置文件</span></span><br><span class="line">cd ~/.config/ipython/profile_spark/startup</span><br><span class="line">vi 00-pyspark-setup.py</span><br></pre></td></tr></table></figure>
<ul>
<li>在00-pyspark-setup.py中添加如下内容：</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line">import sys</span><br><span class="line"># Configure the environment</span><br><span class="line"><span class="keyword">if</span> <span class="string">'SPARK_HOME'</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">os</span>.environ:</span><br><span class="line">    <span class="built_in">os</span>.environ[<span class="string">'SPARK_HOME'</span>] = <span class="string">'/srv/spark'</span></span><br><span class="line"># Create a variable <span class="keyword">for</span> our root <span class="built_in">path</span></span><br><span class="line">SPARK_HOME = <span class="built_in">os</span>.environ[<span class="string">'SPARK_HOME'</span>]</span><br><span class="line"># Add the PySpark/py4j to the Python Path</span><br><span class="line">sys.<span class="built_in">path</span>.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="built_in">os</span>.<span class="built_in">path</span>.join(SPARK_HOME, <span class="string">"python"</span>, <span class="string">"pyspark"</span>))</span><br><span class="line">sys.<span class="built_in">path</span>.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="built_in">os</span>.<span class="built_in">path</span>.join(SPARK_HOME, <span class="string">"python"</span>, <span class="string">"lib"</span>, <span class="string">"py4j-0.9-src.zip"</span>))</span><br><span class="line">sys.<span class="built_in">path</span>.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="built_in">os</span>.<span class="built_in">path</span>.join(SPARK_HOME, <span class="string">"python"</span>))</span><br></pre></td></tr></table></figure>
<ul>
<li>启动ipython</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ipython</span> –profile spark</span><br></pre></td></tr></table></figure>
<h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><ul>
<li>在ipython中输入一下命令，如果下面的程序执行完后输出一个数字，说明正确。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span>  SparkContext</span><br><span class="line">sc = SparkContext( <span class="string">'local'</span>, <span class="string">'pyspark'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isprime</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    check if integer n is a prime</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># make sure n is a positive integer</span></span><br><span class="line">    n = abs(int(n))</span><br><span class="line">    <span class="comment"># 0 and 1 are not primes</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 2 is the only even prime number</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># all other even numbers are not primes</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> n &amp; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># for all odd numbers</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>, int(n**<span class="number">0.5</span>)+<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an RDD of numbers from 0 to 1,000,000</span></span><br><span class="line">nums = sc.parallelize(xrange(<span class="number">1000000</span>))</span><br><span class="line"><span class="comment"># Compute the number of primes in the RDD</span></span><br><span class="line"><span class="keyword">print</span> “Result: ”, nums.filter(isprime).count()</span><br></pre></td></tr></table></figure>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><ul>
<li>将上面的程序放入test.py文件，执行命令<code>python test.py</code>。发现错误。因为没有将pyspark路径加入<code>PYTHONPATH</code>环境变量。</li>
<li>在~/.bashrc或/etc/profile中添加如下内容:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python can call pyspark directly</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$SPARK_HOME</span>/python:<span class="variable">$SPARK_HOME</span>/python/pyspark:<span class="variable">$SPARK_HOME</span>/python/lib/py4j-0.9-src.zip:<span class="variable">$PYTHONPATH</span></span><br></pre></td></tr></table></figure>
<ul>
<li>执行如下命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使配置生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 测试程序</span></span><br><span class="line">python test.py</span><br></pre></td></tr></table></figure>
<ul>
<li>此时，已经能够运行了。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何安装Hadoop 2.6.0完全分布式？</title>
    <url>/e6d7.html</url>
    <content><![CDATA[<blockquote>
<p>本教程是关于如何在Ubuntu中搭建完全分布式Hadoop2.6.*环境的完整教程。</p>
</blockquote>
<h2 id="一、环境说明"><a href="#一、环境说明" class="headerlink" title="一、环境说明"></a>一、环境说明</h2><ul>
<li>操作系统：Ubuntu 14.04<br>  注：其它版本的Ubuntu安装过程一样</li>
<li>虚拟机：VMware Workstation或VirtualBox<br>  注：VMware Workstation的功能更强大，但是软件体积也比较大；而且在Ubuntu中我没有安装成功。VirtualBox软件体积小，更加灵活好用，而且可以跨平台使用。但是VirtualBox有些功能不支持，比如Linux版本的VirtualBox不支持文件拖拽和共享粘贴板功能。另外，Ubuntu版VirtualBox5.1存在问题，安装增强工具包之后无法启动。建议安装VirtualBox5.0。</li>
<li>JDK：Java 1.8</li>
<li>集群节点：2个（master, slave1）</li>
</ul>
<a id="more"></a>
<h2 id="二、安装虚拟机"><a href="#二、安装虚拟机" class="headerlink" title="二、安装虚拟机"></a>二、安装虚拟机</h2><ul>
<li>此处考虑到跨平台的因素，选择使用VirtualBox</li>
<li>存在两种安装方式，下载deb包和添加路径，使用apt-get命令安装。</li>
<li>请点击下面的链接自行安装<br>参考：<br><a href="http://jingyan.baidu.com/article/870c6fc3092aedb03fe4be28.html" target="_blank" rel="noopener">Ubuntu15.04系统安装Virtualbox虚拟机</a></li>
</ul>
<h2 id="三、准备工作"><a href="#三、准备工作" class="headerlink" title="三、准备工作"></a>三、准备工作</h2><h3 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h3><h4 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h4><ul>
<li>JDK下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">官网下载地址，点此下载</a></li>
</ul>
<h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><ul>
<li>安装方法很简单，简单的说就2步：<ul>
<li>第一步：解压，并复制文件到指定路径。如<code>/usr/local/jdk</code></li>
<li>第二部：添加路径，修改配置文件。如修改<code>/etc/profile</code>或<code>~/.bashrc</code>。</li>
</ul>
</li>
<li>参考：<a href="http://jingyan.baidu.com/article/86fae346b696633c49121a30.html" target="_blank" rel="noopener">Ubuntu下搭建JAVA开发环境</a></li>
</ul>
<h3 id="创建hadoop账号"><a href="#创建hadoop账号" class="headerlink" title="创建hadoop账号"></a>创建hadoop账号</h3><ul>
<li>注：不一定非得创建hadoop账号，这一项可选。</li>
<li>但是，对于新手来说，最好创建hadoop账号，并且为它添加超级用户权限。</li>
<li>后面的操作都在hadoop账号下进行。</li>
<li>参考：<a href="http://blog.csdn.net/xuezhisdc/article/details/49642573" target="_blank" rel="noopener">Linux命令——adduser</a></li>
<li>添加超级用户权限。使用命令<code>sudo visudo</code>修改sudoers文件，添加一行。如下图所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160731101242857"> </li>
</ul>
<h3 id="复制虚拟机"><a href="#复制虚拟机" class="headerlink" title="复制虚拟机"></a>复制虚拟机</h3><ul>
<li>网上教程很多，自己搜索。</li>
<li>现在有2台虚拟机，一台做NameNode，另一台做DataNode。</li>
</ul>
<h2 id="四、修改配置文件"><a href="#四、修改配置文件" class="headerlink" title="四、修改配置文件"></a>四、修改配置文件</h2><h3 id="设置静态IP地址"><a href="#设置静态IP地址" class="headerlink" title="设置静态IP地址"></a>设置静态IP地址</h3><ul>
<li>因为Hadoop集群中的不同节点之间是基于TCP/IP进行通信的。如果使用DHCP方式动态分配IP，就无法定位到网络中的节点。所以，此处使用静态IP。</li>
<li>设置过程：</li>
</ul>
<ol>
<li>查看本机IP网段。比如我的网址是<code>192.168.36.15</code>,局域网的网段是：<code>192.168.36.0</code>~<code>192.168.36.255</code>。</li>
<li>设置虚拟机的网络连接方式为<strong>桥接网卡</strong>。如下图所示。</li>
<li>修改配置文件。修改<code>/etc/network/interfaces</code>文件。</li>
<li>重启计算机，使配置生效。</li>
</ol>
<ul>
<li><p>网络连接方式图如下所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160731095102565"></p>
</li>
<li><p>第一台虚拟机的<code>/etc/network/interfaces</code>文件内容如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto eth0</span><br><span class="line"><span class="comment">#iface eth0 inet dhcp</span></span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.36.100</span><br><span class="line">gateway 192.168.36.254</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">iface eth0 inet6 auto</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二台虚拟机的<code>/etc/network/interfaces</code>文件内容如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto eth0</span><br><span class="line"><span class="comment">#iface eth0 inet dhcp</span></span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.36.101</span><br><span class="line">gateway 192.168.36.254</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">iface eth0 inet6 auto</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：因为我们学校有IPv6网络，因此也配置了<code>inet6</code>，如果没有的话可以忽略这一项。</p>
</li>
</ul>
<h3 id="修改hostname"><a href="#修改hostname" class="headerlink" title="修改hostname"></a>修改hostname</h3><ul>
<li>Hadoop集群中的各个节点通过主机名互相通信，同时为了好区分主节点和数据节点。此处需要重新设置主机名。</li>
<li>将第一台虚拟机的主机名设置为<code>master</code>，第一台虚拟机的主机名设置为<code>slave1</code>。</li>
<li><p>使用下面的命令设置。</p>
  <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">vi</span> /etc/<span class="built_in">hostname</span></span><br></pre></td></tr></table></figure></li>
<li><p>第一台虚拟机的<code>/etc/hostname</code>内容是：</p>
  <figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="literal">master</span></span><br></pre></td></tr></table></figure></li>
<li><p>第二台虚拟机的<code>/etc/hostname</code>内容是：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slave1</span><br></pre></td></tr></table></figure></li>
<li>重启计算机，使用命令<code>hostname</code>确认是否修改成功。</li>
</ul>
<h3 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h3><ul>
<li>修改命令：<code>sudo vi /etc/hosts</code></li>
<li><p>在master和slave1主机的<code>/etc/hosts</code>文件中添加如下内容：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.36.100 	master</span><br><span class="line">192.168.36.101	slave1</span><br></pre></td></tr></table></figure></li>
<li><p>重启计算机，测试是否成功。</p>
  <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ping master</span><br><span class="line">ping slave1</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置ssh免密码登录"><a href="#配置ssh免密码登录" class="headerlink" title="配置ssh免密码登录"></a>配置ssh免密码登录</h3><ul>
<li><p>master 和 slave1共同操作</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果没有ssh，先安装</span></span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line"><span class="comment"># 生成密匙（不断按回车键，默认即可）</span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li>
<li>在~/.ssh/下生成了两个文件id_rsa,id_rsa.pub。第一个是私匙，第二个是公匙。</li>
<li><p>在slave1中的操作</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp id_rsa.pub hadoop@192.168.36.100:~/.ssh/id_rsa.pub_slave1</span><br></pre></td></tr></table></figure></li>
<li><p>在master中的操作</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将公匙都存储到authorized_keys文件中</span></span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">cat id_rsa.pub_slave1 &gt;&gt; authorized_keys</span><br><span class="line"><span class="comment"># 将authorized_keys文件分发到slave1中</span></span><br><span class="line">scp authorized_keys hadoop@192.168.36.101:~/.ssh/</span><br></pre></td></tr></table></figure></li>
<li><p>测试是否成功</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master中测试</span></span><br><span class="line">ssh slave1</span><br><span class="line"><span class="comment"># slave1中测试</span></span><br><span class="line">ssh master</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="五、安装hadoop"><a href="#五、安装hadoop" class="headerlink" title="五、安装hadoop"></a>五、安装hadoop</h2><ul>
<li>注：如未其它说明，以下操作都是在<strong>master节点</strong>上进行的。</li>
<li>原来教程将Hadoop安装在<code>/usr/local/</code>目录下，但是后面会遇到问题：无法启动NameNode或DataNode。这种问题归根结底都是由于权限造成的。所以，我修改了教程，将Hadoop安装在hadoop用户自己目录下：<code>/home/hadoop/software/</code>。</li>
</ul>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><ul>
<li>下载地址：<a href="http://hadoop.apache.org/releases.html" target="_blank" rel="noopener">通用地址</a> or <a href="http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.6.0/" target="_blank" rel="noopener">Hadoop 2.6.0下载地址</a></li>
<li>注意：下载二进制版本就可以，不要下载源码。</li>
<li>如果是在主机上下载的，请使用Xftp等其他工具将其上传到客户机master和slave1中。</li>
<li>假定hadoop存储位置：<code>~/hadoop-2.6.0.tar.gz</code></li>
</ul>
<h3 id="解压拷贝文件"><a href="#解压拷贝文件" class="headerlink" title="解压拷贝文件"></a>解压拷贝文件</h3><ul>
<li><p>先解压，然后重命名，再复制到指定目录，最后创建tmp目录。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf hadoop-2.6.0.tar.gz</span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">mv hadoop-2.6.0 hadoop</span><br><span class="line"><span class="comment"># 移动（我安装在/usr/local/下）</span></span><br><span class="line">sudo mv hadoop ~/software/</span><br><span class="line"><span class="comment"># 创建tmp目录，后面会用到</span></span><br><span class="line"><span class="built_in">cd</span> ~/software/hadoop</span><br><span class="line">mkdir -p tmp/dfs/data</span><br><span class="line">mkdir -p tmp/dfs/name</span><br></pre></td></tr></table></figure></li>
<li>注意：不要安装在<code>/usr/local</code>目录下。防止权限问题造成后面无法启动NameNode或DataNOde问题。</li>
</ul>
<h3 id="修改hadoop配置文件"><a href="#修改hadoop配置文件" class="headerlink" title="修改hadoop配置文件"></a>修改hadoop配置文件</h3><ul>
<li>此处需要修改<strong>7个</strong>配置文件，全部在<code>/usr/local/hadoop/etc/hadoop/</code>目录下。</li>
<li><p>7个配置文件的名字分别是：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop-env.sh <span class="comment"># hadoop的环境变量</span></span><br><span class="line">yarn-env.sh   <span class="comment"># yarn的环境变量</span></span><br><span class="line">slaves        <span class="comment"># 数据节点名字列表</span></span><br><span class="line">core-site.xml   <span class="comment"># </span></span><br><span class="line">hdfs-site.xml   <span class="comment"># HDFS配置文件</span></span><br><span class="line">mapred-site.xml <span class="comment"># MapReduce配置文件</span></span><br><span class="line">yarn-site.xml   <span class="comment"># yarn配置文件</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="修改hadoop-env-sh"><a href="#修改hadoop-env-sh" class="headerlink" title="修改hadoop-env.sh"></a>修改hadoop-env.sh</h4><ul>
<li><p>修改JAVA_HOME环境变量。在<code>hadoop-env.sh</code>文件中添加一行：</p>
  <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/local/jdk</span><br></pre></td></tr></table></figure></li>
<li>注意：我的JDK安装位置时<code>/usr/local/jdk</code>。你的不一定相同。所以，这个需要根据自己的JDK位置来设定。</li>
</ul>
<h4 id="修改yarn-env-sh"><a href="#修改yarn-env-sh" class="headerlink" title="修改yarn-env.sh"></a>修改yarn-env.sh</h4><ul>
<li><p>修改JAVA_HOME环境变量。在<code>yarn-env.sh</code>文件中添加一行：</p>
  <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/local/jdk</span><br></pre></td></tr></table></figure></li>
<li>注意：我的JDK安装位置时<code>/usr/local/jdk</code>。你的不一定相同。所以，这个需要根据自己的JDK位置来设定。</li>
</ul>
<h4 id="配置slave节点"><a href="#配置slave节点" class="headerlink" title="配置slave节点"></a>配置slave节点</h4><ul>
<li>需要修改slaves文件</li>
<li>因为此教程只创建了两个虚拟机：master和slave1。master用作NameNode节点，slave1用作DataNode节点。所以，slaves文件仅需要添加slave1即可</li>
<li><p>在slaves文件中添加一行：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slave1</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="配置core-site-xml"><a href="#配置core-site-xml" class="headerlink" title="配置core-site.xml"></a>配置core-site.xml</h4><ul>
<li><p>在core-site.xml文件中增加以下内容： </p>
  <figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;configuration&gt;</span></span><br><span class="line">    <span class="params">&lt;property&gt;</span></span><br><span class="line">        <span class="params">&lt;name&gt;</span>hadoop.tmp.dir<span class="params">&lt;/name&gt;</span></span><br><span class="line">        <span class="params">&lt;value&gt;</span>file:<span class="meta-keyword">/home/</span>hadoop<span class="meta-keyword">/software/</span>hadoop/tmp<span class="params">&lt;/value&gt;</span></span><br><span class="line">        <span class="params">&lt;description&gt;</span>Abase for other temporary directories.<span class="params">&lt;/description&gt;</span></span><br><span class="line">    <span class="params">&lt;/property&gt;</span></span><br><span class="line">    <span class="params">&lt;property&gt;</span></span><br><span class="line">        <span class="params">&lt;name&gt;</span>fs.defaultFS<span class="params">&lt;/name&gt;</span></span><br><span class="line">        <span class="params">&lt;value&gt;</span>hdfs:<span class="comment">//master:9000&lt;/value&gt;</span></span><br><span class="line">    <span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>注意：<code>hadoop.tmp.dir</code>的值需要和前面创建的tmp路径对应。</li>
</ul>
<h4 id="配置hdfs-site-xml"><a href="#配置hdfs-site-xml" class="headerlink" title="配置hdfs-site.xml"></a>配置hdfs-site.xml</h4><ul>
<li><p>在hdfs-site.xml文件中增加以下内容： </p>
  <figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;configuration&gt;</span></span><br><span class="line">    <span class="params">&lt;property&gt;</span></span><br><span class="line">        <span class="params">&lt;name&gt;</span>dfs.namenode.secondary.http-address<span class="params">&lt;/name&gt;</span></span><br><span class="line">        <span class="params">&lt;value&gt;</span>master:<span class="number">9001</span><span class="params">&lt;/value&gt;</span></span><br><span class="line">    <span class="params">&lt;/property&gt;</span></span><br><span class="line">    <span class="params">&lt;property&gt;</span></span><br><span class="line">        <span class="params">&lt;name&gt;</span>dfs.replication<span class="params">&lt;/name&gt;</span></span><br><span class="line">        <span class="params">&lt;value&gt;</span><span class="number">2</span><span class="params">&lt;/value&gt;</span></span><br><span class="line">    <span class="params">&lt;/property&gt;</span></span><br><span class="line">    <span class="params">&lt;property&gt;</span></span><br><span class="line">        <span class="params">&lt;name&gt;</span>dfs.namenode.name.dir<span class="params">&lt;/name&gt;</span></span><br><span class="line">        <span class="params">&lt;value&gt;</span>file:<span class="meta-keyword">/home/</span>hadoop<span class="meta-keyword">/software/</span>hadoop<span class="meta-keyword">/tmp/</span>dfs/name<span class="params">&lt;/value&gt;</span></span><br><span class="line">    <span class="params">&lt;/property&gt;</span></span><br><span class="line">    <span class="params">&lt;property&gt;</span></span><br><span class="line">        <span class="params">&lt;name&gt;</span>dfs.datanode.data.dir<span class="params">&lt;/name&gt;</span></span><br><span class="line">        <span class="params">&lt;value&gt;</span>file:<span class="meta-keyword">/home/</span>hadoop<span class="meta-keyword">/software/</span>hadoop<span class="meta-keyword">/tmp/</span>dfs/data<span class="params">&lt;/value&gt;</span></span><br><span class="line">    <span class="params">&lt;/property&gt;</span></span><br><span class="line">    <span class="params">&lt;property&gt;</span> </span><br><span class="line">            <span class="params">&lt;name&gt;</span>dfs.permissions<span class="params">&lt;/name&gt;</span>  </span><br><span class="line">            <span class="params">&lt;value&gt;</span>false<span class="params">&lt;/value&gt;</span>  </span><br><span class="line">     <span class="params">&lt;/property&gt;</span></span><br><span class="line">    <span class="params">&lt;property&gt;</span></span><br><span class="line">        <span class="params">&lt;name&gt;</span>dfs.webhdfs.enabled<span class="params">&lt;/name&gt;</span></span><br><span class="line">        <span class="params">&lt;value&gt;</span>true<span class="params">&lt;/value&gt;</span></span><br><span class="line">    <span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="配置mapred-site-xml"><a href="#配置mapred-site-xml" class="headerlink" title="配置mapred-site.xml"></a>配置mapred-site.xml</h4><ul>
<li><p>在mapred-site.xml文件中增加以下内容：</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="配置yarn-site-xml"><a href="#配置yarn-site-xml" class="headerlink" title="配置yarn-site.xml"></a>配置yarn-site.xml</h4><ul>
<li><p>在yarn-site.xml文件中增加以下内容：</p>
  <figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:8035<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.https.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>$</span><span class="template-variable">&#123;yarn.resourcemanager.hostname&#125;</span><span class="xml">:8090<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="复制修改后的hadoop文件夹到其它节点"><a href="#复制修改后的hadoop文件夹到其它节点" class="headerlink" title="复制修改后的hadoop文件夹到其它节点"></a>复制修改后的hadoop文件夹到其它节点</h3><ul>
<li><p>注意：因为<code>/usr/local</code>为系统目录，所以先复制到slave1中hadoop的Home路径，再复制到<code>/usr/local/</code>下。</p>
  <figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从master传输到slave1中</span></span><br><span class="line">scp -r /home/hadoop/software/hadoop hadoop<span class="variable">@slave1</span><span class="symbol">:~/software/</span></span><br></pre></td></tr></table></figure>
<h3 id="修改配置文件profile或-bashrc"><a href="#修改配置文件profile或-bashrc" class="headerlink" title="修改配置文件profile或.bashrc"></a>修改配置文件profile或.bashrc</h3></li>
<li>注意：此操作在<strong>master和slave1</strong>中都要进行。</li>
<li>修改<code>/etc/profile</code>文件，对所有用户生效；修改<code>~/.bashrc</code>文件，仅对自己有效。</li>
<li><p>在<code>.bashrc</code>中添加如下内容：</p>
  <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># added by xuezhi zhang</span></span><br><span class="line"><span class="attribute">PS1</span>=<span class="string">'[\[\e[33;40m\]\u@\w]\$\[\e[m\]'</span></span><br><span class="line"><span class="comment"># java</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/local/jdk</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JRE_HOME</span>=/usr/local/jdk/jre</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=.:$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br><span class="line"><span class="comment"># Hadoop enviroment var.</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_INSTALL</span>=/home/hadoop/software/hadoop</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$HADOOP_INSTALL/bin</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$HADOOP_INSTALL/sbin</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_MAPRED_HOME</span>=<span class="variable">$HADOOP_INSTALL</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_COMMON_HOME</span>=<span class="variable">$HADOOP_INSTALL</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_HDFS_HOME</span>=<span class="variable">$HADOOP_INSTALL</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">YARN_HOME</span>=<span class="variable">$HADOOP_INSTALL</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_COMMON_LIB_NATIVE_DIR</span>=<span class="variable">$HADOOP_INSTALL</span>/lib/native</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_OPTS</span>=<span class="string">"-Djava.library.path=<span class="variable">$HADOOP_INSTALL</span>/lib"</span></span><br></pre></td></tr></table></figure></li>
<li><p>使配置生效</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><strong>至此，Hadoop已经配置完成了。</strong></li>
</ul>
<h2 id="六、测试hadoop"><a href="#六、测试hadoop" class="headerlink" title="六、测试hadoop"></a>六、测试hadoop</h2><ul>
<li>下面开始测试一下hadoop<h3 id="开启hadoop"><a href="#开启hadoop" class="headerlink" title="开启hadoop"></a>开启hadoop</h3></li>
<li><p>注意：在<strong>master</strong>节点上操作</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式化HDFS</span></span><br><span class="line">hdfs namenode -format</span><br><span class="line"><span class="comment"># 启动HDFS</span></span><br><span class="line">start-dfs.sh</span><br><span class="line"><span class="comment"># 查看Java进程</span></span><br><span class="line">jps</span><br><span class="line"><span class="comment"># 启动Yarn</span></span><br><span class="line">start-yarn.sh</span><br><span class="line">jps</span><br><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">hdfs dfsadmin -report</span><br><span class="line"><span class="comment"># 或者访问：http://master:8088/</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="关闭hadoop"><a href="#关闭hadoop" class="headerlink" title="关闭hadoop"></a>关闭hadoop</h3><ul>
<li><p>注意：在<strong>master</strong>节点上操作</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭HDFS</span></span><br><span class="line">stop-dfs.sh</span><br><span class="line"><span class="comment"># 查看Java进程</span></span><br><span class="line">jps</span><br><span class="line"><span class="comment"># 关闭Yarn</span></span><br><span class="line">stop-yarn.sh</span><br><span class="line">jps</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>至此，整个教程已完，谢谢阅读！</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>健康系列——如何增强免疫力</title>
    <url>/9089.html</url>
    <content><![CDATA[<blockquote>
<p>对于程序员来说，整天面对显示器，受着电脑的辐射；整天加班，睡眠不足；饮食不规律，营养失衡；一直坐着，运动量少……长此以往，亚健康随之而来。</p>
</blockquote>
<h1 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h1><h2 id="多吃下面列举的食物"><a href="#多吃下面列举的食物" class="headerlink" title="多吃下面列举的食物"></a>多吃下面列举的食物</h2><p>灵芝、萝卜、人参、蜂蜜、蘑菇、香菇、木耳、银耳等。</p>
<a id="more"></a>
<h2 id="增强免疫力的最佳伴侣——水果"><a href="#增强免疫力的最佳伴侣——水果" class="headerlink" title="增强免疫力的最佳伴侣——水果"></a>增强免疫力的最佳伴侣——水果</h2><p>柚子，西瓜、柠檬、猕猴桃、樱桃、木瓜、香蕉、葡萄、雪梨、苹果</p>
<h2 id="均衡营养和提高免疫力——五谷杂粮"><a href="#均衡营养和提高免疫力——五谷杂粮" class="headerlink" title="均衡营养和提高免疫力——五谷杂粮"></a>均衡营养和提高免疫力——五谷杂粮</h2><p>燕麦、大麦、黑米、豆类</p>
<h2 id="增强免疫力离不开蔬菜"><a href="#增强免疫力离不开蔬菜" class="headerlink" title="增强免疫力离不开蔬菜"></a>增强免疫力离不开蔬菜</h2><p>大蒜、西红柿、胡萝卜、萝卜、卷心菜、苦瓜、海带、香菇、木耳</p>
<h2 id="中药调节免疫力平衡"><a href="#中药调节免疫力平衡" class="headerlink" title="中药调节免疫力平衡"></a>中药调节免疫力平衡</h2><pre><code>金银花、菊花、人参、黄芪、枸杞、柴胡
</code></pre><h1 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h1><p>良好的睡眠，保证充足的睡眠，按时睡觉。</p>
<h1 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h1><p>保持乐观的心态</p>
<h1 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h1><p>多运动，每天运动半小时，健康后半生。</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>健康</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL系列——平面模型分割</title>
    <url>/ab16.html</url>
    <content><![CDATA[<h2 id="PCL系列"><a href="#PCL系列" class="headerlink" title="PCL系列"></a>PCL系列</h2><ul>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%AF%BB%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——读入PCD格式文件操作</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B0%86%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%8B%BC%E6%8E%A5%E4%B8%A4%E4%B8%AA%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——拼接两个点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F%EF%BC%88RangeImage%EF%BC%89%E4%B8%AD%E6%8F%90%E5%8F%96NARF%E5%85%B3%E9%94%AE%E7%82%B9/" target="_blank" rel="noopener">PCL系列——从深度图像（RangeImage）中提取NARF关键点</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F/" target="_blank" rel="noopener">PCL系列——如何可视化深度图像</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/31/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E6%B3%95%EF%BC%88ICP%EF%BC%89%E9%85%8D%E5%87%86/" target="_blank" rel="noopener">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E9%80%90%E6%B8%90%E5%9C%B0%E9%85%8D%E5%87%86%E4%B8%80%E5%AF%B9%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E6%B3%8A%E6%9D%BE%E9%87%8D%E6%9E%84/" target="_blank" rel="noopener">PCL系列——三维重构之泊松重构</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B4%AA%E5%A9%AA%E4%B8%89%E8%A7%92%E6%8A%95%E5%BD%B1%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E7%A7%BB%E5%8A%A8%E7%AB%8B%E6%96%B9%E4%BD%93%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之移动立方体算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E6%A8%A1%E5%9E%8B%E5%88%86%E5%89%B2/" target="_blank" rel="noopener">PCL系列——平面模型分割</a></li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><a href="http://pan.baidu.com/s/1dF9Ejdf" target="_blank" rel="noopener">代码下载</a></p>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/ModelCoefficients.h&gt;	//模型系数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt;					//输入输出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;				//点云（类型）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/sample_consensus/method_types.h&gt;	//随机样本一致性算法	方法类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/sample_consensus/model_types.h&gt;		//随机样本一致性算法	模型类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/segmentation/sac_segmentation.h&gt;	//随机样本一致性算法	分割方法</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main (<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span><br><span class="line">&#123;</span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt; cloud; <span class="comment">//创建点云对象，用于存储点云数据</span></span><br><span class="line">	<span class="comment">//填充点云数据</span></span><br><span class="line">	cloud.width  = <span class="number">15</span>;</span><br><span class="line">  cloud.height = <span class="number">1</span>;</span><br><span class="line">  cloud.points.resize (cloud.width * cloud.height);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//生成随机数据</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud.points.size (); ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    cloud.points[i].x = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    cloud.points[i].y = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    cloud.points[i].z = <span class="number">1.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置几个局外点</span></span><br><span class="line">	cloud.points[<span class="number">0</span>].z = <span class="number">2.0</span>;</span><br><span class="line">	cloud.points[<span class="number">3</span>].z = <span class="number">-2.0</span>;</span><br><span class="line">	cloud.points[<span class="number">6</span>].z = <span class="number">4.0</span>;</span><br><span class="line">	<span class="comment">//显示点云数量和坐标信息</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Point cloud data: "</span> &lt;&lt; cloud.points.size () &lt;&lt;<span class="string">" points"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud.points.size (); ++i)</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; cloud.points[i].x &lt;&lt; <span class="string">" "</span> </span><br><span class="line">							&lt;&lt; cloud.points[i].y &lt;&lt; <span class="string">" "</span> </span><br><span class="line">							&lt;&lt; cloud.points[i].z &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	pcl::ModelCoefficients::<span class="function">Ptr <span class="title">coefficients</span> <span class="params">(<span class="keyword">new</span> pcl::ModelCoefficients)</span></span>; <span class="comment">//存储输出的模型的系数</span></span><br><span class="line">	pcl::PointIndices::<span class="function">Ptr <span class="title">inliers</span> <span class="params">(<span class="keyword">new</span> pcl::PointIndices)</span></span>;	<span class="comment">//存储内点，使用的点</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建分割对象</span></span><br><span class="line">  pcl::SACSegmentation&lt;pcl::PointXYZ&gt; seg;</span><br><span class="line">	<span class="comment">//可选设置</span></span><br><span class="line">  seg.setOptimizeCoefficients (<span class="literal">true</span>);</span><br><span class="line">	<span class="comment">//必须设置</span></span><br><span class="line">	seg.setModelType (pcl::SACMODEL_PLANE); <span class="comment">//设置模型类型，检测平面</span></span><br><span class="line">  seg.setMethodType (pcl::SAC_RANSAC);		<span class="comment">//设置方法【聚类或随机样本一致性】</span></span><br><span class="line">  seg.setDistanceThreshold (<span class="number">0.01</span>);</span><br><span class="line">  seg.setInputCloud (cloud.makeShared ());</span><br><span class="line">  seg.segment (*inliers, *coefficients);	<span class="comment">//分割操作</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (inliers-&gt;indices.size () == <span class="number">0</span>)<span class="comment">//根据内点数量，判断是否成功</span></span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">    PCL_ERROR (<span class="string">"Could not estimate a planar model for the given dataset."</span>);</span><br><span class="line">		<span class="keyword">return</span> (<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="comment">//显示模型的系数</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Model coefficients: "</span> &lt;&lt; coefficients-&gt;values[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> </span><br><span class="line">						&lt;&lt;coefficients-&gt;values[<span class="number">1</span>] &lt;&lt; <span class="string">" "</span></span><br><span class="line">						&lt;&lt;coefficients-&gt;values[<span class="number">2</span>] &lt;&lt; <span class="string">" "</span> </span><br><span class="line">						&lt;&lt;coefficients-&gt;values[<span class="number">3</span>] &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//显示估计平面模型过程中使用的内点</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Model inliers: "</span> &lt;&lt; inliers-&gt;indices.size () &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; inliers-&gt;indices.size (); ++i)</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; inliers-&gt;indices[i] &lt;&lt; <span class="string">"    "</span> &lt;&lt;cloud.points[inliers-&gt;indices[i]].x &lt;&lt; <span class="string">" "</span></span><br><span class="line">								&lt;&lt;cloud.points[inliers-&gt;indices[i]].y &lt;&lt; <span class="string">" "</span></span><br><span class="line">								&lt;&lt;cloud.points[inliers-&gt;indices[i]].z &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160420111119266"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《点云库PCL学习教程》    14章</p>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL系列——拼接两个点云</title>
    <url>/4dd2.html</url>
    <content><![CDATA[<h2 id="PCL系列"><a href="#PCL系列" class="headerlink" title="PCL系列"></a>PCL系列</h2><ul>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%AF%BB%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——读入PCD格式文件操作</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B0%86%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%8B%BC%E6%8E%A5%E4%B8%A4%E4%B8%AA%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——拼接两个点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F%EF%BC%88RangeImage%EF%BC%89%E4%B8%AD%E6%8F%90%E5%8F%96NARF%E5%85%B3%E9%94%AE%E7%82%B9/" target="_blank" rel="noopener">PCL系列——从深度图像（RangeImage）中提取NARF关键点</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F/" target="_blank" rel="noopener">PCL系列——如何可视化深度图像</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/31/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E6%B3%95%EF%BC%88ICP%EF%BC%89%E9%85%8D%E5%87%86/" target="_blank" rel="noopener">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E9%80%90%E6%B8%90%E5%9C%B0%E9%85%8D%E5%87%86%E4%B8%80%E5%AF%B9%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E6%B3%8A%E6%9D%BE%E9%87%8D%E6%9E%84/" target="_blank" rel="noopener">PCL系列——三维重构之泊松重构</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B4%AA%E5%A9%AA%E4%B8%89%E8%A7%92%E6%8A%95%E5%BD%B1%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E7%A7%BB%E5%8A%A8%E7%AB%8B%E6%96%B9%E4%BD%93%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之移动立方体算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E6%A8%A1%E5%9E%8B%E5%88%86%E5%89%B2/" target="_blank" rel="noopener">PCL系列——平面模型分割</a></li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>通过本教程，我们将会学会：</p>
<ul>
<li>如何拼接两个不同的点云的点，约束条件是两个数据集中的域的数量和类型必须相等。* 如何拼接两个不同点云的域，约束条件是连个数据集中的点的数量必须相等。</li>
</ul>
<a id="more"></a>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>在VS2010 中新建一个文件 concatenate_clouds.cpp，然后将下面的代码复制到文件中。</li>
<li>参照之前的文章，配置项目的属性。设置包含目录和库目录和附加依赖项。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; //标准输入输出流</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt; //PCL的PCD格式文件的输入输出头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt; //PCL对各种格式的点的支持头文件</span></span></span><br><span class="line"><span class="comment">//比如，你的程序遇到调用栈用完了的威胁。你说，你到什么地方借内存，</span></span><br><span class="line"><span class="comment">//存放你的错误信息？cerr的目的，就是在你最需要它的紧急情况下，</span></span><br><span class="line"><span class="comment">//还能得到输出功能的支持。 缓冲区的目的，就是减少刷屏的次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序拼接A和B到C</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) <span class="comment">// 需要一个参数 -f 或 -p</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"please specify command line arg '-f' or '-p'"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="comment">// 用于拼接不同点云的点的变量</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt; cloud_a, cloud_b, cloud_c; <span class="comment">//创建点云（不是指针），存储点坐标xyz</span></span><br><span class="line">	<span class="comment">// 用于拼接不同点云的域（点和法向量）的变量</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::Normal&gt; n_cloud_b; <span class="comment">//创建点云，储存法向量</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointNormal&gt; p_n_cloud_c; <span class="comment">//创建点云，储存点坐标和法向量</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//填充点云数据</span></span><br><span class="line">  cloud_a.width  = <span class="number">5</span>; <span class="comment">//设置宽度</span></span><br><span class="line">  cloud_a.height = cloud_b.height = n_cloud_b.height = <span class="number">1</span>; <span class="comment">//设置高度</span></span><br><span class="line">  cloud_a.points.resize (cloud_a.width * cloud_a.height); <span class="comment">//变形，无序</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-p"</span>) == <span class="number">0</span>) <span class="comment">//根据输入参数，设置点云</span></span><br><span class="line">  &#123;</span><br><span class="line">    cloud_b.width  = <span class="number">3</span>; <span class="comment">//cloud_b用于拼接不同点云的点</span></span><br><span class="line">    cloud_b.points.resize (cloud_b.width * cloud_b.height);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    n_cloud_b.width = <span class="number">5</span>; <span class="comment">//n_cloud_b用于拼接不同点云的域</span></span><br><span class="line">    n_cloud_b.points.resize (n_cloud_b.width * n_cloud_b.height);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud_a.points.size (); ++i) <span class="comment">//设置cloud_a中点的坐标（随机数）</span></span><br><span class="line">  &#123;</span><br><span class="line">    cloud_a.points[i].x = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    cloud_a.points[i].y = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    cloud_a.points[i].z = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-p"</span>) == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud_b.points.size (); ++i) <span class="comment">//设置cloud_b中点的坐标（随机数）</span></span><br><span class="line">    &#123;</span><br><span class="line">      cloud_b.points[i].x = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">      cloud_b.points[i].y = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">      cloud_b.points[i].z = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">// -f</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; n_cloud_b.points.size (); ++i) <span class="comment">//设置n_cloud_b中点的坐标（随机数）</span></span><br><span class="line">    &#123;</span><br><span class="line">      n_cloud_b.points[i].normal[<span class="number">0</span>] = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">      n_cloud_b.points[i].normal[<span class="number">1</span>] = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">      n_cloud_b.points[i].normal[<span class="number">2</span>] = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印拼接用的数据 A和B</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Cloud A: "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud_a.points.size (); ++i) <span class="comment">//打印cloud_a的点坐标信息</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; cloud_a.points[i].x &lt;&lt; <span class="string">" "</span> &lt;&lt; cloud_a.points[i].y &lt;&lt; <span class="string">" "</span> &lt;&lt; cloud_a.points[i].z &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Cloud B: "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">//打印Cloud B</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-p"</span>) == <span class="number">0</span>) <span class="comment">//若输入参数是-p，打印cloud_b；</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud_b.points.size (); ++i)</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; cloud_b.points[i].x &lt;&lt; <span class="string">" "</span> &lt;&lt; cloud_b.points[i].y &lt;&lt; <span class="string">" "</span> &lt;&lt; cloud_b.points[i].z &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">//若-f，打印n_cloud_b</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; n_cloud_b.points.size (); ++i)</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; n_cloud_b.points[i].normal[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; n_cloud_b.points[i].normal[<span class="number">1</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; n_cloud_b.points[i].normal[<span class="number">2</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//复制点云中的点</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-p"</span>) == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    cloud_c  = cloud_a;</span><br><span class="line">    cloud_c += cloud_b; <span class="comment">// cloud_a + cloud_b 意思是cloud_c包含了a和b中的点，c的点数 = a的点数+b的点数</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Cloud C: "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">////打印Cloud C</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud_c.points.size (); ++i) <span class="comment">//打印Cloud C</span></span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; cloud_c.points[i].x &lt;&lt; <span class="string">" "</span> &lt;&lt; cloud_c.points[i].y &lt;&lt; <span class="string">" "</span> &lt;&lt; cloud_c.points[i].z &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">//若输入参数是-f</span></span><br><span class="line">  &#123;</span><br><span class="line">    pcl::concatenateFields (cloud_a, n_cloud_b, p_n_cloud_c); <span class="comment">//拼接（点）cloud_a和（法向量）n_cloud_b到p_n_cloud_c</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Cloud C: "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; p_n_cloud_c.points.size (); ++i) <span class="comment">//打印Cloud C</span></span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt;</span><br><span class="line">        p_n_cloud_c.points[i].x &lt;&lt; <span class="string">" "</span> &lt;&lt; p_n_cloud_c.points[i].y &lt;&lt; <span class="string">" "</span> &lt;&lt; p_n_cloud_c.points[i].z &lt;&lt; <span class="string">" "</span> &lt;&lt;</span><br><span class="line">        p_n_cloud_c.points[i].normal[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; p_n_cloud_c.points[i].normal[<span class="number">1</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; p_n_cloud_c.points[i].normal[<span class="number">2</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重新生成项目。</li>
<li>到改项目的Debug目录下，按住Shift，同时点击鼠标右键，在当前窗口打开CMD窗口。</li>
<li>在CMD窗口中，输入命令<code>concatenate_clouds.exe -p</code>，执行<strong>拼接不同点云的点</strong>。结果如下图所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160330144458704"></li>
<li>在CMD窗口中，输入命令<code>concatenate_clouds.exe -f</code>，执行<strong>拼接不同点云的域（比如点和法向量）</strong>。结果如下图所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160330144432309"></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://pointclouds.org/documentation/tutorials/concatenate_clouds.php#concatenate-clouds" target="_blank" rel="noopener">Concatenate the points of two Point Clouds</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL系列——三维重构之移动立方体算法</title>
    <url>/e2ea.html</url>
    <content><![CDATA[<h2 id="PCL系列"><a href="#PCL系列" class="headerlink" title="PCL系列"></a>PCL系列</h2><ul>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%AF%BB%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——读入PCD格式文件操作</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B0%86%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%8B%BC%E6%8E%A5%E4%B8%A4%E4%B8%AA%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——拼接两个点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F%EF%BC%88RangeImage%EF%BC%89%E4%B8%AD%E6%8F%90%E5%8F%96NARF%E5%85%B3%E9%94%AE%E7%82%B9/" target="_blank" rel="noopener">PCL系列——从深度图像（RangeImage）中提取NARF关键点</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F/" target="_blank" rel="noopener">PCL系列——如何可视化深度图像</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/31/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E6%B3%95%EF%BC%88ICP%EF%BC%89%E9%85%8D%E5%87%86/" target="_blank" rel="noopener">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E9%80%90%E6%B8%90%E5%9C%B0%E9%85%8D%E5%87%86%E4%B8%80%E5%AF%B9%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E6%B3%8A%E6%9D%BE%E9%87%8D%E6%9E%84/" target="_blank" rel="noopener">PCL系列——三维重构之泊松重构</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B4%AA%E5%A9%AA%E4%B8%89%E8%A7%92%E6%8A%95%E5%BD%B1%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E7%A7%BB%E5%8A%A8%E7%AB%8B%E6%96%B9%E4%BD%93%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之移动立方体算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E6%A8%A1%E5%9E%8B%E5%88%86%E5%89%B2/" target="_blank" rel="noopener">PCL系列——平面模型分割</a></li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>通过本教程，我们将会学会：</p>
<ul>
<li>如果通过移动立方体算法进行三维点云重构。</li>
<li>程序支持两种文件格式：<code>*.pcd</code>和<code>*.ply</code>。</li>
<li>程序先读取点云文件；然后计算法向量，并将法向量和点云坐标放在一起；接着使用移动立方体算法进行重构，最后显示结果。</li>
</ul>
<a id="more"></a>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>在VS2010 中新建一个文件 <code>recon_marchingCubes.cpp</code>，然后将下面的代码复制到文件中。</li>
<li>参照之前的文章，配置项目的属性。设置包含目录和库目录和附加依赖项。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/ply_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/kdtree/kdtree_flann.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/features/normal_3d.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/surface/marching_cubes_hoppe.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/surface/marching_cubes_rbf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/surface/gp3.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 确定文件格式</span></span><br><span class="line">	<span class="keyword">char</span> tmpStr[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">strcpy</span>(tmpStr,argv[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">char</span>* pext = <span class="built_in">strrchr</span>(tmpStr, <span class="string">'.'</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">extply</span><span class="params">(<span class="string">"ply"</span>)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">extpcd</span><span class="params">(<span class="string">"pcd"</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span>(pext)&#123;</span><br><span class="line">		*pext=<span class="string">'\0'</span>;</span><br><span class="line">		pext++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ext</span><span class="params">(pext)</span></span>;</span><br><span class="line">	<span class="comment">//如果不支持文件格式，退出程序</span></span><br><span class="line">	<span class="keyword">if</span> (!((ext == extply)||(ext == extpcd)))&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"文件格式不支持!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"支持文件格式：*.pcd和*.ply！"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据文件格式选择输入方式</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span> </span>; <span class="comment">//创建点云对象指针，用于存储输入</span></span><br><span class="line">	<span class="keyword">if</span> (ext == extply)&#123;</span><br><span class="line">		<span class="keyword">if</span> (pcl::io::loadPLYFile(argv[<span class="number">1</span>] , *cloud) == <span class="number">-1</span>)&#123;</span><br><span class="line">			PCL_ERROR(<span class="string">"Could not read ply file!\n"</span>) ;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (pcl::io::loadPCDFile(argv[<span class="number">1</span>] , *cloud) == <span class="number">-1</span>)&#123;</span><br><span class="line">			PCL_ERROR(<span class="string">"Could not read pcd file!\n"</span>) ;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 估计法向量</span></span><br><span class="line">  pcl::NormalEstimation&lt;pcl::PointXYZ, pcl::Normal&gt; n;</span><br><span class="line">  pcl::PointCloud&lt;pcl::Normal&gt;::<span class="function">Ptr <span class="title">normals</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::Normal&gt;)</span></span>;</span><br><span class="line">  pcl::search::KdTree&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">tree</span> <span class="params">(<span class="keyword">new</span> pcl::search::KdTree&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">  tree-&gt;setInputCloud(cloud);</span><br><span class="line">  n.setInputCloud(cloud);</span><br><span class="line">  n.setSearchMethod(tree);</span><br><span class="line">  n.setKSearch(<span class="number">20</span>);</span><br><span class="line">  n.compute (*normals); <span class="comment">//计算法线，结果存储在normals中</span></span><br><span class="line">  <span class="comment">//* normals 不能同时包含点的法向量和表面的曲率</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将点云和法线放到一起</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointNormal&gt;::<span class="function">Ptr <span class="title">cloud_with_normals</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointNormal&gt;)</span></span>;</span><br><span class="line">  pcl::concatenateFields (*cloud, *normals, *cloud_with_normals);</span><br><span class="line">  <span class="comment">//* cloud_with_normals = cloud + normals</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建搜索树</span></span><br><span class="line">  pcl::search::KdTree&lt;pcl::PointNormal&gt;::<span class="function">Ptr <span class="title">tree2</span> <span class="params">(<span class="keyword">new</span> pcl::search::KdTree&lt;pcl::PointNormal&gt;)</span></span>;</span><br><span class="line">  tree2-&gt;setInputCloud (cloud_with_normals);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化MarchingCubes对象，并设置参数</span></span><br><span class="line">	pcl::MarchingCubes&lt;pcl::PointNormal&gt; *mc;</span><br><span class="line">	mc = <span class="keyword">new</span> pcl::MarchingCubesHoppe&lt;pcl::PointNormal&gt; ();</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">  if (hoppe_or_rbf == 0)</span></span><br><span class="line"><span class="comment">    mc = new pcl::MarchingCubesHoppe&lt;pcl::PointNormal&gt; ();</span></span><br><span class="line"><span class="comment">  else</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    mc = new pcl::MarchingCubesRBF&lt;pcl::PointNormal&gt; ();</span></span><br><span class="line"><span class="comment">    (reinterpret_cast&lt;pcl::MarchingCubesRBF&lt;pcl::PointNormal&gt;*&gt; (mc))-&gt;setOffSurfaceDisplacement (off_surface_displacement);</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建多变形网格，用于存储结果</span></span><br><span class="line">  pcl::PolygonMesh mesh;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置MarchingCubes对象的参数</span></span><br><span class="line">  mc-&gt;setIsoLevel (<span class="number">0.0f</span>);</span><br><span class="line">  mc-&gt;setGridResolution (<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">  mc-&gt;setPercentageExtendGrid (<span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置搜索方法</span></span><br><span class="line">  mc-&gt;setInputCloud (cloud_with_normals);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//执行重构，结果保存在mesh中</span></span><br><span class="line">	mc-&gt;reconstruct (mesh);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//保存网格图</span></span><br><span class="line">	pcl::io::savePLYFile(<span class="string">"result.ply"</span>, mesh);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示结果图</span></span><br><span class="line">  boost::<span class="built_in">shared_ptr</span>&lt;pcl::visualization::PCLVisualizer&gt; viewer (<span class="keyword">new</span> pcl::visualization::PCLVisualizer (<span class="string">"3D Viewer"</span>));</span><br><span class="line">  viewer-&gt;setBackgroundColor (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//设置背景</span></span><br><span class="line">  viewer-&gt;addPolygonMesh(mesh,<span class="string">"my"</span>); <span class="comment">//设置显示的网格</span></span><br><span class="line">  viewer-&gt;addCoordinateSystem (<span class="number">1.0</span>); <span class="comment">//设置坐标系</span></span><br><span class="line">  viewer-&gt;initCameraParameters ();</span><br><span class="line">  <span class="keyword">while</span> (!viewer-&gt;wasStopped ())&#123;</span><br><span class="line">    viewer-&gt;spinOnce (<span class="number">100</span>);</span><br><span class="line">    boost::this_thread::sleep (boost::posix_time::microseconds (<span class="number">100000</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重新生成项目。</li>
<li>到改项目的Debug目录下，按住Shift，同时点击鼠标右键，在当前窗口打开CMD窗口。</li>
<li>在命令行中输入<code>recon_marchingCubes.exe bunny.points.ply</code>，执行程序。得到如下图所示的结果。</li>
</ul>
<p><img alt="移动立方体算法的结果" data-src="http://img.blog.csdn.net/20160401095126535"></p>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL系列——三维重构之贪婪三角投影算法</title>
    <url>/8af6.html</url>
    <content><![CDATA[<h2 id="PCL系列"><a href="#PCL系列" class="headerlink" title="PCL系列"></a>PCL系列</h2><ul>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%AF%BB%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——读入PCD格式文件操作</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B0%86%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%8B%BC%E6%8E%A5%E4%B8%A4%E4%B8%AA%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——拼接两个点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F%EF%BC%88RangeImage%EF%BC%89%E4%B8%AD%E6%8F%90%E5%8F%96NARF%E5%85%B3%E9%94%AE%E7%82%B9/" target="_blank" rel="noopener">PCL系列——从深度图像（RangeImage）中提取NARF关键点</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F/" target="_blank" rel="noopener">PCL系列——如何可视化深度图像</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/31/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E6%B3%95%EF%BC%88ICP%EF%BC%89%E9%85%8D%E5%87%86/" target="_blank" rel="noopener">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E9%80%90%E6%B8%90%E5%9C%B0%E9%85%8D%E5%87%86%E4%B8%80%E5%AF%B9%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E6%B3%8A%E6%9D%BE%E9%87%8D%E6%9E%84/" target="_blank" rel="noopener">PCL系列——三维重构之泊松重构</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B4%AA%E5%A9%AA%E4%B8%89%E8%A7%92%E6%8A%95%E5%BD%B1%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E7%A7%BB%E5%8A%A8%E7%AB%8B%E6%96%B9%E4%BD%93%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之移动立方体算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E6%A8%A1%E5%9E%8B%E5%88%86%E5%89%B2/" target="_blank" rel="noopener">PCL系列——平面模型分割</a></li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>通过本教程，我们将会学会：</p>
<ul>
<li>如果通过贪婪三角投影算法进行三维点云重构。</li>
<li>程序支持两种文件格式：<code>*.pcd</code>和<code>*.ply</code>。</li>
<li>程序先读取点云文件；然后计算法向量，并将法向量和点云坐标放在一起；接着使用贪婪三角投影算法进行重构，最后显示结果。</li>
</ul>
<a id="more"></a>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>在VS2010 中新建一个文件 <code>recon_greedyProjection.cpp</code>，然后将下面的代码复制到文件中。</li>
<li>参照之前的文章，配置项目的属性。设置包含目录和库目录和附加依赖项。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* GreedyProjection是根据点云进行三角化，而 poisson 则是对water-tight的模型进行重建，</span></span><br><span class="line"><span class="comment">* 所以形成了封闭mesh和很多冗余信息，需要对poisson的重建进行修剪才能得到相对正确的模型</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/ply_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/kdtree/kdtree_flann.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/features/normal_3d.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/surface/gp3.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 确定文件格式</span></span><br><span class="line">	<span class="keyword">char</span> tmpStr[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">strcpy</span>(tmpStr,argv[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">char</span>* pext = <span class="built_in">strrchr</span>(tmpStr, <span class="string">'.'</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">extply</span><span class="params">(<span class="string">"ply"</span>)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">extpcd</span><span class="params">(<span class="string">"pcd"</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span>(pext)&#123;</span><br><span class="line">		*pext=<span class="string">'\0'</span>;</span><br><span class="line">		pext++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ext</span><span class="params">(pext)</span></span>;</span><br><span class="line">	<span class="comment">//如果不支持文件格式，退出程序</span></span><br><span class="line">	<span class="keyword">if</span> (!((ext == extply)||(ext == extpcd)))&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"文件格式不支持!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"支持文件格式：*.pcd和*.ply！"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据文件格式选择输入方式</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span> </span>; <span class="comment">//创建点云对象指针，用于存储输入</span></span><br><span class="line">	<span class="keyword">if</span> (ext == extply)&#123;</span><br><span class="line">		<span class="keyword">if</span> (pcl::io::loadPLYFile(argv[<span class="number">1</span>] , *cloud) == <span class="number">-1</span>)&#123;</span><br><span class="line">			PCL_ERROR(<span class="string">"Could not read ply file!\n"</span>) ;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (pcl::io::loadPCDFile(argv[<span class="number">1</span>] , *cloud) == <span class="number">-1</span>)&#123;</span><br><span class="line">			PCL_ERROR(<span class="string">"Could not read pcd file!\n"</span>) ;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 估计法向量</span></span><br><span class="line">  pcl::NormalEstimation&lt;pcl::PointXYZ, pcl::Normal&gt; n;</span><br><span class="line">  pcl::PointCloud&lt;pcl::Normal&gt;::<span class="function">Ptr <span class="title">normals</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::Normal&gt;)</span></span>;</span><br><span class="line">  pcl::search::KdTree&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">tree</span> <span class="params">(<span class="keyword">new</span> pcl::search::KdTree&lt;pcl::PointXYZ&gt;)</span></span>;</span><br><span class="line">  tree-&gt;setInputCloud (cloud);</span><br><span class="line">  n.setInputCloud (cloud);</span><br><span class="line">  n.setSearchMethod (tree);</span><br><span class="line">  n.setKSearch (<span class="number">20</span>);</span><br><span class="line">  n.compute (*normals); <span class="comment">//计算法线，结果存储在normals中</span></span><br><span class="line">  <span class="comment">//* normals 不能同时包含点的法向量和表面的曲率</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将点云和法线放到一起</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointNormal&gt;::<span class="function">Ptr <span class="title">cloud_with_normals</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointNormal&gt;)</span></span>;</span><br><span class="line">  pcl::concatenateFields (*cloud, *normals, *cloud_with_normals);</span><br><span class="line">  <span class="comment">//* cloud_with_normals = cloud + normals</span></span><br><span class="line">	</span><br><span class="line">  <span class="comment">//创建搜索树</span></span><br><span class="line">  pcl::search::KdTree&lt;pcl::PointNormal&gt;::<span class="function">Ptr <span class="title">tree2</span> <span class="params">(<span class="keyword">new</span> pcl::search::KdTree&lt;pcl::PointNormal&gt;)</span></span>;</span><br><span class="line">  tree2-&gt;setInputCloud (cloud_with_normals);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化GreedyProjectionTriangulation对象，并设置参数</span></span><br><span class="line">  pcl::GreedyProjectionTriangulation&lt;pcl::PointNormal&gt; gp3;</span><br><span class="line">	<span class="comment">//创建多变形网格，用于存储结果</span></span><br><span class="line">  pcl::PolygonMesh triangles;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置GreedyProjectionTriangulation对象的参数</span></span><br><span class="line">	<span class="comment">//第一个参数影响很大</span></span><br><span class="line">  gp3.setSearchRadius (<span class="number">1.5f</span>); <span class="comment">//设置连接点之间的最大距离（最大边长）用于确定k近邻的球半径【默认值 0】</span></span><br><span class="line">  gp3.setMu (<span class="number">2.5f</span>); <span class="comment">//设置最近邻距离的乘子，以得到每个点的最终搜索半径【默认值 0】</span></span><br><span class="line">  gp3.setMaximumNearestNeighbors (<span class="number">100</span>); <span class="comment">//设置搜索的最近邻点的最大数量</span></span><br><span class="line">  gp3.setMaximumSurfaceAngle(M_PI/<span class="number">4</span>); <span class="comment">// 45 degrees（pi）最大平面角</span></span><br><span class="line">  gp3.setMinimumAngle(M_PI/<span class="number">18</span>); <span class="comment">// 10 degrees 每个三角的最小角度</span></span><br><span class="line">  gp3.setMaximumAngle(<span class="number">2</span>*M_PI/<span class="number">3</span>); <span class="comment">// 120 degrees 每个三角的最大角度</span></span><br><span class="line">  gp3.setNormalConsistency(<span class="literal">false</span>); <span class="comment">//如果法向量一致，设置为true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置搜索方法和输入点云</span></span><br><span class="line">  gp3.setInputCloud(cloud_with_normals);</span><br><span class="line">  gp3.setSearchMethod(tree2);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//执行重构，结果保存在triangles中</span></span><br><span class="line">  gp3.reconstruct (triangles);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//保存网格图</span></span><br><span class="line">	pcl::io::savePLYFile(<span class="string">"result.ply"</span>, triangles);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Additional vertex information</span></span><br><span class="line">  <span class="comment">//std::vector&lt;int&gt; parts = gp3.getPartIDs();</span></span><br><span class="line">  <span class="comment">//std::vector&lt;int&gt; states = gp3.getPointStates();</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示结果图</span></span><br><span class="line">  boost::<span class="built_in">shared_ptr</span>&lt;pcl::visualization::PCLVisualizer&gt; viewer (<span class="keyword">new</span> pcl::visualization::PCLVisualizer (<span class="string">"3D Viewer"</span>));</span><br><span class="line">  viewer-&gt;setBackgroundColor (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//设置背景</span></span><br><span class="line">  viewer-&gt;addPolygonMesh(triangles,<span class="string">"my"</span>); <span class="comment">//设置显示的网格</span></span><br><span class="line">  viewer-&gt;addCoordinateSystem (<span class="number">1.0</span>); <span class="comment">//设置坐标系</span></span><br><span class="line">  viewer-&gt;initCameraParameters ();</span><br><span class="line">  <span class="keyword">while</span> (!viewer-&gt;wasStopped ())&#123;</span><br><span class="line">    viewer-&gt;spinOnce (<span class="number">100</span>);</span><br><span class="line">    boost::this_thread::sleep (boost::posix_time::microseconds (<span class="number">100000</span>));</span><br><span class="line">  &#125;</span><br><span class="line">	</span><br><span class="line">  <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重新生成项目。</li>
<li>到改项目的Debug目录下，按住Shift，同时点击鼠标右键，在当前窗口打开CMD窗口。</li>
<li>在命令行中输入<code>recon_greedyProjection.exe bunny.points.ply</code>，执行程序。得到如下图所示的结果。</li>
</ul>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160401094420876"></p>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL系列——三维重构之泊松重构</title>
    <url>/e073.html</url>
    <content><![CDATA[<h2 id="PCL系列"><a href="#PCL系列" class="headerlink" title="PCL系列"></a>PCL系列</h2><ul>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%AF%BB%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——读入PCD格式文件操作</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B0%86%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%8B%BC%E6%8E%A5%E4%B8%A4%E4%B8%AA%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——拼接两个点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F%EF%BC%88RangeImage%EF%BC%89%E4%B8%AD%E6%8F%90%E5%8F%96NARF%E5%85%B3%E9%94%AE%E7%82%B9/" target="_blank" rel="noopener">PCL系列——从深度图像（RangeImage）中提取NARF关键点</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F/" target="_blank" rel="noopener">PCL系列——如何可视化深度图像</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/31/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E6%B3%95%EF%BC%88ICP%EF%BC%89%E9%85%8D%E5%87%86/" target="_blank" rel="noopener">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E9%80%90%E6%B8%90%E5%9C%B0%E9%85%8D%E5%87%86%E4%B8%80%E5%AF%B9%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E6%B3%8A%E6%9D%BE%E9%87%8D%E6%9E%84/" target="_blank" rel="noopener">PCL系列——三维重构之泊松重构</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B4%AA%E5%A9%AA%E4%B8%89%E8%A7%92%E6%8A%95%E5%BD%B1%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E7%A7%BB%E5%8A%A8%E7%AB%8B%E6%96%B9%E4%BD%93%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之移动立方体算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E6%A8%A1%E5%9E%8B%E5%88%86%E5%89%B2/" target="_blank" rel="noopener">PCL系列——平面模型分割</a></li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>通过本教程，我们将会学会：</p>
<ul>
<li>如果通过泊松算法进行三维点云重构。</li>
<li>程序支持两种文件格式：<code>*.pcd</code>和<code>*.ply</code></li>
<li>程序先读取点云文件，然后计算法向量，接着使用泊松算法进行重构，最后显示结果。</li>
</ul>
<a id="more"></a>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>在VS2010 中新建一个文件 <code>recon_poisson.cpp</code>，然后将下面的代码复制到文件中。</li>
<li>参照之前的文章，配置项目的属性。设置包含目录和库目录和附加依赖项。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//点的类型的头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="comment">//点云文件IO（pcd文件和ply文件）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/ply_io.h&gt;</span></span></span><br><span class="line"><span class="comment">//kd树</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/kdtree/kdtree_flann.h&gt;</span></span></span><br><span class="line"><span class="comment">//特征提取</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/features/normal_3d_omp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/features/normal_3d.h&gt;</span></span></span><br><span class="line"><span class="comment">//重构</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/surface/gp3.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/surface/poisson.h&gt;</span></span></span><br><span class="line"><span class="comment">//可视化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="comment">//多线程</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 确定文件格式</span></span><br><span class="line">	<span class="keyword">char</span> tmpStr[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">strcpy</span>(tmpStr,argv[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">char</span>* pext = <span class="built_in">strrchr</span>(tmpStr, <span class="string">'.'</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">extply</span><span class="params">(<span class="string">"ply"</span>)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">extpcd</span><span class="params">(<span class="string">"pcd"</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span>(pext)&#123;</span><br><span class="line">		*pext=<span class="string">'\0'</span>;</span><br><span class="line">		pext++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ext</span><span class="params">(pext)</span></span>;</span><br><span class="line">	<span class="comment">//如果不支持文件格式，退出程序</span></span><br><span class="line">	<span class="keyword">if</span> (!((ext == extply)||(ext == extpcd)))&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"文件格式不支持!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"支持文件格式：*.pcd和*.ply！"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据文件格式选择输入方式</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span> </span>; <span class="comment">//创建点云对象指针，用于存储输入</span></span><br><span class="line">	<span class="keyword">if</span> (ext == extply)&#123;</span><br><span class="line">		<span class="keyword">if</span> (pcl::io::loadPLYFile(argv[<span class="number">1</span>] , *cloud) == <span class="number">-1</span>)&#123;</span><br><span class="line">			PCL_ERROR(<span class="string">"Could not read ply file!\n"</span>) ;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (pcl::io::loadPCDFile(argv[<span class="number">1</span>] , *cloud) == <span class="number">-1</span>)&#123;</span><br><span class="line">			PCL_ERROR(<span class="string">"Could not read pcd file!\n"</span>) ;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 计算法向量</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointNormal&gt;::<span class="function">Ptr <span class="title">cloud_with_normals</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointNormal&gt;)</span></span>; <span class="comment">//法向量点云对象指针</span></span><br><span class="line">  pcl::NormalEstimation&lt;pcl::PointXYZ , pcl::Normal&gt; n ;<span class="comment">//法线估计对象</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::Normal&gt;::<span class="function">Ptr <span class="title">normals</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::Normal&gt;)</span> </span>;<span class="comment">//存储估计的法线的指针</span></span><br><span class="line">  pcl::search::KdTree&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">tree</span><span class="params">(<span class="keyword">new</span> pcl::search::KdTree&lt;pcl::PointXYZ&gt;)</span> </span>;</span><br><span class="line">  tree-&gt;setInputCloud(cloud) ;</span><br><span class="line">  n.setInputCloud(cloud) ;</span><br><span class="line">  n.setSearchMethod(tree) ;</span><br><span class="line">  n.setKSearch(<span class="number">20</span>);</span><br><span class="line">	n.compute(*normals); <span class="comment">//计算法线，结果存储在normals中</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//将点云和法线放到一起</span></span><br><span class="line">  pcl::concatenateFields(*cloud , *normals , *cloud_with_normals) ;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建搜索树</span></span><br><span class="line">  pcl::search::KdTree&lt;pcl::PointNormal&gt;::<span class="function">Ptr <span class="title">tree2</span><span class="params">(<span class="keyword">new</span> pcl::search::KdTree&lt;pcl::PointNormal&gt;)</span> </span>;</span><br><span class="line">  tree2-&gt;setInputCloud(cloud_with_normals) ;</span><br><span class="line">	<span class="comment">//创建Poisson对象，并设置参数</span></span><br><span class="line">  pcl::Poisson&lt;pcl::PointNormal&gt; pn ;</span><br><span class="line">	pn.setConfidence(<span class="literal">false</span>); <span class="comment">//是否使用法向量的大小作为置信信息。如果false，所有法向量均归一化。</span></span><br><span class="line">	pn.setDegree(<span class="number">2</span>); <span class="comment">//设置参数degree[1,5],值越大越精细，耗时越久。</span></span><br><span class="line">	pn.setDepth(<span class="number">8</span>); <span class="comment">//树的最大深度，求解2^d x 2^d x 2^d立方体元。由于八叉树自适应采样密度，指定值仅为最大深度。</span></span><br><span class="line">	pn.setIsoDivide(<span class="number">8</span>); <span class="comment">//用于提取ISO等值面的算法的深度</span></span><br><span class="line">	pn.setManifold(<span class="literal">false</span>); <span class="comment">//是否添加多边形的重心，当多边形三角化时。 设置流行标志，如果设置为true，则对多边形进行细分三角话时添加重心，设置false则不添加</span></span><br><span class="line">	pn.setOutputPolygons(<span class="literal">false</span>); <span class="comment">//是否输出多边形网格（而不是三角化移动立方体的结果）</span></span><br><span class="line">	pn.setSamplesPerNode(<span class="number">3.0</span>); <span class="comment">//设置落入一个八叉树结点中的样本点的最小数量。无噪声，[1.0-5.0],有噪声[15.-20.]平滑</span></span><br><span class="line">	pn.setScale(<span class="number">1.25</span>); <span class="comment">//设置用于重构的立方体直径和样本边界立方体直径的比率。</span></span><br><span class="line">	pn.setSolverDivide(<span class="number">8</span>); <span class="comment">//设置求解线性方程组的Gauss-Seidel迭代方法的深度</span></span><br><span class="line">	<span class="comment">//pn.setIndices();</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置搜索方法和输入点云</span></span><br><span class="line">	pn.setSearchMethod(tree2);</span><br><span class="line">	pn.setInputCloud(cloud_with_normals);</span><br><span class="line">	<span class="comment">//创建多变形网格，用于存储结果</span></span><br><span class="line">	pcl::PolygonMesh mesh ;</span><br><span class="line">	<span class="comment">//执行重构</span></span><br><span class="line">	pn.performReconstruction(mesh);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//保存网格图</span></span><br><span class="line">	pcl::io::savePLYFile(<span class="string">"result.ply"</span>, mesh);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 显示结果图</span></span><br><span class="line">	boost::<span class="built_in">shared_ptr</span>&lt;pcl::visualization::PCLVisualizer&gt; viewer(<span class="keyword">new</span> pcl::visualization::PCLVisualizer(<span class="string">"3D viewer"</span>)) ;</span><br><span class="line">	viewer-&gt;setBackgroundColor(<span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span>) ;</span><br><span class="line">	viewer-&gt;addPolygonMesh(mesh , <span class="string">"my"</span>) ;</span><br><span class="line">	viewer-&gt;addCoordinateSystem (<span class="number">50.0</span>);</span><br><span class="line">	viewer-&gt;initCameraParameters() ;</span><br><span class="line">	<span class="keyword">while</span> (!viewer-&gt;wasStopped())&#123;</span><br><span class="line">		viewer-&gt;spinOnce(<span class="number">100</span>) ;</span><br><span class="line">		boost::this_thread::sleep(boost::posix_time::microseconds(<span class="number">100000</span>)) ;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重新生成项目。</li>
<li>到改项目的Debug目录下，按住Shift，同时点击鼠标右键，在当前窗口打开CMD窗口。</li>
<li>在命令行中输入<code>recon_poisson.exe bunny.points.ply</code>，执行程序。得到如下图所示的结果。</li>
</ul>
<p><img alt="泊松重构结果图" data-src="http://img.blog.csdn.net/20160401093428810"></p>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL系列——如何逐渐地配准一对点云</title>
    <url>/ef71.html</url>
    <content><![CDATA[<h2 id="PCL系列"><a href="#PCL系列" class="headerlink" title="PCL系列"></a>PCL系列</h2><ul>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%AF%BB%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——读入PCD格式文件操作</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B0%86%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%8B%BC%E6%8E%A5%E4%B8%A4%E4%B8%AA%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——拼接两个点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F%EF%BC%88RangeImage%EF%BC%89%E4%B8%AD%E6%8F%90%E5%8F%96NARF%E5%85%B3%E9%94%AE%E7%82%B9/" target="_blank" rel="noopener">PCL系列——从深度图像（RangeImage）中提取NARF关键点</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F/" target="_blank" rel="noopener">PCL系列——如何可视化深度图像</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/31/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E6%B3%95%EF%BC%88ICP%EF%BC%89%E9%85%8D%E5%87%86/" target="_blank" rel="noopener">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E9%80%90%E6%B8%90%E5%9C%B0%E9%85%8D%E5%87%86%E4%B8%80%E5%AF%B9%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E6%B3%8A%E6%9D%BE%E9%87%8D%E6%9E%84/" target="_blank" rel="noopener">PCL系列——三维重构之泊松重构</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B4%AA%E5%A9%AA%E4%B8%89%E8%A7%92%E6%8A%95%E5%BD%B1%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E7%A7%BB%E5%8A%A8%E7%AB%8B%E6%96%B9%E4%BD%93%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之移动立方体算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E6%A8%A1%E5%9E%8B%E5%88%86%E5%89%B2/" target="_blank" rel="noopener">PCL系列——平面模型分割</a></li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>通过本教程，我们将会学会：</p>
<ul>
<li>如何配准多个点云图。</li>
<li>配准的方法是：点云图两两配准，计算它们的变换矩阵，然后计算总的变换矩阵。</li>
<li>两个点云配准使用的是非线性ICP算法，它是ICP的算法的变体，使用Levenberg-Marquardt最优化。</li>
</ul>
<a id="more"></a>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>在VS2010 中新建一个文件 <code>pairwise_incremental_registration.cpp</code>，然后将下面的代码复制到文件中。</li>
<li>参照之前的文章，配置项目的属性。设置包含目录和库目录和附加依赖项。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">#include &lt;boost/make_shared.hpp&gt; <span class="comment">//共享指针</span></span><br><span class="line"><span class="comment">//点/点云</span></span><br><span class="line">#include &lt;pcl/point_types.h&gt;</span><br><span class="line">#include &lt;pcl/point_cloud.h&gt;</span><br><span class="line">#include &lt;pcl/point_representation.h&gt;</span><br><span class="line"><span class="comment">//pcd文件输入/输出</span></span><br><span class="line">#include &lt;pcl/io/pcd_io.h&gt;</span><br><span class="line"><span class="comment">//滤波</span></span><br><span class="line">#include &lt;pcl/filters/voxel_grid.h&gt;</span><br><span class="line">#include &lt;pcl/filters/filter.h&gt;</span><br><span class="line"><span class="comment">//特征</span></span><br><span class="line">#include &lt;pcl/features/normal_3d.h&gt;</span><br><span class="line"><span class="comment">//配准</span></span><br><span class="line">#include &lt;pcl/registration/icp.h&gt; <span class="comment">//ICP方法</span></span><br><span class="line">#include &lt;pcl/registration/icp_nl.h&gt;</span><br><span class="line">#include &lt;pcl/registration/transforms.h&gt;</span><br><span class="line"><span class="comment">//可视化</span></span><br><span class="line">#include &lt;pcl/visualization/pcl_visualizer.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//命名空间</span></span><br><span class="line">using pcl::visualization::PointCloudColorHandlerGenericField;</span><br><span class="line">using pcl::visualization::PointCloudColorHandlerCustom;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义类型的别名</span></span><br><span class="line">typedef pcl::PointXYZ PointT;</span><br><span class="line">typedef pcl::PointCloud&lt;PointT&gt; PointCloud;</span><br><span class="line">typedef pcl::PointNormal PointNormalT;</span><br><span class="line">typedef pcl::PointCloud&lt;PointNormalT&gt; PointCloudWithNormals;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="comment">//可视化对象</span></span><br><span class="line">pcl::visualization::PCLVisualizer *p;</span><br><span class="line"><span class="comment">//左视区和右视区，可视化窗口分成左右两部分</span></span><br><span class="line">int vp_1, vp_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构体，用于处理点云</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PCD</span></span></span><br><span class="line">&#123;</span><br><span class="line">  PointCloud::Ptr cloud; <span class="comment">//点云指针</span></span><br><span class="line">  std::string f_name; <span class="comment">//文件名</span></span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">  PCD() : cloud (new PointCloud) &#123;&#125;; <span class="comment">//初始化</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义新的点表达方式&lt; x, y, z, curvature &gt; 坐标+曲率</span></span><br><span class="line">class MyPointRepresentation : public pcl::PointRepresentation &lt;PointNormalT&gt; <span class="comment">//继承关系</span></span><br><span class="line">&#123;</span><br><span class="line">  using pcl::PointRepresentation&lt;PointNormalT&gt;::nr_dimensions_;</span><br><span class="line">public:</span><br><span class="line">  MyPointRepresentation ()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//指定维数</span></span><br><span class="line">    nr_dimensions_ = <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//重载函数copyToFloatArray，以定义自己的特征向量</span></span><br><span class="line">  <span class="keyword">virtual</span> void copyToFloatArray (<span class="keyword">const</span> PointNormalT &amp;p, float * out) <span class="keyword">const</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//&lt; x, y, z, curvature &gt; 坐标xyz和曲率</span></span><br><span class="line">    out[<span class="number">0</span>] = p.x;</span><br><span class="line">    out[<span class="number">1</span>] = p.y;</span><br><span class="line">    out[<span class="number">2</span>] = p.z;</span><br><span class="line">    out[<span class="number">3</span>] = p.curvature;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在窗口的左视区，简单的显示源点云和目标点云</span></span><br><span class="line">void showCloudsLeft(<span class="keyword">const</span> PointCloud::Ptr cloud_target, <span class="keyword">const</span> PointCloud::Ptr cloud_source)</span><br><span class="line">&#123;</span><br><span class="line">  p-&gt;removePointCloud (<span class="string">"vp1_target"</span>); <span class="comment">//根据给定的ID，从屏幕中去除一个点云。参数是ID</span></span><br><span class="line">  p-&gt;removePointCloud (<span class="string">"vp1_source"</span>); <span class="comment">//</span></span><br><span class="line">  PointCloudColorHandlerCustom&lt;PointT&gt; tgt_h (cloud_target, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>); <span class="comment">//目标点云绿色</span></span><br><span class="line">  PointCloudColorHandlerCustom&lt;PointT&gt; src_h (cloud_source, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//源点云红色</span></span><br><span class="line">  p-&gt;addPointCloud (cloud_target, tgt_h, <span class="string">"vp1_target"</span>, vp_1); <span class="comment">//加载点云</span></span><br><span class="line">  p-&gt;addPointCloud (cloud_source, src_h, <span class="string">"vp1_source"</span>, vp_1);</span><br><span class="line">  PCL_INFO (<span class="string">"Press q to begin the registration.\n"</span>); <span class="comment">//在命令行中显示提示信息</span></span><br><span class="line">  p-&gt; spin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在窗口的右视区，简单的显示源点云和目标点云</span></span><br><span class="line">void showCloudsRight(<span class="keyword">const</span> PointCloudWithNormals::Ptr cloud_target, <span class="keyword">const</span> PointCloudWithNormals::Ptr cloud_source)</span><br><span class="line">&#123;</span><br><span class="line">  p-&gt;removePointCloud (<span class="string">"source"</span>); <span class="comment">//根据给定的ID，从屏幕中去除一个点云。参数是ID</span></span><br><span class="line">  p-&gt;removePointCloud (<span class="string">"target"</span>);</span><br><span class="line">  PointCloudColorHandlerGenericField&lt;PointNormalT&gt; tgt_color_handler (cloud_target, <span class="string">"curvature"</span>); <span class="comment">//目标点云彩色句柄</span></span><br><span class="line">  <span class="keyword">if</span> (!tgt_color_handler.isCapable ())</span><br><span class="line">      PCL_WARN (<span class="string">"Cannot create curvature color handler!"</span>);</span><br><span class="line">  PointCloudColorHandlerGenericField&lt;PointNormalT&gt; src_color_handler (cloud_source, <span class="string">"curvature"</span>); <span class="comment">//源点云彩色句柄</span></span><br><span class="line">  <span class="keyword">if</span> (!src_color_handler.isCapable ())</span><br><span class="line">      PCL_WARN (<span class="string">"Cannot create curvature color handler!"</span>);</span><br><span class="line">  p-&gt;addPointCloud (cloud_target, tgt_color_handler, <span class="string">"target"</span>, vp_2); <span class="comment">//加载点云</span></span><br><span class="line">  p-&gt;addPointCloud (cloud_source, src_color_handler, <span class="string">"source"</span>, vp_2);</span><br><span class="line">  p-&gt;spinOnce();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取一系列的PCD文件（希望配准的点云文件）</span></span><br><span class="line"><span class="comment">// 参数argc 参数的数量（来自main()）</span></span><br><span class="line"><span class="comment">// 参数argv 参数的列表（来自main()）</span></span><br><span class="line"><span class="comment">// 参数models 点云数据集的结果向量</span></span><br><span class="line">void loadData (int argc, <span class="built_in">char</span> **argv, std::vector&lt;PCD, Eigen::aligned_allocator&lt;PCD&gt; &gt; &amp;models)</span><br><span class="line">&#123;</span><br><span class="line">  std::string extension (<span class="string">".pcd"</span>); <span class="comment">//声明并初始化string类型变量extension，表示文件后缀名</span></span><br><span class="line">  <span class="comment">// 通过遍历文件名，读取pcd文件</span></span><br><span class="line">  <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt; argc; i++) <span class="comment">//遍历所有的文件名（略过程序名）</span></span><br><span class="line">  &#123;</span><br><span class="line">    std::string fname = std::string (argv[i]);</span><br><span class="line">    <span class="keyword">if</span> (fname.size () &lt;= extension.size ()) <span class="comment">//文件名的长度是否符合要求</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    std::transform (fname.begin (), fname.end (), fname.begin (), (int(*)(int))tolower); <span class="comment">//将某操作(小写字母化)应用于指定范围的每个元素</span></span><br><span class="line">    <span class="comment">//检查文件是否是pcd文件</span></span><br><span class="line">    <span class="keyword">if</span> (fname.compare (fname.size () - extension.size (), extension.size (), extension) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 读取点云，并保存到models</span></span><br><span class="line">      PCD m;</span><br><span class="line">      m.f_name = argv[i];</span><br><span class="line">      pcl::io::loadPCDFile (argv[i], *m.cloud); <span class="comment">//读取点云数据</span></span><br><span class="line">      <span class="comment">//去除点云中的NaN点（xyz都是NaN）</span></span><br><span class="line">      std::vector&lt;int&gt; indices; <span class="comment">//保存去除的点的索引</span></span><br><span class="line">      pcl::removeNaNFromPointCloud(*m.cloud,*m.cloud, indices); <span class="comment">//去除点云中的NaN点</span></span><br><span class="line"></span><br><span class="line">      models.push_back (m);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//简单地配准一对点云数据，并返回结果</span></span><br><span class="line"><span class="comment">//参数cloud_src  源点云</span></span><br><span class="line"><span class="comment">//参数cloud_tgt  目标点云</span></span><br><span class="line"><span class="comment">//参数output     输出点云</span></span><br><span class="line"><span class="comment">//参数final_transform 成对变换矩阵</span></span><br><span class="line"><span class="comment">//参数downsample 是否下采样</span></span><br><span class="line">void pairAlign (<span class="keyword">const</span> PointCloud::Ptr cloud_src, <span class="keyword">const</span> PointCloud::Ptr cloud_tgt, PointCloud::Ptr output, Eigen::Matrix4f &amp;final_transform, <span class="built_in">bool</span> downsample = <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//为了一致性和速度，下采样</span></span><br><span class="line">  <span class="comment">// \note enable this for large datasets</span></span><br><span class="line">  PointCloud::Ptr src (new PointCloud); <span class="comment">//创建点云指针</span></span><br><span class="line">  PointCloud::Ptr tgt (new PointCloud);</span><br><span class="line">  pcl::VoxelGrid&lt;PointT&gt; grid; <span class="comment">//VoxelGrid 把一个给定的点云，聚集在一个局部的3D网格上,并下采样和滤波点云数据</span></span><br><span class="line">  <span class="keyword">if</span> (downsample) <span class="comment">//下采样</span></span><br><span class="line">  &#123;</span><br><span class="line">    grid.setLeafSize (<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.05</span>); <span class="comment">//设置体元网格的叶子大小</span></span><br><span class="line">		<span class="comment">//下采样 源点云</span></span><br><span class="line">    grid.setInputCloud (cloud_src); <span class="comment">//设置输入点云</span></span><br><span class="line">    grid.filter (*src); <span class="comment">//下采样和滤波，并存储在src中</span></span><br><span class="line">		<span class="comment">//下采样 目标点云</span></span><br><span class="line">    grid.setInputCloud (cloud_tgt);</span><br><span class="line">    grid.filter (*tgt);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">//不下采样</span></span><br><span class="line">  &#123;</span><br><span class="line">    src = cloud_src; <span class="comment">//直接复制</span></span><br><span class="line">    tgt = cloud_tgt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//计算曲面的法向量和曲率</span></span><br><span class="line">  PointCloudWithNormals::Ptr points_with_normals_src (new PointCloudWithNormals); <span class="comment">//创建源点云指针（注意点的类型包含坐标和法向量）</span></span><br><span class="line">  PointCloudWithNormals::Ptr points_with_normals_tgt (new PointCloudWithNormals); <span class="comment">//创建目标点云指针（注意点的类型包含坐标和法向量）</span></span><br><span class="line">  pcl::NormalEstimation&lt;PointT, PointNormalT&gt; norm_est; <span class="comment">//该对象用于计算法向量</span></span><br><span class="line">  pcl::search::KdTree&lt;pcl::PointXYZ&gt;::Ptr tree (new pcl::search::KdTree&lt;pcl::PointXYZ&gt; ()); <span class="comment">//创建kd树，用于计算法向量的搜索方法</span></span><br><span class="line">  norm_est.setSearchMethod (tree); <span class="comment">//设置搜索方法</span></span><br><span class="line">  norm_est.setKSearch (<span class="number">30</span>); <span class="comment">//设置最近邻的数量</span></span><br><span class="line">  norm_est.setInputCloud (src); <span class="comment">//设置输入云</span></span><br><span class="line">  norm_est.compute (*points_with_normals_src); <span class="comment">//计算法向量，并存储在points_with_normals_src</span></span><br><span class="line">  pcl::copyPointCloud (*src, *points_with_normals_src); <span class="comment">//复制点云（坐标）到points_with_normals_src（包含坐标和法向量）</span></span><br><span class="line">  norm_est.setInputCloud (tgt); <span class="comment">//这3行计算目标点云的法向量，同上</span></span><br><span class="line">  norm_est.compute (*points_with_normals_tgt);</span><br><span class="line">  pcl::copyPointCloud (*tgt, *points_with_normals_tgt);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建一个 自定义点表达方式的 实例</span></span><br><span class="line">  MyPointRepresentation point_representation;</span><br><span class="line">  <span class="comment">//加权曲率维度，以和坐标xyz保持平衡</span></span><br><span class="line">  float alpha[<span class="number">4</span>] = &#123;<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>&#125;;</span><br><span class="line">  point_representation.setRescaleValues (alpha); <span class="comment">//设置缩放值（向量化点时使用）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建非线性ICP对象 并设置参数</span></span><br><span class="line">  pcl::IterativeClosestPointNonLinear&lt;PointNormalT, PointNormalT&gt; reg; <span class="comment">//创建非线性ICP对象（ICP变体，使用Levenberg-Marquardt最优化）</span></span><br><span class="line">  reg.setTransformationEpsilon (<span class="number">1e-6</span>); <span class="comment">//设置容许的最大误差（迭代最优化）</span></span><br><span class="line">  <span class="comment">//***** 注意：根据自己数据库的大小调节该参数</span></span><br><span class="line">  reg.setMaxCorrespondenceDistance (<span class="number">0.1</span>);  <span class="comment">//设置对应点之间的最大距离（0.1m）,在配准过程中，忽略大于该阈值的点</span></span><br><span class="line">  reg.setPointRepresentation (boost::make_shared&lt;<span class="keyword">const</span> MyPointRepresentation&gt; (point_representation)); <span class="comment">//设置点表达</span></span><br><span class="line">	<span class="comment">//设置源点云和目标点云</span></span><br><span class="line">  <span class="comment">//reg.setInputSource (points_with_normals_src); //版本不符合，使用下面的语句</span></span><br><span class="line">	reg.setInputCloud (points_with_normals_src); <span class="comment">//设置输入点云（待变换的点云）</span></span><br><span class="line">  reg.setInputTarget (points_with_normals_tgt); <span class="comment">//设置目标点云</span></span><br><span class="line">	reg.setMaximumIterations (<span class="number">2</span>); <span class="comment">//设置内部优化的迭代次数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Run the same optimization in a loop and visualize the results</span></span><br><span class="line">  Eigen::Matrix4f Ti = Eigen::Matrix4f::Identity (), prev, targetToSource;</span><br><span class="line">  PointCloudWithNormals::Ptr reg_result = points_with_normals_src; <span class="comment">//用于存储结果（坐标+法向量）</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">30</span>; ++i) <span class="comment">//迭代</span></span><br><span class="line">  &#123;</span><br><span class="line">    PCL_INFO (<span class="string">"Iteration Nr. %d.\n"</span>, i); <span class="comment">//命令行显示迭代的次数</span></span><br><span class="line">    <span class="comment">//保存点云，用于可视化</span></span><br><span class="line">    points_with_normals_src = reg_result; <span class="comment">//</span></span><br><span class="line">    <span class="comment">//估计</span></span><br><span class="line">    <span class="comment">//reg.setInputSource (points_with_normals_src);</span></span><br><span class="line">		reg.setInputCloud (points_with_normals_src); <span class="comment">//重新设置输入点云（待变换的点云），因为经过上一次迭代，已经发生变换了</span></span><br><span class="line">    reg.align (*reg_result); <span class="comment">//对齐（配准）两个点云</span></span><br><span class="line">		</span><br><span class="line">    Ti = reg.getFinalTransformation () * Ti; <span class="comment">//累积（每次迭代的）变换矩阵</span></span><br><span class="line">		<span class="comment">//如果这次变换和上次变换的误差比阈值小，通过减小最大的对应点距离的方法来进一步细化</span></span><br><span class="line">    <span class="keyword">if</span> (fabs ((reg.getLastIncrementalTransformation () - prev).sum ()) &lt; reg.getTransformationEpsilon ())</span><br><span class="line">      reg.setMaxCorrespondenceDistance (reg.getMaxCorrespondenceDistance () - <span class="number">0.001</span>); <span class="comment">//减小对应点之间的最大距离（上面设置过）</span></span><br><span class="line">    prev = reg.getLastIncrementalTransformation (); <span class="comment">//上一次变换的误差</span></span><br><span class="line">    <span class="comment">//显示当前配准状态，在窗口的右视区，简单的显示源点云和目标点云</span></span><br><span class="line">    showCloudsRight(points_with_normals_tgt, points_with_normals_src);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  targetToSource = Ti.inverse(); <span class="comment">//计算从目标点云到源点云的变换矩阵</span></span><br><span class="line">  pcl::transformPointCloud (*cloud_tgt, *output, targetToSource); <span class="comment">//将目标点云 变换回到 源点云帧</span></span><br><span class="line"></span><br><span class="line">  p-&gt;removePointCloud (<span class="string">"source"</span>); <span class="comment">//根据给定的ID，从屏幕中去除一个点云。参数是ID</span></span><br><span class="line">  p-&gt;removePointCloud (<span class="string">"target"</span>);</span><br><span class="line">  PointCloudColorHandlerCustom&lt;PointT&gt; cloud_tgt_h (output, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>); <span class="comment">//设置点云显示颜色，下同</span></span><br><span class="line">  PointCloudColorHandlerCustom&lt;PointT&gt; cloud_src_h (cloud_src, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  p-&gt;addPointCloud (output, cloud_tgt_h, <span class="string">"target"</span>, vp_2); <span class="comment">//添加点云数据，下同</span></span><br><span class="line">  p-&gt;addPointCloud (cloud_src, cloud_src_h, <span class="string">"source"</span>, vp_2);</span><br><span class="line"></span><br><span class="line">	PCL_INFO (<span class="string">"Press q to continue the registration.\n"</span>);</span><br><span class="line">  p-&gt;spin ();</span><br><span class="line"></span><br><span class="line">  p-&gt;removePointCloud (<span class="string">"source"</span>); </span><br><span class="line">  p-&gt;removePointCloud (<span class="string">"target"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//add the source to the transformed target</span></span><br><span class="line">  *output += *cloud_src; <span class="comment">// 拼接点云图（的点）点数数目是两个点云的点数和</span></span><br><span class="line">  </span><br><span class="line">  final_transform = targetToSource; <span class="comment">//最终的变换。目标点云到源点云的变换矩阵</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//****************  入口函数  ************************</span></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line">int main (int argc, <span class="built_in">char</span>** argv)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//读取数据</span></span><br><span class="line">  std::vector&lt;PCD, Eigen::aligned_allocator&lt;PCD&gt; &gt; data; <span class="comment">//模型</span></span><br><span class="line">  loadData (argc, argv, data); <span class="comment">//读取pcd文件数据，定义见上面</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查用户数据</span></span><br><span class="line">  <span class="keyword">if</span> (data.empty ())</span><br><span class="line">  &#123;</span><br><span class="line">    PCL_ERROR (<span class="string">"Syntax is: %s &lt;source.pcd&gt; &lt;target.pcd&gt; [*]"</span>, argv[<span class="number">0</span>]); <span class="comment">//语法</span></span><br><span class="line">    PCL_ERROR (<span class="string">"[*] - multiple files can be added. The registration results of (i, i+1) will be registered against (i+2), etc"</span>); <span class="comment">//可以使用多个文件</span></span><br><span class="line">    <span class="keyword">return</span> (-<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  PCL_INFO (<span class="string">"Loaded %d datasets."</span>, (int)data.size ()); <span class="comment">//显示读取了多少个点云文件</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//创建一个 PCLVisualizer 对象</span></span><br><span class="line">	p = new pcl::visualization::PCLVisualizer (argc, argv, <span class="string">"Pairwise Incremental Registration example"</span>); <span class="comment">//p是全局变量</span></span><br><span class="line">  p-&gt;createViewPort (<span class="number">0.0</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>, vp_1); <span class="comment">//创建左视区</span></span><br><span class="line">  p-&gt;createViewPort (<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, vp_2); <span class="comment">//创建右视区</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建点云指针和变换矩阵</span></span><br><span class="line">	PointCloud::Ptr result (new PointCloud), source, target; <span class="comment">//创建3个点云指针，分别用于结果，源点云和目标点云</span></span><br><span class="line">  <span class="comment">//全局变换矩阵，单位矩阵，成对变换</span></span><br><span class="line">	<span class="comment">//逗号表达式，先创建一个单位矩阵，然后将成对变换 赋给 全局变换</span></span><br><span class="line">	Eigen::Matrix4f GlobalTransform = Eigen::Matrix4f::Identity (), pairTransform; </span><br><span class="line">	</span><br><span class="line">  </span><br><span class="line">	<span class="comment">//遍历所有的点云文件</span></span><br><span class="line">  <span class="keyword">for</span> (size_t i = <span class="number">1</span>; i &lt; data.size (); ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    source = data[i-<span class="number">1</span>].cloud; <span class="comment">//源点云</span></span><br><span class="line">    target = data[i].cloud; <span class="comment">//目标点云</span></span><br><span class="line">    showCloudsLeft(source, target); <span class="comment">//在左视区，简单的显示源点云和目标点云</span></span><br><span class="line">    PointCloud::Ptr temp (new PointCloud); <span class="comment">//创建临时点云指针</span></span><br><span class="line">		<span class="comment">//显示正在配准的点云文件名和各自的点数</span></span><br><span class="line">    PCL_INFO (<span class="string">"Aligning %s (%d points) with %s (%d points).\n"</span>, data[i-<span class="number">1</span>].f_name.c_str (), source-&gt;points.size (), data[i].f_name.c_str (), target-&gt;points.size ());</span><br><span class="line">    </span><br><span class="line">		<span class="comment">//********************************************************</span></span><br><span class="line">		<span class="comment">//配准2个点云，函数定义见上面</span></span><br><span class="line">		pairAlign (source, target, temp, pairTransform, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//将当前的一对点云数据，变换到全局变换中。</span></span><br><span class="line">    pcl::transformPointCloud (*temp, *result, GlobalTransform);</span><br><span class="line">    <span class="comment">//更新全局变换</span></span><br><span class="line">    GlobalTransform = GlobalTransform * pairTransform;</span><br><span class="line">		<span class="comment">//********************************************************</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 保存成对的配准结果，变换到第一个点云帧</span></span><br><span class="line">    std::stringstream ss; <span class="comment">//这两句是生成文件名</span></span><br><span class="line">    ss &lt;&lt; i &lt;&lt; <span class="string">".pcd"</span>;</span><br><span class="line">    pcl::io::savePCDFile (ss.<span class="built_in">str</span> (), *result, <span class="literal">true</span>); <span class="comment">//保存成对的配准结果</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重新生成项目。</li>
<li>到改项目的Debug目录下，按住Shift，同时点击鼠标右键，在当前窗口打开CMD窗口。</li>
<li>在命令行中输入<code>pairwise_incremental_registration.exe capture0001.pcd capture0002.pcd capture0003.pcd capture0004.pcd capture0005.pcd</code>，执行程序。得到如下图所示的结果。</li>
</ul>
<p><img width="900" alt="结果图" data-src="http://img.blog.csdn.net/20160331225106854"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://pointclouds.org/documentation/tutorials/pairwise_incremental_registration.php#pairwise-incremental-registration" target="_blank" rel="noopener">How to incrementally register pairs of clouds</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL系列——如何使用迭代最近点法（ICP）配准</title>
    <url>/39c2.html</url>
    <content><![CDATA[<h2 id="PCL系列"><a href="#PCL系列" class="headerlink" title="PCL系列"></a>PCL系列</h2><ul>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%AF%BB%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——读入PCD格式文件操作</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B0%86%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%8B%BC%E6%8E%A5%E4%B8%A4%E4%B8%AA%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——拼接两个点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F%EF%BC%88RangeImage%EF%BC%89%E4%B8%AD%E6%8F%90%E5%8F%96NARF%E5%85%B3%E9%94%AE%E7%82%B9/" target="_blank" rel="noopener">PCL系列——从深度图像（RangeImage）中提取NARF关键点</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F/" target="_blank" rel="noopener">PCL系列——如何可视化深度图像</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/31/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E6%B3%95%EF%BC%88ICP%EF%BC%89%E9%85%8D%E5%87%86/" target="_blank" rel="noopener">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E9%80%90%E6%B8%90%E5%9C%B0%E9%85%8D%E5%87%86%E4%B8%80%E5%AF%B9%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E6%B3%8A%E6%9D%BE%E9%87%8D%E6%9E%84/" target="_blank" rel="noopener">PCL系列——三维重构之泊松重构</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B4%AA%E5%A9%AA%E4%B8%89%E8%A7%92%E6%8A%95%E5%BD%B1%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E7%A7%BB%E5%8A%A8%E7%AB%8B%E6%96%B9%E4%BD%93%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之移动立方体算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E6%A8%A1%E5%9E%8B%E5%88%86%E5%89%B2/" target="_blank" rel="noopener">PCL系列——平面模型分割</a></li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>通过本教程，我们将会学会：</p>
<ul>
<li>如何使用迭代最近点法（Iterative Closest Point）判断一个点云是否是另一个点云的刚体变换</li>
<li>使用的方法是：最小化两个点云中对应点之间的距离，并刚性变换他们。</li>
<li>代码说明：先生成输入点云（待变换的点云）和目标点云（变换参照），然后创建ICP对象，设置该对象的输入点云和目标点云，然后进行配准，并显示ICP配准信息和变换矩阵。</li>
</ul>
<a id="more"></a>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>在VS2010 中新建一个文件 iterative_closest_point.cpp，然后将下面的代码复制到文件中。</li>
<li>参照之前的文章，配置项目的属性。设置包含目录和库目录和附加依赖项。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; //标准输入/输出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt; //pcd文件输入/输出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt; //各种点类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/registration/icp.h&gt; //ICP(iterative closest point)配准</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//创建点云指针</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_in</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>; <span class="comment">//创建输入点云（指针）</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud_out</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>; <span class="comment">//创建输出/目标点云（指针）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//生成并填充点云cloud_in</span></span><br><span class="line">  cloud_in-&gt;width    = <span class="number">5</span>;</span><br><span class="line">  cloud_in-&gt;height   = <span class="number">1</span>;</span><br><span class="line">  cloud_in-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">  cloud_in-&gt;points.resize (cloud_in-&gt;width * cloud_in-&gt;height); <span class="comment">//变形，无序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud_in-&gt;points.size (); ++i) <span class="comment">//随机数初始化点的坐标</span></span><br><span class="line">  &#123;</span><br><span class="line">    cloud_in-&gt;points[i].x = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    cloud_in-&gt;points[i].y = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    cloud_in-&gt;points[i].z = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Saved "</span> &lt;&lt; cloud_in-&gt;points.size () &lt;&lt; <span class="string">" data points to input:"</span></span><br><span class="line">      &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="comment">//打印点云cloud_in中所有点的坐标信息</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud_in-&gt;points.size (); ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt;</span><br><span class="line">      cloud_in-&gt;points[i].x &lt;&lt; <span class="string">" "</span> &lt;&lt; cloud_in-&gt;points[i].y &lt;&lt; <span class="string">" "</span> &lt;&lt;</span><br><span class="line">      cloud_in-&gt;points[i].z &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 填充点云cloud_out</span></span><br><span class="line">  *cloud_out = *cloud_in; <span class="comment">//初始化cloud_out</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"size:"</span> &lt;&lt; cloud_out-&gt;points.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud_in-&gt;points.size (); ++i)</span><br><span class="line">    cloud_out-&gt;points[i].x = cloud_in-&gt;points[i].x + <span class="number">0.7f</span>; <span class="comment">//平移cloud_in得到cloud_out</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Transformed "</span> &lt;&lt; cloud_in-&gt;points.size () &lt;&lt; <span class="string">" data points:"</span></span><br><span class="line">      &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="comment">//打印点云cloud_out中所有点的坐标信息（每一行对应一个点的xyz坐标）</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud_out-&gt;points.size (); ++i)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; cloud_out-&gt;points[i].x &lt;&lt; <span class="string">" "</span> &lt;&lt;</span><br><span class="line">      cloud_out-&gt;points[i].y &lt;&lt; <span class="string">" "</span> &lt;&lt; cloud_out-&gt;points[i].z &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="comment">//*********************************</span></span><br><span class="line">  <span class="comment">// ICP配准</span></span><br><span class="line">  <span class="comment">//*********************************</span></span><br><span class="line">  pcl::IterativeClosestPoint&lt;pcl::PointXYZ, pcl::PointXYZ&gt; icp; <span class="comment">//创建ICP对象，用于ICP配准</span></span><br><span class="line">  icp.setInputCloud(cloud_in); <span class="comment">//设置输入点云</span></span><br><span class="line">  icp.setInputTarget(cloud_out); <span class="comment">//设置目标点云（输入点云进行仿射变换，得到目标点云）</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt; Final; <span class="comment">//存储结果</span></span><br><span class="line">  <span class="comment">//进行配准，结果存储在Final中</span></span><br><span class="line">  icp.align(Final); </span><br><span class="line">  <span class="comment">//输出ICP配准的信息（是否收敛，拟合度）</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"has converged:"</span> &lt;&lt; icp.hasConverged() &lt;&lt; <span class="string">" score: "</span> &lt;&lt;</span><br><span class="line">  icp.getFitnessScore() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="comment">//输出最终的变换矩阵（4x4）</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; icp.getFinalTransformation() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重新生成项目。</li>
<li>到改项目的Debug目录下，按住Shift，同时点击鼠标右键，在当前窗口打开CMD窗口。</li>
<li>在命令行中输入<code>iterative_closest_point.exe</code>，可以得到下图所示结果。</li>
</ul>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160331091512850"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://pointclouds.org/documentation/tutorials/iterative_closest_point.php#iterative-closest-point" target="_blank" rel="noopener">How to use iterative closest point</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL系列——将点云数据写入PCD格式文件</title>
    <url>/bac6.html</url>
    <content><![CDATA[<h2 id="PCL系列"><a href="#PCL系列" class="headerlink" title="PCL系列"></a>PCL系列</h2><ul>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%AF%BB%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——读入PCD格式文件操作</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B0%86%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%8B%BC%E6%8E%A5%E4%B8%A4%E4%B8%AA%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——拼接两个点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F%EF%BC%88RangeImage%EF%BC%89%E4%B8%AD%E6%8F%90%E5%8F%96NARF%E5%85%B3%E9%94%AE%E7%82%B9/" target="_blank" rel="noopener">PCL系列——从深度图像（RangeImage）中提取NARF关键点</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F/" target="_blank" rel="noopener">PCL系列——如何可视化深度图像</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/31/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E6%B3%95%EF%BC%88ICP%EF%BC%89%E9%85%8D%E5%87%86/" target="_blank" rel="noopener">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E9%80%90%E6%B8%90%E5%9C%B0%E9%85%8D%E5%87%86%E4%B8%80%E5%AF%B9%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E6%B3%8A%E6%9D%BE%E9%87%8D%E6%9E%84/" target="_blank" rel="noopener">PCL系列——三维重构之泊松重构</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B4%AA%E5%A9%AA%E4%B8%89%E8%A7%92%E6%8A%95%E5%BD%B1%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E7%A7%BB%E5%8A%A8%E7%AB%8B%E6%96%B9%E4%BD%93%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之移动立方体算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E6%A8%A1%E5%9E%8B%E5%88%86%E5%89%B2/" target="_blank" rel="noopener">PCL系列——平面模型分割</a></li>
</ul>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>在VS2010 中新建一个文件pcd_write.cpp，然后将下面的代码复制到文件中。</li>
<li>参照之前的文章，配置项目的属性。设置包含目录和库目录和附加依赖项。</li>
</ul>
<a id="more"></a>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; //标准输入输出流</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt; //PCL的PCD格式文件的输入输出头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt; //PCL对各种格式的点的支持头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt; cloud; <span class="comment">// 创建点云（不是指针）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//填充点云数据</span></span><br><span class="line">  cloud.<span class="built_in">width</span>    = <span class="number">5</span>; <span class="comment">//设置点云宽度</span></span><br><span class="line">  cloud.<span class="built_in">height</span>   = <span class="number">1</span>; <span class="comment">//设置点云高度</span></span><br><span class="line">  cloud.is_dense = <span class="literal">false</span>; <span class="comment">//非密集型</span></span><br><span class="line">  cloud.points.resize (cloud.<span class="built_in">width</span> * cloud.<span class="built_in">height</span>); <span class="comment">//变形，无序</span></span><br><span class="line">	<span class="comment">//设置这些点的坐标</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud.points.<span class="built_in">size</span> (); ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    cloud.points[i].x = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    cloud.points[i].y = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">    cloud.points[i].z = <span class="number">1024</span> * rand () / (RAND_MAX + <span class="number">1.0f</span>);</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="comment">//保存到PCD文件</span></span><br><span class="line">  pcl::io::savePCDFileASCII (<span class="string">"test_pcd.pcd"</span>, cloud); <span class="comment">//将点云保存到PCD文件中</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Saved "</span> &lt;&lt; cloud.points.<span class="built_in">size</span> () &lt;&lt; <span class="string">" data points to test_pcd.pcd."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">//显示点云数据</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; cloud.points.<span class="built_in">size</span> (); ++i)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; cloud.points[i].x &lt;&lt; <span class="string">" "</span> &lt;&lt; cloud.points[i].y &lt;&lt; <span class="string">" "</span> &lt;&lt; cloud.points[i].z &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行结束后，在项目目录下生成test_pcd.pcd文件，内容如下图所示。</li>
</ul>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160330105303294"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://pointclouds.org/documentation/tutorials/writing_pcd.php#writing-pcd" target="_blank" rel="noopener">Writing Point Cloud data to PCD files</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL系列——如何可视化深度图像</title>
    <url>/fdc7.html</url>
    <content><![CDATA[<h2 id="PCL系列"><a href="#PCL系列" class="headerlink" title="PCL系列"></a>PCL系列</h2><ul>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%AF%BB%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——读入PCD格式文件操作</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B0%86%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%8B%BC%E6%8E%A5%E4%B8%A4%E4%B8%AA%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——拼接两个点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F%EF%BC%88RangeImage%EF%BC%89%E4%B8%AD%E6%8F%90%E5%8F%96NARF%E5%85%B3%E9%94%AE%E7%82%B9/" target="_blank" rel="noopener">PCL系列——从深度图像（RangeImage）中提取NARF关键点</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F/" target="_blank" rel="noopener">PCL系列——如何可视化深度图像</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/31/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E6%B3%95%EF%BC%88ICP%EF%BC%89%E9%85%8D%E5%87%86/" target="_blank" rel="noopener">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E9%80%90%E6%B8%90%E5%9C%B0%E9%85%8D%E5%87%86%E4%B8%80%E5%AF%B9%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E6%B3%8A%E6%9D%BE%E9%87%8D%E6%9E%84/" target="_blank" rel="noopener">PCL系列——三维重构之泊松重构</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B4%AA%E5%A9%AA%E4%B8%89%E8%A7%92%E6%8A%95%E5%BD%B1%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E7%A7%BB%E5%8A%A8%E7%AB%8B%E6%96%B9%E4%BD%93%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之移动立方体算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E6%A8%A1%E5%9E%8B%E5%88%86%E5%89%B2/" target="_blank" rel="noopener">PCL系列——平面模型分割</a></li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>通过本教程，我们将会学会：</p>
<ul>
<li>如何通过两种方式可视化深度图像。</li>
<li>一种方式是在3D viewer中以点云的方式显示。（深度图来源于点云图）</li>
<li>一种方式是作为一幅图像显示（以不同的颜色表示不同的深度值）</li>
</ul>
<a id="more"></a>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>在VS2010 中新建一个文件 range_image_visualization.cpp，然后将下面的代码复制到文件中。</li>
<li>参照之前的文章，配置项目的属性。设置包含目录和库目录和附加依赖项。</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; //标准输入/输出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt; //多线程</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/common/common_headers.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/range_image/range_image.h&gt; //深度图有关头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt; //pcd文件输入/输出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/range_image_visualizer.h&gt; //深度图可视化</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/console/parse.h&gt; //命令行参数解析</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pcl::PointXYZ PointType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数 全局</span></span><br><span class="line"><span class="keyword">float</span> angular_resolution_x = <span class="number">0.5f</span>, <span class="comment">//角分辨率（单位弧度）</span></span><br><span class="line">      angular_resolution_y = angular_resolution_x;</span><br><span class="line">pcl::RangeImage::CoordinateFrame coordinate_frame = pcl::RangeImage::CAMERA_FRAME; <span class="comment">//坐标帧（相机帧）</span></span><br><span class="line"><span class="keyword">bool</span> live_update = <span class="literal">true</span>; <span class="comment">//是否根据选择的视角更新深度图像</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印帮助信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printUsage</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* progName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\nUsage: "</span>&lt;&lt;progName&lt;&lt;<span class="string">" [options] &lt;scene.pcd&gt;\n\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"Options:\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-------------------------------------------\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-rx &lt;float&gt;  angular resolution in degrees (default "</span>&lt;&lt;angular_resolution_x&lt;&lt;<span class="string">")\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-ry &lt;float&gt;  angular resolution in degrees (default "</span>&lt;&lt;angular_resolution_y&lt;&lt;<span class="string">")\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-c &lt;int&gt;     coordinate frame (default "</span>&lt;&lt; (<span class="keyword">int</span>)coordinate_frame&lt;&lt;<span class="string">")\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-l           live update - update the range image according to the selected view in the 3D viewer.\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-h           this help\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"\n\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void setViewerPose (pcl::visualization::PCLVisualizer&amp; viewer, const Eigen::Affine3f&amp; viewer_pose)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  Eigen::Vector3f pos_vector = viewer_pose * Eigen::Vector3f(0, 0, 0);</span></span><br><span class="line"><span class="comment">  Eigen::Vector3f look_at_vector = viewer_pose.rotation () * Eigen::Vector3f(0, 0, 1) + pos_vector;</span></span><br><span class="line"><span class="comment">  Eigen::Vector3f up_vector = viewer_pose.rotation () * Eigen::Vector3f(0, -1, 0);</span></span><br><span class="line"><span class="comment">  viewer.setCameraPosition (pos_vector[0], pos_vector[1], pos_vector[2],</span></span><br><span class="line"><span class="comment">                            look_at_vector[0], look_at_vector[1], look_at_vector[2],</span></span><br><span class="line"><span class="comment">                            up_vector[0], up_vector[1], up_vector[2]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//解析命令行参数</span></span><br><span class="line">  <span class="keyword">if</span> (pcl::console::find_argument (argc, argv, <span class="string">"-h"</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    printUsage (argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (pcl::console::find_argument (argc, argv, <span class="string">"-l"</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    live_update = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Live update is on.\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (pcl::console::parse (argc, argv, <span class="string">"-rx"</span>, angular_resolution_x) &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Setting angular resolution in x-direction to "</span>&lt;&lt;angular_resolution_x&lt;&lt;<span class="string">"deg.\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (pcl::console::parse (argc, argv, <span class="string">"-ry"</span>, angular_resolution_y) &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Setting angular resolution in y-direction to "</span>&lt;&lt;angular_resolution_y&lt;&lt;<span class="string">"deg.\n"</span>;</span><br><span class="line">  <span class="keyword">int</span> tmp_coordinate_frame;</span><br><span class="line">  <span class="keyword">if</span> (pcl::console::parse (argc, argv, <span class="string">"-c"</span>, tmp_coordinate_frame) &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    coordinate_frame = pcl::RangeImage::CoordinateFrame (tmp_coordinate_frame);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Using coordinate frame "</span>&lt;&lt; (<span class="keyword">int</span>)coordinate_frame&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  angular_resolution_x = pcl::deg2rad (angular_resolution_x);</span><br><span class="line">  angular_resolution_y = pcl::deg2rad (angular_resolution_y);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//读取pcd文件。如果没有指定文件，则创建样本云点</span></span><br><span class="line">  pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">point_cloud_ptr</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;)</span></span>;</span><br><span class="line">  pcl::PointCloud&lt;PointType&gt;&amp; point_cloud = *point_cloud_ptr;</span><br><span class="line">  Eigen::<span class="function">Affine3f <span class="title">scene_sensor_pose</span> <span class="params">(Eigen::Affine3f::Identity ())</span></span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pcd_filename_indices = pcl::console::parse_file_extension_argument (argc, argv, <span class="string">"pcd"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!pcd_filename_indices.empty ())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> filename = argv[pcd_filename_indices[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">if</span> (pcl::io::loadPCDFile (filename, point_cloud) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Was not able to open file \""</span>&lt;&lt;filename&lt;&lt;<span class="string">"\".\n"</span>;</span><br><span class="line">      printUsage (argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    scene_sensor_pose = Eigen::Affine3f (Eigen::Translation3f (point_cloud.sensor_origin_[<span class="number">0</span>],</span><br><span class="line">                                                             point_cloud.sensor_origin_[<span class="number">1</span>],</span><br><span class="line">                                                             point_cloud.sensor_origin_[<span class="number">2</span>])) *</span><br><span class="line">                        Eigen::Affine3f (point_cloud.sensor_orientation_);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\nNo *.pcd file given =&gt; Genarating example point cloud.\n\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">float</span> x=<span class="number">-0.5f</span>; x&lt;=<span class="number">0.5f</span>; x+=<span class="number">0.01f</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">float</span> y=<span class="number">-0.5f</span>; y&lt;=<span class="number">0.5f</span>; y+=<span class="number">0.01f</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        PointType <span class="built_in">point</span>;  <span class="built_in">point</span>.x = x;  <span class="built_in">point</span>.y = y;  <span class="built_in">point</span>.z = <span class="number">2.0f</span> - y;</span><br><span class="line">        point_cloud.points.push_back (<span class="built_in">point</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    point_cloud.<span class="built_in">width</span> = (<span class="keyword">int</span>) point_cloud.points.<span class="built_in">size</span> ();  point_cloud.<span class="built_in">height</span> = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//从点云创建出深度图</span></span><br><span class="line">  <span class="keyword">float</span> noise_level = <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">float</span> min_range = <span class="number">0.0f</span>;</span><br><span class="line">  <span class="keyword">int</span> border_size = <span class="number">1</span>;</span><br><span class="line">  boost::<span class="built_in">shared_ptr</span>&lt;pcl::RangeImage&gt; range_image_ptr(<span class="keyword">new</span> pcl::RangeImage); <span class="comment">//深度图指针</span></span><br><span class="line">  pcl::RangeImage&amp; range_image = *range_image_ptr;   <span class="comment">//引用</span></span><br><span class="line">  range_image.createFromPointCloud (point_cloud, angular_resolution_x, angular_resolution_y,</span><br><span class="line">                                    pcl::deg2rad (<span class="number">360.0f</span>), pcl::deg2rad (<span class="number">180.0f</span>),</span><br><span class="line">                                    scene_sensor_pose, coordinate_frame, noise_level, min_range, border_size); <span class="comment">//从点云创建出深度图</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//打开一个3D图形窗口，并添加点云数据</span></span><br><span class="line">  pcl::visualization::<span class="function">PCLVisualizer <span class="title">viewer</span> <span class="params">(<span class="string">"3D Viewer"</span>)</span></span>;</span><br><span class="line">  viewer.setBackgroundColor (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">//背景</span></span><br><span class="line">  pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointWithRange&gt; range_image_color_handler (range_image_ptr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  viewer.addPointCloud (range_image_ptr, range_image_color_handler, <span class="string">"range image"</span>);</span><br><span class="line">  viewer.setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, <span class="number">1</span>, <span class="string">"range image"</span>);</span><br><span class="line">  <span class="comment">//viewer.addCoordinateSystem (1.0f, "global");</span></span><br><span class="line">  <span class="comment">//PointCloudColorHandlerCustom&lt;PointType&gt; point_cloud_color_handler (point_cloud_ptr, 150, 150, 150);</span></span><br><span class="line">  <span class="comment">//viewer.addPointCloud (point_cloud_ptr, point_cloud_color_handler, "original point cloud");</span></span><br><span class="line">  viewer.initCameraParameters ();</span><br><span class="line">  <span class="comment">//setViewerPose(viewer, range_image.getTransformationToWorldSystem ()); //PCL 1.6 出错</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//以图像的形式显示深度图像，深度值作为颜色显示</span></span><br><span class="line">  pcl::visualization::<span class="function">RangeImageVisualizer <span class="title">range_image_widget</span> <span class="params">(<span class="string">"Range image"</span>)</span></span>;</span><br><span class="line">  range_image_widget.showRangeImage (range_image);</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//主循环</span></span><br><span class="line">  <span class="keyword">while</span> (!viewer.wasStopped ())</span><br><span class="line">  &#123;</span><br><span class="line">    range_image_widget.spinOnce ();</span><br><span class="line">    viewer.spinOnce ();</span><br><span class="line">    pcl_sleep (<span class="number">0.01</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (live_update) <span class="comment">//根据3D显示，实时更新2D图像</span></span><br><span class="line">    &#123;</span><br><span class="line">      scene_sensor_pose = viewer.getViewerPose(); <span class="comment">//获取观测姿势</span></span><br><span class="line">      range_image.createFromPointCloud (point_cloud, angular_resolution_x, angular_resolution_y,</span><br><span class="line">                                        pcl::deg2rad (<span class="number">360.0f</span>), pcl::deg2rad (<span class="number">180.0f</span>),</span><br><span class="line">                                        scene_sensor_pose, pcl::RangeImage::LASER_FRAME, noise_level, min_range, border_size); <span class="comment">//重新生成新的深度图</span></span><br><span class="line">      range_image_widget.showRangeImage (range_image); <span class="comment">//重新显示</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重新生成项目。</li>
<li>到改项目的Debug目录下，按住Shift，同时点击鼠标右键，在当前窗口打开CMD窗口。</li>
<li>在命令行中输入<code>range_image_visualization.exe</code>，执行程序。结果如下图所示。<ul>
<li>图1是命令行的显示，因为没有指定pcd文件，程序生成了点云数据。</li>
<li>图2是2D显示方式。</li>
<li>图3是3D显示方式。</li>
<li>2D显示方式会随3D显示的变化而自动变化。</li>
</ul>
</li>
</ul>
<p><img alt="图1" data-src="http://img.blog.csdn.net/20160330211901995"><br><img alt="图2" data-src="http://img.blog.csdn.net/20160330211910011"><br><img alt="图3" data-src="http://img.blog.csdn.net/20160330211919355"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://pointclouds.org/documentation/tutorials/range_image_visualization.php#range-image-visualization" target="_blank" rel="noopener">How to visualize a range image</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL系列——从深度图像（RangeImage）中提取NARF关键点</title>
    <url>/630.html</url>
    <content><![CDATA[<h2 id="PCL系列"><a href="#PCL系列" class="headerlink" title="PCL系列"></a>PCL系列</h2><ul>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%AF%BB%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——读入PCD格式文件操作</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B0%86%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%8B%BC%E6%8E%A5%E4%B8%A4%E4%B8%AA%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——拼接两个点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F%EF%BC%88RangeImage%EF%BC%89%E4%B8%AD%E6%8F%90%E5%8F%96NARF%E5%85%B3%E9%94%AE%E7%82%B9/" target="_blank" rel="noopener">PCL系列——从深度图像（RangeImage）中提取NARF关键点</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F/" target="_blank" rel="noopener">PCL系列——如何可视化深度图像</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/31/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E6%B3%95%EF%BC%88ICP%EF%BC%89%E9%85%8D%E5%87%86/" target="_blank" rel="noopener">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E9%80%90%E6%B8%90%E5%9C%B0%E9%85%8D%E5%87%86%E4%B8%80%E5%AF%B9%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E6%B3%8A%E6%9D%BE%E9%87%8D%E6%9E%84/" target="_blank" rel="noopener">PCL系列——三维重构之泊松重构</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B4%AA%E5%A9%AA%E4%B8%89%E8%A7%92%E6%8A%95%E5%BD%B1%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E7%A7%BB%E5%8A%A8%E7%AB%8B%E6%96%B9%E4%BD%93%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之移动立方体算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E6%A8%A1%E5%9E%8B%E5%88%86%E5%89%B2/" target="_blank" rel="noopener">PCL系列——平面模型分割</a></li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>通过本教程，我们将会学会：如何从深度图像中提取NARF关键点。</li>
<li>首先从硬盘中读取点云文件，然后提取它的NARF关键点，最后显示结果。</li>
<li>下面的代码中，先是命令行解析，然后是读取点云文件，如果点云文件不存在，就创造一个深度图像，并显示它。</li>
</ul>
<a id="more"></a>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>参照之前的文章，配置项目的属性。设置包含目录和库目录和附加依赖项。</li>
<li>在VS2010 中新建一个文件 narf_keypoint_extraction.cpp，然后将下面的代码复制到文件中。</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; //标准输入输出流</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/range_image/range_image.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt; //PCL的PCD格式文件的输入输出头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/range_image_visualizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/features/range_image_border_extractor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/keypoints/narf_keypoint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/console/parse.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pcl::PointXYZ PointType; <span class="comment">//定义别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数 全局变量</span></span><br><span class="line"><span class="keyword">float</span> angular_resolution = <span class="number">0.5f</span>; <span class="comment">//角坐标分辨率</span></span><br><span class="line"><span class="keyword">float</span> support_size = <span class="number">0.2f</span>; <span class="comment">//感兴趣点的尺寸（球面的直径）</span></span><br><span class="line">pcl::RangeImage::CoordinateFrame coordinate_frame = pcl::RangeImage::CAMERA_FRAME; <span class="comment">//坐标框架：相机框架（而不是激光框架）</span></span><br><span class="line"><span class="keyword">bool</span> setUnseenToMaxRange = <span class="literal">false</span>; <span class="comment">//是否将所有不可见的点 看作 最大距离</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//帮助</span></span><br><span class="line"><span class="comment">//当用户输入命令行参数-h，打印帮助信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printUsage</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* progName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\nUsage: "</span>&lt;&lt;progName&lt;&lt;<span class="string">" [options] &lt;scene.pcd&gt;\n\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"Options:\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-------------------------------------------\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-r &lt;float&gt;   angular resolution in degrees (default "</span>&lt;&lt;angular_resolution&lt;&lt;<span class="string">")\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-c &lt;int&gt;     coordinate frame (default "</span>&lt;&lt; (<span class="keyword">int</span>)coordinate_frame&lt;&lt;<span class="string">")\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-m           Treat all unseen points as maximum range readings\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-s &lt;float&gt;   support size for the interest points (diameter of the used sphere - "</span></span><br><span class="line">            &lt;&lt;                                                     <span class="string">"default "</span>&lt;&lt;support_size&lt;&lt;<span class="string">")\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-h           this help\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"\n\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//解析 命令行 参数</span></span><br><span class="line">  <span class="keyword">if</span> (pcl::console::find_argument (argc, argv, <span class="string">"-h"</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    printUsage (argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (pcl::console::find_argument (argc, argv, <span class="string">"-m"</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    setUnseenToMaxRange = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Setting unseen values in range image to maximum range readings.\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> tmp_coordinate_frame;</span><br><span class="line">  <span class="keyword">if</span> (pcl::console::parse (argc, argv, <span class="string">"-c"</span>, tmp_coordinate_frame) &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    coordinate_frame = pcl::RangeImage::CoordinateFrame (tmp_coordinate_frame); <span class="comment">//以函数的方式初始化（0：相机框架；1：激光框架）</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Using coordinate frame "</span>&lt;&lt; (<span class="keyword">int</span>)coordinate_frame&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (pcl::console::parse (argc, argv, <span class="string">"-s"</span>, support_size) &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Setting support size to "</span>&lt;&lt;support_size&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (pcl::console::parse (argc, argv, <span class="string">"-r"</span>, angular_resolution) &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Setting angular resolution to "</span>&lt;&lt;angular_resolution&lt;&lt;<span class="string">"deg.\n"</span>;</span><br><span class="line">  angular_resolution = pcl::deg2rad (angular_resolution);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//读取pcd文件；如果没有指定文件，就创建样本点</span></span><br><span class="line">  pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">point_cloud_ptr</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;)</span></span>; <span class="comment">//点云指针</span></span><br><span class="line">  pcl::PointCloud&lt;PointType&gt;&amp; point_cloud = *point_cloud_ptr; <span class="comment">//上面点云的别名</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointWithViewpoint&gt; far_ranges; <span class="comment">//带视角的点构成的点云</span></span><br><span class="line">  Eigen::<span class="function">Affine3f <span class="title">scene_sensor_pose</span> <span class="params">(Eigen::Affine3f::Identity ())</span></span>; <span class="comment">//仿射变换</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pcd_filename_indices = pcl::console::parse_file_extension_argument (argc, argv, <span class="string">"pcd"</span>);<span class="comment">//检查参数中是否有pcd格式文件名，返回参数向量中的索引号</span></span><br><span class="line">  <span class="keyword">if</span> (!pcd_filename_indices.empty ())<span class="comment">//如果指定了pcd文件，读取pcd文件和对应的远距离pcd文件</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> filename = argv[pcd_filename_indices[<span class="number">0</span>]]; <span class="comment">//文件名</span></span><br><span class="line">    <span class="keyword">if</span> (pcl::io::loadPCDFile (filename, point_cloud) == <span class="number">-1</span>) <span class="comment">//读取pcd文件</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Was not able to open file \""</span>&lt;&lt;filename&lt;&lt;<span class="string">"\".\n"</span>; <span class="comment">//是否应该是std::cerr</span></span><br><span class="line">      printUsage (argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    scene_sensor_pose = Eigen::Affine3f (Eigen::Translation3f (point_cloud.sensor_origin_[<span class="number">0</span>],</span><br><span class="line">                                                               point_cloud.sensor_origin_[<span class="number">1</span>],</span><br><span class="line">                                                               point_cloud.sensor_origin_[<span class="number">2</span>])) *</span><br><span class="line">                        Eigen::Affine3f (point_cloud.sensor_orientation_); <span class="comment">//设置传感器的姿势</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> far_ranges_filename = pcl::getFilenameWithoutExtension (filename)+<span class="string">"_far_ranges.pcd"</span>; <span class="comment">//远距离文件名</span></span><br><span class="line">    <span class="keyword">if</span> (pcl::io::loadPCDFile (far_ranges_filename.c_str (), far_ranges) == <span class="number">-1</span>) <span class="comment">//读取远距离pcd文件</span></span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Far ranges file \""</span>&lt;&lt;far_ranges_filename&lt;&lt;<span class="string">"\" does not exists.\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">//没有指定pcd文件，生成点云，并填充它</span></span><br><span class="line">  &#123;</span><br><span class="line">    setUnseenToMaxRange = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\nNo *.pcd file given =&gt; Genarating example point cloud.\n\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">float</span> x=<span class="number">-0.5f</span>; x&lt;=<span class="number">0.5f</span>; x+=<span class="number">0.01f</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">float</span> y=<span class="number">-0.5f</span>; y&lt;=<span class="number">0.5f</span>; y+=<span class="number">0.01f</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        PointType <span class="built_in">point</span>;  </span><br><span class="line">				<span class="built_in">point</span>.x = x;  <span class="built_in">point</span>.y = y;  <span class="built_in">point</span>.z = <span class="number">2.0f</span> - y;</span><br><span class="line">        point_cloud.points.push_back (<span class="built_in">point</span>); <span class="comment">//设置点云中点的坐标</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    point_cloud.<span class="built_in">width</span> = (<span class="keyword">int</span>) point_cloud.points.<span class="built_in">size</span> ();  </span><br><span class="line">		point_cloud.<span class="built_in">height</span> = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//从点云数据，创建深度图像</span></span><br><span class="line">  <span class="keyword">float</span> noise_level = <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">float</span> min_range = <span class="number">0.0f</span>;</span><br><span class="line">  <span class="keyword">int</span> border_size = <span class="number">1</span>;</span><br><span class="line">  boost::<span class="built_in">shared_ptr</span>&lt;pcl::RangeImage&gt; range_image_ptr (<span class="keyword">new</span> pcl::RangeImage); <span class="comment">//创建RangeImage对象（指针）</span></span><br><span class="line">  pcl::RangeImage&amp; range_image = *range_image_ptr;  <span class="comment">//引用</span></span><br><span class="line">  range_image.createFromPointCloud (point_cloud, angular_resolution, pcl::deg2rad (<span class="number">360.0f</span>), pcl::deg2rad (<span class="number">180.0f</span>),</span><br><span class="line">                                   scene_sensor_pose, coordinate_frame, noise_level, min_range, border_size); <span class="comment">//从点云创建深度图像</span></span><br><span class="line">  range_image.integrateFarRanges (far_ranges); <span class="comment">//整合远距离点云</span></span><br><span class="line">  <span class="keyword">if</span> (setUnseenToMaxRange)</span><br><span class="line">    range_image.setUnseenToMaxRange ();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//打开3D观察图形窗口，并添加点云</span></span><br><span class="line">  pcl::visualization::<span class="function">PCLVisualizer <span class="title">viewer</span> <span class="params">(<span class="string">"3D Viewer"</span>)</span></span>; <span class="comment">//创建3D Viewer对象</span></span><br><span class="line">  viewer.setBackgroundColor (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">//设置背景色</span></span><br><span class="line">  pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointWithRange&gt; range_image_color_handler (range_image_ptr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  viewer.addPointCloud (range_image_ptr, range_image_color_handler, <span class="string">"range image"</span>); <span class="comment">//添加点云</span></span><br><span class="line">  viewer.setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, <span class="number">1</span>, <span class="string">"range image"</span>);</span><br><span class="line">  <span class="comment">//viewer.addCoordinateSystem (1.0f, "global");</span></span><br><span class="line">  <span class="comment">//PointCloudColorHandlerCustom&lt;PointType&gt; point_cloud_color_handler (point_cloud_ptr, 150, 150, 150);</span></span><br><span class="line">  <span class="comment">//viewer.addPointCloud (point_cloud_ptr, point_cloud_color_handler, "original point cloud");</span></span><br><span class="line">  viewer.initCameraParameters ();</span><br><span class="line">  <span class="comment">//setViewerPose (viewer, range_image.getTransformationToWorldSystem ());</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//显示深度图像（平面图，上面的3D显示）</span></span><br><span class="line">  pcl::visualization::<span class="function">RangeImageVisualizer <span class="title">range_image_widget</span> <span class="params">(<span class="string">"Range image"</span>)</span></span>;</span><br><span class="line">  range_image_widget.showRangeImage (range_image);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//提取NARF关键点</span></span><br><span class="line">  pcl::RangeImageBorderExtractor range_image_border_extractor; <span class="comment">//创建深度图像的边界提取器，用于提取NARF关键点</span></span><br><span class="line">  pcl::<span class="function">NarfKeypoint <span class="title">narf_keypoint_detector</span> <span class="params">(&amp;range_image_border_extractor)</span></span>; <span class="comment">//创建NARF对象</span></span><br><span class="line">  narf_keypoint_detector.setRangeImage (&amp;range_image);</span><br><span class="line">  narf_keypoint_detector.getParameters ().support_size = support_size;</span><br><span class="line">  <span class="comment">//narf_keypoint_detector.getParameters ().add_points_on_straight_edges = true;</span></span><br><span class="line">  <span class="comment">//narf_keypoint_detector.getParameters ().distance_for_additional_points = 0.5;</span></span><br><span class="line">  </span><br><span class="line">  pcl::PointCloud&lt;<span class="keyword">int</span>&gt; keypoint_indices; <span class="comment">//用于存储关键点的索引</span></span><br><span class="line">  narf_keypoint_detector.compute (keypoint_indices); <span class="comment">//计算NARF关键点</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Found "</span>&lt;&lt;keypoint_indices.points.<span class="built_in">size</span> ()&lt;&lt;<span class="string">" key points.\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在range_image_widget中显示关键点</span></span><br><span class="line">  <span class="comment">//for (size_t i=0; i&lt;keypoint_indices.points.size (); ++i)</span></span><br><span class="line">    <span class="comment">//range_image_widget.markPoint (keypoint_indices.points[i]%range_image.width,</span></span><br><span class="line">                                  <span class="comment">//keypoint_indices.points[i]/range_image.width);</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//在3D图形窗口中显示关键点</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">keypoints_ptr</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>; <span class="comment">//创建关键点指针</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt;&amp; keypoints = *keypoints_ptr; <span class="comment">//引用</span></span><br><span class="line">  keypoints.points.resize (keypoint_indices.points.<span class="built_in">size</span> ()); <span class="comment">//点云变形，无序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;keypoint_indices.points.<span class="built_in">size</span> (); ++i)</span><br><span class="line">    keypoints.points[i].getVector3fMap () = range_image.points[keypoint_indices.points[i]].getVector3fMap ();</span><br><span class="line"></span><br><span class="line">  pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointXYZ&gt; keypoints_color_handler (keypoints_ptr, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">  viewer.addPointCloud&lt;pcl::PointXYZ&gt; (keypoints_ptr, keypoints_color_handler, <span class="string">"keypoints"</span>);</span><br><span class="line">  viewer.setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, <span class="number">7</span>, <span class="string">"keypoints"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// -----Main loop-----</span></span><br><span class="line">  <span class="keyword">while</span> (!viewer.wasStopped ())</span><br><span class="line">  &#123;</span><br><span class="line">    range_image_widget.spinOnce ();  <span class="comment">// 处理 GUI事件</span></span><br><span class="line">    viewer.spinOnce ();</span><br><span class="line">    pcl_sleep(<span class="number">0.01</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重新生成项目。</li>
<li>到改项目的Debug目录下，按住Shift，同时点击鼠标右键，在当前窗口打开CMD窗口。</li>
<li>在命令行中输入<code>narf_keypoint_extraction.exe</code>执行程序，<code>narf_keypoint_extraction.exe -h</code>显示帮助信息。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://pointclouds.org/documentation/tutorials/narf_keypoint_extraction.php#narf-keypoint-extraction" target="_blank" rel="noopener">How to extract NARF keypoint from a range image</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL系列——从深度图像(RangeImage)中提取NARF关键点</title>
    <url>/4b6a.html</url>
    <content><![CDATA[<h2 id="PCL系列"><a href="#PCL系列" class="headerlink" title="PCL系列"></a>PCL系列</h2><ul>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/51012300" target="_blank" rel="noopener">PCL系列——读入PCD格式文件操作</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/51012463" target="_blank" rel="noopener">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/51014388" target="_blank" rel="noopener">PCL系列——拼接两个点云</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/51018872" target="_blank" rel="noopener">PCL系列——从深度图像(RangeImage)中提取NARF关键点</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/51019461" target="_blank" rel="noopener">PCL系列——如何可视化深度图像</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/51023251" target="_blank" rel="noopener">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/51030943" target="_blank" rel="noopener">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/51034189" target="_blank" rel="noopener">PCL系列——三维重构之泊松重构</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/51034272" target="_blank" rel="noopener">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/51034359" target="_blank" rel="noopener">PCL系列——三维重构之移动立方体算法</a></li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>通过本教程，我们将会学会：如何从深度图像中提取NARF关键点。</li>
<li>首先从硬盘中读取点云文件，然后提取它的NARF关键点，最后显示结果。</li>
<li>下面的代码中，先是命令行解析，然后是读取点云文件，如果点云文件不存在，就创造一个深度图像，并显示它。</li>
</ul>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>参照之前的文章，配置项目的属性。设置包含目录和库目录和附加依赖项。</li>
<li><p>在VS2010 中新建一个文件 narf_keypoint_extraction.cpp，然后将下面的代码复制到文件中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; //标准输入输出流</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/range_image/range_image.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt; //PCL的PCD格式文件的输入输出头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/range_image_visualizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/visualization/pcl_visualizer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/features/range_image_border_extractor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/keypoints/narf_keypoint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/console/parse.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pcl::PointXYZ PointType; <span class="comment">//定义别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数 全局变量</span></span><br><span class="line"><span class="keyword">float</span> angular_resolution = <span class="number">0.5f</span>; <span class="comment">//角坐标分辨率</span></span><br><span class="line"><span class="keyword">float</span> support_size = <span class="number">0.2f</span>; <span class="comment">//感兴趣点的尺寸（球面的直径）</span></span><br><span class="line">pcl::RangeImage::CoordinateFrame coordinate_frame = pcl::RangeImage::CAMERA_FRAME; <span class="comment">//坐标框架：相机框架（而不是激光框架）</span></span><br><span class="line"><span class="keyword">bool</span> setUnseenToMaxRange = <span class="literal">false</span>; <span class="comment">//是否将所有不可见的点 看作 最大距离</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//帮助</span></span><br><span class="line"><span class="comment">//当用户输入命令行参数-h，打印帮助信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printUsage</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* progName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\nUsage: "</span>&lt;&lt;progName&lt;&lt;<span class="string">" [options] &lt;scene.pcd&gt;\n\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"Options:\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-------------------------------------------\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-r &lt;float&gt;   angular resolution in degrees (default "</span>&lt;&lt;angular_resolution&lt;&lt;<span class="string">")\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-c &lt;int&gt;     coordinate frame (default "</span>&lt;&lt; (<span class="keyword">int</span>)coordinate_frame&lt;&lt;<span class="string">")\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-m           Treat all unseen points as maximum range readings\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-s &lt;float&gt;   support size for the interest points (diameter of the used sphere - "</span></span><br><span class="line">            &lt;&lt;                                                     <span class="string">"default "</span>&lt;&lt;support_size&lt;&lt;<span class="string">")\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"-h           this help\n"</span></span><br><span class="line">            &lt;&lt; <span class="string">"\n\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//解析 命令行 参数</span></span><br><span class="line">  <span class="keyword">if</span> (pcl::console::find_argument (argc, argv, <span class="string">"-h"</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    printUsage (argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (pcl::console::find_argument (argc, argv, <span class="string">"-m"</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    setUnseenToMaxRange = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Setting unseen values in range image to maximum range readings.\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> tmp_coordinate_frame;</span><br><span class="line">  <span class="keyword">if</span> (pcl::console::parse (argc, argv, <span class="string">"-c"</span>, tmp_coordinate_frame) &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    coordinate_frame = pcl::RangeImage::CoordinateFrame (tmp_coordinate_frame); <span class="comment">//以函数的方式初始化（0：相机框架；1：激光框架）</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Using coordinate frame "</span>&lt;&lt; (<span class="keyword">int</span>)coordinate_frame&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (pcl::console::parse (argc, argv, <span class="string">"-s"</span>, support_size) &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Setting support size to "</span>&lt;&lt;support_size&lt;&lt;<span class="string">".\n"</span>;</span><br><span class="line">  <span class="keyword">if</span> (pcl::console::parse (argc, argv, <span class="string">"-r"</span>, angular_resolution) &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Setting angular resolution to "</span>&lt;&lt;angular_resolution&lt;&lt;<span class="string">"deg.\n"</span>;</span><br><span class="line">  angular_resolution = pcl::deg2rad (angular_resolution);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//读取pcd文件；如果没有指定文件，就创建样本点</span></span><br><span class="line">  pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">point_cloud_ptr</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;)</span></span>; <span class="comment">//点云指针</span></span><br><span class="line">  pcl::PointCloud&lt;PointType&gt;&amp; point_cloud = *point_cloud_ptr; <span class="comment">//上面点云的别名</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointWithViewpoint&gt; far_ranges; <span class="comment">//带视角的点构成的点云</span></span><br><span class="line">  Eigen::<span class="function">Affine3f <span class="title">scene_sensor_pose</span> <span class="params">(Eigen::Affine3f::Identity ())</span></span>; <span class="comment">//仿射变换</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pcd_filename_indices = pcl::console::parse_file_extension_argument (argc, argv, <span class="string">"pcd"</span>);<span class="comment">//检查参数中是否有pcd格式文件名，返回参数向量中的索引号</span></span><br><span class="line">  <span class="keyword">if</span> (!pcd_filename_indices.empty ())<span class="comment">//如果指定了pcd文件，读取pcd文件和对应的远距离pcd文件</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> filename = argv[pcd_filename_indices[<span class="number">0</span>]]; <span class="comment">//文件名</span></span><br><span class="line">    <span class="keyword">if</span> (pcl::io::loadPCDFile (filename, point_cloud) == <span class="number">-1</span>) <span class="comment">//读取pcd文件</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Was not able to open file \""</span>&lt;&lt;filename&lt;&lt;<span class="string">"\".\n"</span>; <span class="comment">//是否应该是std::cerr</span></span><br><span class="line">      printUsage (argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    scene_sensor_pose = Eigen::Affine3f (Eigen::Translation3f (point_cloud.sensor_origin_[<span class="number">0</span>],</span><br><span class="line">                                                               point_cloud.sensor_origin_[<span class="number">1</span>],</span><br><span class="line">                                                               point_cloud.sensor_origin_[<span class="number">2</span>])) *</span><br><span class="line">                        Eigen::Affine3f (point_cloud.sensor_orientation_); <span class="comment">//设置传感器的姿势</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> far_ranges_filename = pcl::getFilenameWithoutExtension (filename)+<span class="string">"_far_ranges.pcd"</span>; <span class="comment">//远距离文件名</span></span><br><span class="line">    <span class="keyword">if</span> (pcl::io::loadPCDFile (far_ranges_filename.c_str (), far_ranges) == <span class="number">-1</span>) <span class="comment">//读取远距离pcd文件</span></span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Far ranges file \""</span>&lt;&lt;far_ranges_filename&lt;&lt;<span class="string">"\" does not exists.\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">//没有指定pcd文件，生成点云，并填充它</span></span><br><span class="line">  &#123;</span><br><span class="line">    setUnseenToMaxRange = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\nNo *.pcd file given =&gt; Genarating example point cloud.\n\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">float</span> x=<span class="number">-0.5f</span>; x&lt;=<span class="number">0.5f</span>; x+=<span class="number">0.01f</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">float</span> y=<span class="number">-0.5f</span>; y&lt;=<span class="number">0.5f</span>; y+=<span class="number">0.01f</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        PointType point;  </span><br><span class="line">				point.x = x;  point.y = y;  point.z = <span class="number">2.0f</span> - y;</span><br><span class="line">        point_cloud.points.push_back (point); <span class="comment">//设置点云中点的坐标</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    point_cloud.width = (<span class="keyword">int</span>) point_cloud.points.size ();  </span><br><span class="line">		point_cloud.height = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//从点云数据，创建深度图像</span></span><br><span class="line">  <span class="keyword">float</span> noise_level = <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">float</span> min_range = <span class="number">0.0f</span>;</span><br><span class="line">  <span class="keyword">int</span> border_size = <span class="number">1</span>;</span><br><span class="line">  boost::<span class="built_in">shared_ptr</span>&lt;pcl::RangeImage&gt; range_image_ptr (<span class="keyword">new</span> pcl::RangeImage); <span class="comment">//创建RangeImage对象（指针）</span></span><br><span class="line">  pcl::RangeImage&amp; range_image = *range_image_ptr;  <span class="comment">//引用</span></span><br><span class="line">  range_image.createFromPointCloud (point_cloud, angular_resolution, pcl::deg2rad (<span class="number">360.0f</span>), pcl::deg2rad (<span class="number">180.0f</span>),</span><br><span class="line">                                   scene_sensor_pose, coordinate_frame, noise_level, min_range, border_size); <span class="comment">//从点云创建深度图像</span></span><br><span class="line">  range_image.integrateFarRanges (far_ranges); <span class="comment">//整合远距离点云</span></span><br><span class="line">  <span class="keyword">if</span> (setUnseenToMaxRange)</span><br><span class="line">    range_image.setUnseenToMaxRange ();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//打开3D观察图形窗口，并添加点云</span></span><br><span class="line">  pcl::visualization::<span class="function">PCLVisualizer <span class="title">viewer</span> <span class="params">(<span class="string">"3D Viewer"</span>)</span></span>; <span class="comment">//创建3D Viewer对象</span></span><br><span class="line">  viewer.setBackgroundColor (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">//设置背景色</span></span><br><span class="line">  pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointWithRange&gt; range_image_color_handler (range_image_ptr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  viewer.addPointCloud (range_image_ptr, range_image_color_handler, <span class="string">"range image"</span>); <span class="comment">//添加点云</span></span><br><span class="line">  viewer.setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, <span class="number">1</span>, <span class="string">"range image"</span>);</span><br><span class="line">  <span class="comment">//viewer.addCoordinateSystem (1.0f, "global");</span></span><br><span class="line">  <span class="comment">//PointCloudColorHandlerCustom&lt;PointType&gt; point_cloud_color_handler (point_cloud_ptr, 150, 150, 150);</span></span><br><span class="line">  <span class="comment">//viewer.addPointCloud (point_cloud_ptr, point_cloud_color_handler, "original point cloud");</span></span><br><span class="line">  viewer.initCameraParameters ();</span><br><span class="line">  <span class="comment">//setViewerPose (viewer, range_image.getTransformationToWorldSystem ());</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//显示深度图像（平面图，上面的3D显示）</span></span><br><span class="line">  pcl::visualization::<span class="function">RangeImageVisualizer <span class="title">range_image_widget</span> <span class="params">(<span class="string">"Range image"</span>)</span></span>;</span><br><span class="line">  range_image_widget.showRangeImage (range_image);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//提取NARF关键点</span></span><br><span class="line">  pcl::RangeImageBorderExtractor range_image_border_extractor; <span class="comment">//创建深度图像的边界提取器，用于提取NARF关键点</span></span><br><span class="line">  pcl::<span class="function">NarfKeypoint <span class="title">narf_keypoint_detector</span> <span class="params">(&amp;range_image_border_extractor)</span></span>; <span class="comment">//创建NARF对象</span></span><br><span class="line">  narf_keypoint_detector.setRangeImage (&amp;range_image);</span><br><span class="line">  narf_keypoint_detector.getParameters ().support_size = support_size;</span><br><span class="line">  <span class="comment">//narf_keypoint_detector.getParameters ().add_points_on_straight_edges = true;</span></span><br><span class="line">  <span class="comment">//narf_keypoint_detector.getParameters ().distance_for_additional_points = 0.5;</span></span><br><span class="line">  </span><br><span class="line">  pcl::PointCloud&lt;<span class="keyword">int</span>&gt; keypoint_indices; <span class="comment">//用于存储关键点的索引</span></span><br><span class="line">  narf_keypoint_detector.compute (keypoint_indices); <span class="comment">//计算NARF关键点</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Found "</span>&lt;&lt;keypoint_indices.points.size ()&lt;&lt;<span class="string">" key points.\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在range_image_widget中显示关键点</span></span><br><span class="line">  <span class="comment">//for (size_t i=0; i&lt;keypoint_indices.points.size (); ++i)</span></span><br><span class="line">    <span class="comment">//range_image_widget.markPoint (keypoint_indices.points[i]%range_image.width,</span></span><br><span class="line">                                  <span class="comment">//keypoint_indices.points[i]/range_image.width);</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//在3D图形窗口中显示关键点</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">keypoints_ptr</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>; <span class="comment">//创建关键点指针</span></span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt;&amp; keypoints = *keypoints_ptr; <span class="comment">//引用</span></span><br><span class="line">  keypoints.points.resize (keypoint_indices.points.size ()); <span class="comment">//点云变形，无序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;keypoint_indices.points.size (); ++i)</span><br><span class="line">    keypoints.points[i].getVector3fMap () = range_image.points[keypoint_indices.points[i]].getVector3fMap ();</span><br><span class="line"></span><br><span class="line">  pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointXYZ&gt; keypoints_color_handler (keypoints_ptr, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">  viewer.addPointCloud&lt;pcl::PointXYZ&gt; (keypoints_ptr, keypoints_color_handler, <span class="string">"keypoints"</span>);</span><br><span class="line">  viewer.setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, <span class="number">7</span>, <span class="string">"keypoints"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// -----Main loop-----</span></span><br><span class="line">  <span class="keyword">while</span> (!viewer.wasStopped ())</span><br><span class="line">  &#123;</span><br><span class="line">    range_image_widget.spinOnce ();  <span class="comment">// 处理 GUI事件</span></span><br><span class="line">    viewer.spinOnce ();</span><br><span class="line">    pcl_sleep(<span class="number">0.01</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新生成项目。</p>
</li>
<li>到改项目的Debug目录下，按住Shift，同时点击鼠标右键，在当前窗口打开CMD窗口。</li>
<li>在命令行中输入<code>narf_keypoint_extraction.exe</code>执行程序，<code>narf_keypoint_extraction.exe -h</code>显示帮助信息。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://pointclouds.org/documentation/tutorials/narf_keypoint_extraction.php#narf-keypoint-extraction" target="_blank" rel="noopener">How to extract NARF keypoint from a range image</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL系列——读入PCD格式文件</title>
    <url>/8082.html</url>
    <content><![CDATA[<h2 id="PCL系列"><a href="#PCL系列" class="headerlink" title="PCL系列"></a>PCL系列</h2><ul>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%AF%BB%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——读入PCD格式文件操作</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B0%86%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5PCD%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">PCL系列——将点云数据写入PCD格式文件</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%8B%BC%E6%8E%A5%E4%B8%A4%E4%B8%AA%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——拼接两个点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%BB%8E%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F%EF%BC%88RangeImage%EF%BC%89%E4%B8%AD%E6%8F%90%E5%8F%96NARF%E5%85%B3%E9%94%AE%E7%82%B9/" target="_blank" rel="noopener">PCL系列——从深度图像（RangeImage）中提取NARF关键点</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/30/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96%E6%B7%B1%E5%BA%A6%E5%9B%BE%E5%83%8F/" target="_blank" rel="noopener">PCL系列——如何可视化深度图像</a></li>
<li><a href="http://zhangxuezhi.com/2016/03/31/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E6%9C%80%E8%BF%91%E7%82%B9%E6%B3%95%EF%BC%88ICP%EF%BC%89%E9%85%8D%E5%87%86/" target="_blank" rel="noopener">PCL系列——如何使用迭代最近点法（ICP）配准</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E9%80%90%E6%B8%90%E5%9C%B0%E9%85%8D%E5%87%86%E4%B8%80%E5%AF%B9%E7%82%B9%E4%BA%91/" target="_blank" rel="noopener">PCL系列——如何逐渐地配准一对点云</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E6%B3%8A%E6%9D%BE%E9%87%8D%E6%9E%84/" target="_blank" rel="noopener">PCL系列——三维重构之泊松重构</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B4%AA%E5%A9%AA%E4%B8%89%E8%A7%92%E6%8A%95%E5%BD%B1%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之贪婪三角投影算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/01/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E4%B8%89%E7%BB%B4%E9%87%8D%E6%9E%84%E4%B9%8B%E7%A7%BB%E5%8A%A8%E7%AB%8B%E6%96%B9%E4%BD%93%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">PCL系列——三维重构之移动立方体算法</a></li>
<li><a href="http://zhangxuezhi.com/2016/04/20/PCL%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%B9%B3%E9%9D%A2%E6%A8%A1%E5%9E%8B%E5%88%86%E5%89%B2/" target="_blank" rel="noopener">PCL系列——平面模型分割</a></li>
</ul>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>在VS2010 中新建一个文件read_pcd.cpp，然后将下面的代码复制到文件中。</li>
<li>参照之前的文章，配置项目的属性。设置包含目录和库目录和附加依赖项。</li>
</ul>
<a id="more"></a>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; //标准输入输出流</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt; //PCL的PCD格式文件的输入输出头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt; //PCL对各种格式的点的支持头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">cloud</span> <span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;)</span></span>; <span class="comment">// 创建点云（指针）</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pcl::io::loadPCDFile&lt;pcl::PointXYZ&gt; (<span class="string">"test_pcd.pcd"</span>, *cloud) == <span class="number">-1</span>) <span class="comment">//* 读入PCD格式的文件，如果文件不存在，返回-1</span></span><br><span class="line">  &#123;</span><br><span class="line">    PCL_ERROR (<span class="string">"Couldn't read file test_pcd.pcd \n"</span>); <span class="comment">//文件不存在时，返回错误，终止程序。</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Loaded "</span></span><br><span class="line">            &lt;&lt; cloud-&gt;<span class="built_in">width</span> * cloud-&gt;<span class="built_in">height</span></span><br><span class="line">            &lt;&lt; <span class="string">" data points from test_file.pcd with the following fields: "</span></span><br><span class="line">            &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="comment">//for (size_t i = 0; i &lt; cloud-&gt;points.size (); ++i) //显示所有的点</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) <span class="comment">// 为了方便观察，只显示前5个点</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; cloud-&gt;points[i].x</span><br><span class="line">              &lt;&lt; <span class="string">" "</span>    &lt;&lt; cloud-&gt;points[i].y</span><br><span class="line">              &lt;&lt; <span class="string">" "</span>    &lt;&lt; cloud-&gt;points[i].z &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>编译运行，如下图所示。</li>
</ul>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160330103906416"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://pointclouds.org/documentation/tutorials/reading_pcd.php#reading-pcd" target="_blank" rel="noopener">Reading Point Cloud data from PCD files</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器维护系列——VNC没有反应了怎么办？</title>
    <url>/4e0f.html</url>
    <content><![CDATA[<h2 id="服务器维护系列"><a href="#服务器维护系列" class="headerlink" title="服务器维护系列"></a>服务器维护系列</h2><ul>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/51009445" target="_blank" rel="noopener">服务器维护系列——VNC没有反应了怎么办？</a></li>
</ul>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul>
<li>服务器上存在多个用户，大家通过VNC Viewer以图形窗口的形式访问服务器，但是在使用的过程中，VNC界面有时会没有反应，这时应该如何操作呢？</li>
<li>因为这个问题出现的比较多，在这里整理下，方便大家使用。</li>
</ul>
<a id="more"></a>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>总的来说，就是通过SSH登录系统，然后通过命令重启自己的VNC Server即可。</strong></p>
<ul>
<li>下载软件<strong>PieTTY</strong>。<a href="http://download.csdn.net/detail/xuezhisdc/9475974" target="_blank" rel="noopener">点此下载</a></li>
<li>PieTTY的有关设置请参考<a href="http://blog.csdn.net/xuezhisdc/article/details/48622069" target="_blank" rel="noopener">《Putty使用设置》</a></li>
<li>双击软件，打开登录界面。</li>
</ul>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160329211420717"></p>
<ul>
<li>输入IP，（其它选项一般不要动）。点击下面的<strong>open</strong>打开登录框。</li>
</ul>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160329211541240"></p>
<ul>
<li>输入用户名和密码，登录系统。（如果不知道用户名和密码，联系管理员）</li>
</ul>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160329211607068"></p>
<ul>
<li>输入以下命令，查看自己的端口号。如下图所示，端口是5。<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">.vnc</span></span><br><span class="line"><span class="keyword">ls</span></span><br></pre></td></tr></table></figure></li>
<li>输入以下命令，重启VNC。<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">vncserver -kill :<span class="number">5</span> #<span class="number">5</span>是端口号</span><br><span class="line">vncserver :<span class="number">5</span> -geometry <span class="number">1440</span>x900 #分辨率</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160329211809940"></p>
<ul>
<li>此时通过VNC Viewer登录试试，应该可以了。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio——设置缩进</title>
    <url>/a86.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul>
<li>Visual Studio默认的缩进是4个空格。但是当编写的程序比较大时，发现4个空格很不方便，因此希望将默认的缩进调整成2个空格。</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>依次选择：<strong>菜单栏</strong>→<strong>工具</strong>→<strong>选项</strong>，打开选项对话框。如下图所示。</li>
<li>在左侧的导航栏中依次选择：<strong>文本编辑器</strong>→<strong>C++(或所有语言)</strong>→<strong>制表符</strong>。</li>
<li>在右侧设置<code>制表符大小</code>和<code>缩进大小</code>为2。</li>
</ul>
<a id="more"></a>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160328163952262"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows办公技能——在当前文件夹中打开命令行窗口</title>
    <url>/8d1.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul>
<li>在Windows环境下编程时，有时需要在cmd窗口中执行命令，但是切换路径又比较麻烦。可以通过以下方式在当前窗口中打开cmd窗口。</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>同时点击<strong>shift+鼠标右键</strong>，或者先按住<strong>shift</strong>键，再点击<strong>鼠标右键</strong>，弹出右键菜单，点选<code>在此处打开命令行窗口</code>，如下图所示。</li>
</ul>
<a id="more"></a>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160323085107671"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>错误-VS2010 error:LINK:fatal error LNK1123:failure during conversion to COFF:file invalid or c</title>
    <url>/7c40.html</url>
    <content><![CDATA[<h1 id="visual-studio-link-error"><a href="#visual-studio-link-error" class="headerlink" title="visual studio link error"></a>visual studio link error</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote>
<p>VS2010 error: LINK : fatal error LNK1123: failure during conversion to COFF: file invalid or corrupt</p>
</blockquote>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p><strong>安装 VS2010 SP1</strong>。<br>注：Visual Studio 2010 SP1 是微软在2011发布的VS2010的补丁包。</p>
<a id="more"></a>
<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>另外，网上还有人说可以通过调整<code>Enable Incremental Linking</code>参数，解决这个问题，但是在我的系统环境下没有成功，大家可以先尝试使用这种方法，如果不行，再安装VS 2010 SP1。</p>
<p>调整参数过程如下所示。</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">Project Properties </span><br><span class="line"><span class="function">   -&gt;</span> Configuration Properties </span><br><span class="line"><span class="function">       -&gt;</span> Linker (General) </span><br><span class="line"><span class="function">          -&gt;</span> Enable Incremental Linking<span class="function"> -&gt;</span> <span class="string">"No (/INCREMENTAL:NO)"</span></span><br></pre></td></tr></table></figure>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160318082120603"></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu14.04安装Theano详细教程</title>
    <url>/ab45.html</url>
    <content><![CDATA[<blockquote>
<p>因为最近需要学习深度学习，因此想要配置Theano，来开发深度学习算法。但是发现Theano安装总是出现问题。于是在这里中总结一下。</p>
</blockquote>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>操作系统：ubuntu14.04</li>
<li>Python：2.7.6</li>
<li>需要联网</li>
</ul>
<a id="more"></a>
<h2 id="相关库简介"><a href="#相关库简介" class="headerlink" title="相关库简介"></a>相关库简介</h2><ul>
<li><strong><em>BLAS</em></strong>（Basic Linear Algebra Subprograms）是基础线性代数子程序库，里面拥有大量已经编写好的关于线性代数运算的程序;</li>
<li><strong><em>LAPACK</em></strong> （Linear Algebra PACKage）包含了求解科学与工程计算中最常见的数值线性代数问题，如求解线性方程组、线性最小二乘问题、特征值问题和奇异值问题等;</li>
<li><strong><em>ATLAS</em></strong>是python下的一个线性代数库，是基于另外两个线性代数库BLAS和lapack的；</li>
<li><strong><em>NumPy</em></strong>提供了一个在python中做科学计算的基础库，它重在数值计算，甚至可以说是用于多维数组处理的库；</li>
<li><strong><em>SciPy</em></strong>是基于numpy，提供了一个在python中做科学计算的工具集，也就是说它是更上一个层次的库；</li>
<li><strong><em>Theano</em></strong>则是基于NumPy以及SciPy的一个更高级的用于科学计算的库。</li>
</ul>
<h2 id="相关库的关系"><a href="#相关库的关系" class="headerlink" title="相关库的关系"></a>相关库的关系</h2><ul>
<li>要安装Theano，就需要先安装好numpy和scipy；</li>
<li>要安装numpy和scipy，就需要ATLAS；</li>
<li>要安装ATLAS，就需要安装BLAS和LAPACK;</li>
</ul>
<h2 id="相关库的安装顺序"><a href="#相关库的安装顺序" class="headerlink" title="相关库的安装顺序"></a>相关库的安装顺序</h2><ul>
<li>安装顺序：<em><code>BLAS → LAPACK → ATLAS → numpy → scipy → Theano</code></em></li>
</ul>
<h2 id="检查numpy和scipy是否通过测试"><a href="#检查numpy和scipy是否通过测试" class="headerlink" title="检查numpy和scipy是否通过测试"></a>检查numpy和scipy是否通过测试</h2><ul>
<li>说明：如果你的numpy和scipy是通过<code>apt-get</code>安装的，那么它们的单元测试可能会通不过！！！（我在安装过程中没有通过测试，scipy出现了<strong>Error</strong>）</li>
<li>如果numpy或scipy不能通过测试，就需要卸载，然后重新按照本文介绍的顺序安装。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查numpy是否通过测试</span></span><br><span class="line">python -c <span class="string">"import numpy;numpy.test()"</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>如果numpy通过测试，会出现如下图所示的结果。注意最后一行<strong><em>errors=0 failures=0</em></strong>。如果没有通过测试，需要卸载并重新安装。<br><img alt="numpy测试结果" data-src="http://img.blog.csdn.net/20150726185255050"></p>
</li>
<li><p>如果scipy通过测试，会出现如下图所示的结果。注意最后一行<strong><em>errors=0 failures=0</em></strong>。如果没有通过测试，需要卸载并重新安装。<br><img alt="scipy通过测试" data-src="http://img.blog.csdn.net/20150726185208417"></p>
</li>
<li><p>注意：scipy很可能会出现测试错误，比如我安装过程中出现下图所示的错误。<br><img alt="scipy测试错误" data-src="http://img.blog.csdn.net/20150726185356526"></p>
</li>
</ul>
<h2 id="卸载numpy和scipy"><a href="#卸载numpy和scipy" class="headerlink" title="卸载numpy和scipy"></a>卸载numpy和scipy</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载numpy</span></span><br><span class="line">sudo apt-get remove python-numpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载scipy</span></span><br><span class="line">sudo apt-get remove python-scipy</span><br></pre></td></tr></table></figure>
<h2 id="安装各种包"><a href="#安装各种包" class="headerlink" title="安装各种包"></a>安装各种包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装gfortran,后面编译过程中会用到</span></span><br><span class="line">sudo apt-get install gfortran</span><br><span class="line"><span class="comment"># 安装blas,Ubuntu下对应的是libopenblas，其它操作系统可能需要安装其它版本的blas——这是个OS相关的。</span></span><br><span class="line">sudo apt-get install libopenblas-dev</span><br><span class="line"><span class="comment"># 安装lapack，Ubuntu下对应的是liblapack-dev，和OS相关。</span></span><br><span class="line">sudo apt-get install liblapack-dev</span><br><span class="line"><span class="comment"># 安装atlas，Ubuntu下对应的是libatlas-base-dev，和OS相关。</span></span><br><span class="line">sudo apt-get install libatlas-base-dev</span><br></pre></td></tr></table></figure>
<h2 id="安装numpy和scipy"><a href="#安装numpy和scipy" class="headerlink" title="安装numpy和scipy"></a>安装numpy和scipy</h2><ul>
<li>使用pip安装numpy和scipy</li>
<li>安装pip的命令：<strong><code>sudo apt-get install python-pip</code></strong></li>
<li>注意：一定要在安装完lapack/blas之后，再安装numpy和scipy。否则，会出现错误<strong><em><code>no lapack/blas resources found</code></em></strong></li>
<li>安装numpy和scipy的命令如下所示。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装numpy</span></span><br><span class="line">sudo pip install numpy</span><br><span class="line"><span class="comment"># 测试numpy</span></span><br><span class="line"><span class="comment"># 测试通过才能进行下一步～～</span></span><br><span class="line">python -c <span class="string">"import numpy;numpy.test()"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装scipy</span></span><br><span class="line">sudo pip install scipy</span><br><span class="line"><span class="comment"># 测试scipy</span></span><br><span class="line"><span class="comment"># 测试通过才能进行下一步～～</span></span><br><span class="line">python -c <span class="string">"import scipy;scipy.test()"</span></span><br></pre></td></tr></table></figure>
<h2 id="安装线性计算库、numPy和sciPy的编译方法（推荐）"><a href="#安装线性计算库、numPy和sciPy的编译方法（推荐）" class="headerlink" title="安装线性计算库、numPy和sciPy的编译方法（推荐）"></a>安装线性计算库、numPy和sciPy的编译方法（推荐）</h2></li>
</ul>
<h3 id="编译安装OpenBlas"><a href="#编译安装OpenBlas" class="headerlink" title="编译安装OpenBlas"></a>编译安装OpenBlas</h3><ul>
<li>为什么安装OpenBLAS？因为OpenBLAS的速度比atlas快。速度对比请参考：<a href="https://github.com/tmolteno/necpp/issues/18" target="_blank" rel="noopener">《Benchmark OpenBLAS, Intel MKL vs ATLAS》</a></li>
<li>下载OpenBLAS。<a href="https://github.com/xianyi/OpenBLAS" target="_blank" rel="noopener">github下载地址</a></li>
<li>安装OpenBLAS<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf OpenBLAS**.tar.gz</span><br><span class="line"><span class="built_in">cd</span> OpenBLAS***</span><br><span class="line">make -FC gfortran <span class="comment">#需要已经安装gfortran </span></span><br><span class="line">make install <span class="comment"># 安装在/opt/OpenBLAS/目录下</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装numPy"><a href="#安装numPy" class="headerlink" title="安装numPy"></a>安装numPy</h3><ul>
<li>下载numPy 。<a href="https://github.com/numpy/numpy" target="_blank" rel="noopener">github</a> <a href="http://pypi.douban.com/simple/numpy/" target="_blank" rel="noopener">豆瓣镜像</a></li>
<li>解压下载包，并配置OpenBLAS。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf numpy***.tar.gz</span><br><span class="line"><span class="built_in">cd</span> numpy***</span><br><span class="line">cp site.cfg.example site.cfg</span><br><span class="line">vi site.cfg</span><br><span class="line"><span class="comment">#将以下4行去掉注释。【101行--104行】</span></span><br><span class="line"><span class="comment">#[openblas]</span></span><br><span class="line"><span class="comment">#libraries = openblas</span></span><br><span class="line"><span class="comment">#library_dirs = /opt/OpenBLAS/lib</span></span><br><span class="line"><span class="comment">#include_dirs = /opt/OpenBLAS/include</span></span><br></pre></td></tr></table></figure></li>
<li>安装numPy。<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo python setup.py config</span><br><span class="line">sudo python setup.py build</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
<h3 id="安装sciPy"><a href="#安装sciPy" class="headerlink" title="安装sciPy"></a>安装sciPy</h3></li>
<li>下载sciPy 。<a href="https://github.com/numpy/scipy" target="_blank" rel="noopener">github</a> <a href="http://pypi.douban.com/simple/scipy/" target="_blank" rel="noopener">豆瓣镜像</a></li>
<li>解压下载包，并配置OpenBLAS。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf scipy***.tar.gz</span><br><span class="line"><span class="built_in">cd</span> scipy***</span><br><span class="line"><span class="comment"># 将numPy**中的配置文件复制到此处</span></span><br><span class="line">cp ../numpy**/site.cfg.example ./site.cfg</span><br></pre></td></tr></table></figure></li>
<li>安装sciPy。<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo python setup.py config</span><br><span class="line">sudo python setup.py build</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装其它库"><a href="#安装其它库" class="headerlink" title="安装其它库"></a>安装其它库</h2><ul>
<li>为了安装Theano，最后还需要安装一些库，可以参考<a href="http://deeplearning.net/software/theano/install_ubuntu.html#install-ubuntu" target="_blank" rel="noopener">官方教程</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-dev</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo apt-get install python-nose</span><br><span class="line">sudo apt-get install g++</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装Theano"><a href="#安装Theano" class="headerlink" title="安装Theano"></a>安装Theano</h2><ul>
<li>前面的操作如果没有出现错误，就可以开始安装Theano了。命令如下所示。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Theano</span></span><br><span class="line">sudo pip install Theano</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试Theano</span></span><br><span class="line">python -c <span class="string">"import theano;theano.test()"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li><a href="http://blog.sina.com.cn/s/blog_6cb8e53d0101keak.html" target="_blank" rel="noopener">ATLAS + NumPy + SciPy + Theano 的python科学计算环境搭建 </a></li>
<li><a href="http://stackoverflow.com/questions/11443302/compiling-numpy-with-openblas-integration" target="_blank" rel="noopener">Compiling numpy with OpenBLAS integration</a></li>
<li><a href="http://www.tuicool.com/articles/Ub6vqiQ" target="_blank" rel="noopener">依赖关系</a></li>
<li><a href="http://deeplearning.net/software/theano/install.html#install" target="_blank" rel="noopener">官方安装教程</a></li>
<li><a href="http://stackoverflow.com/questions/7496547/does-python-scipy-need-blas" target="_blank" rel="noopener">http://stackoverflow.com/questions/7496547/does-python-scipy-need-blas</a></li>
<li><a href="http://www.linuxidc.com/Linux/2014-10/107503.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2014-10/107503.htm</a></li>
<li><a href="http://www.scipy.org/scipylib/building/linux.html#installation-from-source" target="_blank" rel="noopener">http://www.scipy.org/scipylib/building/linux.html#installation-from-source</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装Eclipse</title>
    <url>/5eb9.html</url>
    <content><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul>
<li>安装Eclipse之前，需要先安装Java。</li>
<li>安装Java参考 <a href="http://jingyan.baidu.com/article/86fae346b696633c49121a30.html" target="_blank" rel="noopener"><strong>ubuntu下搭建JAVA开发环境</strong></a></li>
</ul>
<h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><ul>
<li>下载地址：<a href="http://www.eclipse.org/downloads/packages/release/luna/sr2" target="_blank" rel="noopener"><strong>点此下载</strong></a></li>
<li>提示：校园网可以使用Ipv6站点下载，速度快。</li>
</ul>
<a id="more"></a>
<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><ul>
<li>将文件复制到安装路径下<code>/usr/local/</code>，并解压，最后执行。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp eclipse-java-luna-SR2-linux-gtk-x86_64.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf eclipse-java-luna-SR2-linux-gtk-x86_64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> eclipse</span><br><span class="line"><span class="comment"># 命令行中启动Eclipse</span></span><br><span class="line">./eclipse</span><br></pre></td></tr></table></figure>
<h2 id="制作快捷方式"><a href="#制作快捷方式" class="headerlink" title="制作快捷方式"></a>制作快捷方式</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">vi Eclipse.desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件中输入下面的内容</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Name=Eclipse</span><br><span class="line">Exec=/usr/local/eclipse/eclipse -desktop</span><br><span class="line">Icon=/usr/local/eclipse/plugins/org.eclipse.platform_4.4.2.v20150204-1700/eclipse64.png</span><br><span class="line">Type=Application</span><br><span class="line">Comment=</span><br><span class="line">Path=</span><br><span class="line">Terminal=false</span><br><span class="line">StartupNotify=false</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制到桌面中</span></span><br><span class="line">mv Eclipse.desktop ~/Desktop/</span><br></pre></td></tr></table></figure>
<h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><ul>
<li>双击快捷方式时，如果出现以下错误，</li>
</ul>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20151114174718543"></p>
<ul>
<li>如果安装了JDK，通过在eclipse/路径下新建jre/bin来解决。</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">mkdir <span class="keyword">jre</span></span><br><span class="line"><span class="keyword">cd </span><span class="keyword">jre</span></span><br><span class="line"><span class="keyword">ln </span>-s $<span class="keyword">JAVA_HOME/bin </span><span class="keyword">bin</span></span><br></pre></td></tr></table></figure>
<ul>
<li>重新双击快捷方式，解决错误。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://jingyan.baidu.com/article/86fae346b696633c49121a30.html" target="_blank" rel="noopener">ubuntu下搭建JAVA开发环境</a></li>
<li><a href="http://www.cnblogs.com/jerome-rong/archive/2013/02/19/2916608.html" target="_blank" rel="noopener">A Java Runtime Environment (JRE) or Java Development Kit (JDK) must be avail<strong>重点内容</strong></a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux终端提示符显示颜色</title>
    <url>/32ac.html</url>
    <content><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul>
<li>将以下内容复制到～/.bashrc中，</li>
</ul>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">PS1='[<span class="symbol">\[</span><span class="symbol">\e</span>[32;40m<span class="symbol">\]</span><span class="symbol">\u</span>@<span class="symbol">\w</span>]<span class="symbol">\$</span><span class="symbol">\[</span><span class="symbol">\e</span>[m<span class="symbol">\]</span>'</span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下图所示。</li>
</ul>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20151113210746257"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.linuxidc.com/Linux/2014-10/108195.htm" target="_blank" rel="noopener">Linux修改Shell命令提示符及颜色</a></li>
<li><a href="http://www.centoscn.com/CentOS/2013/0418/321.html" target="_blank" rel="noopener">修改Linux/Centos6终端命令提示符颜色</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>错误-python-Not uninstalling six at /usr/lib/python2.7/dist-packages, owned by OS</title>
    <url>/7aa0.html</url>
    <content><![CDATA[<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">sudo pip install <span class="comment">--upgrade six</span></span><br><span class="line">Downloading/unpacking <span class="literal">six</span> <span class="built_in">from</span> <span class="keyword">https</span>://pypi.python.org/packages/<span class="number">3.3</span>/s/<span class="literal">six</span>/<span class="literal">six</span><span class="number">-1.9</span><span class="number">.0</span>-py2.py3-<span class="literal">none</span>-<span class="keyword">any</span>.whl<span class="comment">#md5=9ac7e129a80f72d6fc1f0216f6e9627b</span></span><br><span class="line">Downloading <span class="literal">six</span><span class="number">-1.9</span><span class="number">.0</span>-py2.py3-<span class="literal">none</span>-<span class="keyword">any</span>.whl</span><br><span class="line">Installing collected packages: <span class="literal">six</span></span><br><span class="line">Found existing installation: <span class="literal">six</span> <span class="number">1.5</span><span class="number">.2</span></span><br><span class="line">Not uninstalling <span class="literal">six</span> <span class="keyword">at</span> /usr/lib/python2<span class="number">.7</span>/dist-packages, owned <span class="keyword">by</span> OS</span><br><span class="line">Successfully installed <span class="literal">six</span></span><br><span class="line">Cleaning up...</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="1-usr-lib和-usr-local-lib的区别"><a href="#1-usr-lib和-usr-local-lib的区别" class="headerlink" title="1. /usr/lib和/usr/local/lib的区别"></a>1. <code>/usr/lib</code>和<code>/usr/local/lib</code>的区别</h3><ul>
<li>在ubuntu下，直接通过apt-get安装的软件一般会在<code>/usr</code>下面，自己编译安装的软件（或者通过一些其他的非官方途径）会在<code>/usr/local</code>下面</li>
<li>两个文件夹都是有效的，主要是看路径配的是哪一个以PYTHONPATH。</li>
<li>查看Python的搜索路径，发现<code>/usr/lib</code>在<code>/usr/local</code>之前。查看方法如下所示：</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">python</span></span><br><span class="line"><span class="meta"># 进入Python环境</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="title">sys</span>.path</span><br></pre></td></tr></table></figure>
<h3 id="2-安装python第三方包有3种方法"><a href="#2-安装python第三方包有3种方法" class="headerlink" title="2. 安装python第三方包有3种方法"></a>2. 安装python第三方包有3种方法</h3><ul>
<li>1 使用系统自带的包管理系统(deb, rpm, 等)</li>
<li>2 通过社区开发的各种工具，例如 pip ， easy_install 等</li>
<li>3 从源文件安装。</li>
</ul>
<blockquote>
<p>第一种方法安装在<code>/usr/lib</code>下，第二种和第三种方式安装在<code>/usr/local/lib</code>下面。</p>
</blockquote>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul>
<li>上述问题中，应该先使用【默认Ubuntu】apt-get安装了python-six，版本是低版本的；然后使用pip希望使用高版本的six，就出错了。</li>
</ul>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><ul>
<li>在<code>/usr/local/lib/python2.7/dist-packages/</code>下，新建mypack.pth文件，输入以下内容<ul>
<li>新建这个文件的作用是，Python的搜索路径先搜搜/usr/local/lib/，后搜搜/usr/lib。</li>
</ul>
</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件内容</span></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>python2.<span class="number">7</span><span class="regexp">/dist-packages/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>下载six源码<br><a href="https://pypi.python.org/pypi/six" target="_blank" rel="noopener">https://pypi.python.org/pypi/six</a> or <a href="http://pypi.douban.com/simple/six" target="_blank" rel="noopener">http://pypi.douban.com/simple/six</a></li>
<li>解压<code>tar -zxvf six**</code></li>
<li>切换six**路径，并执行<code>sudo python setup.py install</code></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/pypa/pip/issues/2964" target="_blank" rel="noopener">https://github.com/pypa/pip/issues/2964</a></li>
<li><a href="https://github.com/dccrazyboy/pyeco/blob/master/pyeco.rst" target="_blank" rel="noopener">Python开发生态环境简介</a></li>
<li><a href="https://virtualenv-chinese-docs.readthedocs.org/en/latest/" target="_blank" rel="noopener">virtualenv</a></li>
<li><a href="http://codeyarns.com/2015/02/24/pycuda-error-cannot-import-name-intern/" target="_blank" rel="noopener">PyCUDA error: cannot import name intern</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——find</title>
    <url>/27ee.html</url>
    <content><![CDATA[<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><ul>
<li><p><strong>功能</strong>：在指定目录下<strong>查找文件</strong></p>
</li>
<li><p><strong>提示</strong>：</p>
<ul>
<li>任何位于参数之前的字符串都将被视为欲查找的目录名；</li>
<li>如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示；</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li><strong>选项</strong>： <ul>
<li>-name：指定模式，大小写敏感；</li>
<li>-iname：指定模式，大小写<strong>不敏感</strong>；</li>
<li>-type：指定文件类型</li>
<li>—help：显示帮助信息</li>
<li>—version：显示版本信息</li>
</ul>
</li>
</ul>
<ul>
<li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前目录及子目录下的所有文件和文件夹</span></span><br><span class="line">find .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在主目录下，查找test.txt文件</span></span><br><span class="line">find ~ -name test.txt</span><br><span class="line"><span class="comment"># 在主目录及其子目录下，查找test.txt文件</span></span><br><span class="line">find ~ -name <span class="string">"test.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在主目录下，查找以txt结尾的文件</span></span><br><span class="line">find ~ -name <span class="string">"*.txt"</span></span><br><span class="line"><span class="comment"># 在主目录下，查找以txt结尾的文件【但忽略大小写】</span></span><br><span class="line">find ~ -iname <span class="string">"*.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据【文件类型】查找</span></span><br><span class="line"><span class="comment"># 在主目录及其子目录下下查找“普通文件”</span></span><br><span class="line">find ~ -<span class="built_in">type</span> f </span><br><span class="line"><span class="comment"># 在主目录及其子目录下下查找“符号连接”</span></span><br><span class="line">find ~ -<span class="built_in">type</span> l</span><br><span class="line"><span class="comment"># 在主目录及其子目录下下查找“目录”</span></span><br><span class="line">find ~ -<span class="built_in">type</span> d</span><br><span class="line"><span class="comment"># 在主目录及其子目录下下查找“字符设备”</span></span><br><span class="line">find ~ -<span class="built_in">type</span> c</span><br><span class="line"><span class="comment"># 在主目录及其子目录下下查找“块设备”</span></span><br><span class="line">find ~ -<span class="built_in">type</span> b</span><br><span class="line"><span class="comment"># 在主目录及其子目录下下查找“套接字”</span></span><br><span class="line">find ~ -<span class="built_in">type</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示帮助信息</span></span><br><span class="line">find --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 显示版本信息</span></span><br><span class="line">find --version</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——diff</title>
    <url>/9e69.html</url>
    <content><![CDATA[<h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><ul>
<li><strong>功能</strong>：逐行比较两个文件</li>
</ul>
<a id="more"></a>
<ul>
<li><strong>提示</strong>：<ul>
<li>默认情况下，跟两个参数，指定对比的文件名称；</li>
<li>如果一个参数指定文件名称，另一个参数指定路径，则将与该路径下同名的文件进行比较；</li>
<li>如果使用“-”代替“文件”参数，则要比较的内容将来自标准输入；</li>
<li>diff命令是以逐行的方式，比较文本文件的异同处；</li>
<li>如果该命令指定进行目录的比较，则将会比较该目录中具有相同文件名的文件，而不会对其子目录文件进行任何比较操作；</li>
<li>返回结果中，字母”a”、”d”、”c”分别表示添加、删除及修改操作；</li>
</ul>
</li>
<li><p><strong>选项</strong>： </p>
<ul>
<li>-c：显示全部内容，并标出不同之处；</li>
<li>-i：不检查大小写；</li>
</ul>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比较test.txt和test.c</span></span><br><span class="line">diff test.txt test.c</span><br><span class="line"><span class="comment"># 比较test.txt和work/test.txt</span></span><br><span class="line">diff test.txt work</span><br><span class="line"><span class="comment"># 比较test.txt和test.c，将显示全部内容，并标出不同之处</span></span><br><span class="line">diff test.txt test.c -c</span><br><span class="line"><span class="comment"># 比较test.txt和test.c，但忽略大小写</span></span><br><span class="line">diff test.txt test.c -i</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——useradd</title>
    <url>/4280.html</url>
    <content><![CDATA[<h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><ul>
<li><strong>功能</strong>：建立用户账号</li>
</ul>
<a id="more"></a>
<ul>
<li><strong>提示</strong>：<ul>
<li>使用useradd指令所建立的帐号，实际上是保存在/etc/passwd文本文件中；</li>
<li>帐号建好之后，再用passwd设定帐号的密码；</li>
<li>可用userdel删除帐号；</li>
<li><strong>设定ID值时尽量要大于500，以免冲突。</strong>因为Linux安装后会建立一些特别用户，一般0到499之间的值留给bin、mail这样的系统账号。</li>
<li>系统用户的权限稍微大一些，可以修改自己的某些信息；系统用户的UID&lt;500；</li>
</ul>
</li>
<li><strong>选项</strong>： <ul>
<li>-c：加上备注文字。备注文字会保存在passwd的备注栏位中； </li>
<li>-d：指定用户登入时的启始目录。</li>
<li>-D：变更预设值； </li>
<li>-e：指定帐号的有效期限，缺省表示永久有效；</li>
<li>-f：指定在密码过期后多少天即关闭该帐号；</li>
<li>-g：指定用户所属的群组。 </li>
<li>-G：指定用户所属的附加群组； </li>
<li>-m：自动建立用户的登入目录； </li>
<li>-M：不要自动建立用户的登入目录；</li>
<li>-r：建立系统帐号； </li>
<li>-s：指定用户登入后所使用的shell；</li>
<li>-u：指定用户id；</li>
</ul>
</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建用户test</span></span><br><span class="line">useradd <span class="built_in">test</span> </span><br><span class="line"><span class="comment"># 新建用户test，并添加备注</span></span><br><span class="line">useradd <span class="built_in">test</span> -c <span class="string">"temp user"</span></span><br><span class="line"><span class="comment"># 新建用户test，并指定目录</span></span><br><span class="line">useradd <span class="built_in">test</span> -d /home/<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 添加新用户jack，主要组:sales,次要组：company</span></span><br><span class="line">useradd jack –g sales –G company,employees </span><br><span class="line"><span class="comment"># 新建用户test，并自动建立用户登入目录</span></span><br><span class="line">useradd <span class="built_in">test</span> -m</span><br><span class="line"><span class="comment"># 新建系统用户test</span></span><br><span class="line">useradd <span class="built_in">test</span> -r </span><br><span class="line"><span class="comment"># 新建一个用户，并指定用户登录后使用的shell</span></span><br><span class="line">useradd <span class="built_in">test</span> -s /bin/bash</span><br><span class="line"><span class="comment"># 建立一个新用户账户，并设置ID：</span></span><br><span class="line">useradd <span class="built_in">test</span> －u 544</span><br></pre></td></tr></table></figure>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——userdel</title>
    <url>/1590.html</url>
    <content><![CDATA[<h2 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h2><ul>
<li><strong>功能</strong>：删除用户账号</li>
</ul>
<a id="more"></a>
<ul>
<li><strong>提示</strong>：<ul>
<li>一次删除一个用户；</li>
<li>删除的用户必须存在；</li>
<li>userdel 不 允 许 你 移 除 正 在线 上 的 使 用 者 帐 号 。 你 必 须 砍 掉 此 帐 号 现 在 在 系 统 上 执 行 的 程 序 才 能 进 行 帐 号 删 除 ；</li>
</ul>
</li>
<li><strong>选项</strong>： <ul>
<li>-f：强制删除用户，即使用户当前已登录；</li>
<li>-r：删除用户的同时，删除与用户相关的所有文件。</li>
</ul>
</li>
<li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除用户test</span></span><br><span class="line">userdel <span class="built_in">test</span> </span><br><span class="line"><span class="comment"># 删除用户test的同时，删除用户登录目录以及目录下的文件</span></span><br><span class="line">userdel <span class="built_in">test</span> -r </span><br><span class="line"><span class="comment"># 强制删除用户</span></span><br><span class="line">userdel <span class="built_in">test</span> -f </span><br><span class="line"><span class="comment"># 强制删除用户，并删除用户登录目录以及目录下的文件</span></span><br><span class="line">userdel <span class="built_in">test</span> -fr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除已经登录的用户</span></span><br><span class="line"><span class="comment"># 先查看当前登录的用户，并记录TTY</span></span><br><span class="line">w</span><br><span class="line"><span class="comment"># 关闭希望删除的用户</span></span><br><span class="line">pkill -<span class="built_in">kill</span> -t [TTY]</span><br><span class="line">userdel <span class="built_in">test</span> -rf</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——adduser</title>
    <url>/8bcb.html</url>
    <content><![CDATA[<h2 id="adduser"><a href="#adduser" class="headerlink" title="adduser"></a>adduser</h2><ul>
<li><strong>功能</strong>：建立用户账号<a id="more"></a></li>
<li>在Slackware中，adduser指令是个script程序，利用交谈的方式取得输入的用户帐号资料，然后再交由真正建立帐号的useradd指令建立新用户，如此可方便管理员建立用户帐号。</li>
<li>在RedHatLinux中，adduser指令则是useradd指令的符号连接，两者实际上是同一个指令。</li>
<li><strong>参考</strong>：<code>useradd</code></li>
</ul>
<h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><ul>
<li><strong>功能</strong>：建立用户账号</li>
<li><strong>提示</strong>：<ul>
<li>使用useradd指令所建立的帐号，实际上是保存在/etc/passwd文本文件中；</li>
<li>帐号建好之后，再用passwd设定帐号的密码；</li>
<li>可用userdel删除帐号；</li>
<li><strong>设定ID值时尽量要大于500，以免冲突。</strong>因为Linux安装后会建立一些特别用户，一般0到499之间的值留给bin、mail这样的系统账号。</li>
<li>系统用户的权限稍微大一些，可以修改自己的某些信息；系统用户的UID&lt;500；</li>
</ul>
</li>
<li><strong>选项</strong>： <ul>
<li>-c：加上备注文字。备注文字会保存在passwd的备注栏位中； </li>
<li>-d：指定用户登入时的启始目录。</li>
<li>-D：变更预设值； </li>
<li>-e：指定帐号的有效期限，缺省表示永久有效；</li>
<li>-f：指定在密码过期后多少天即关闭该帐号；</li>
<li>-g：指定用户所属的群组。 </li>
<li>-G：指定用户所属的附加群组； </li>
<li>-m：自动建立用户的登入目录； </li>
<li>-M：不要自动建立用户的登入目录；</li>
<li>-r：建立系统帐号； </li>
<li>-s：指定用户登入后所使用的shell；</li>
<li>-u：指定用户id；</li>
</ul>
</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建用户test</span></span><br><span class="line">useradd <span class="built_in">test</span> </span><br><span class="line"><span class="comment"># 新建用户test，并添加备注</span></span><br><span class="line">useradd <span class="built_in">test</span> -c <span class="string">"temp user"</span></span><br><span class="line"><span class="comment"># 新建用户test，并指定目录</span></span><br><span class="line">useradd <span class="built_in">test</span> -d /home/<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新用户jack，主要组:sales,次要组：company</span></span><br><span class="line">useradd jack –g sales –G company,employees </span><br><span class="line"><span class="comment"># 新建用户test，并自动建立用户登入目录</span></span><br><span class="line">useradd <span class="built_in">test</span> -m</span><br><span class="line"><span class="comment"># 新建系统用户test</span></span><br><span class="line">useradd <span class="built_in">test</span> -r </span><br><span class="line"><span class="comment"># 新建一个用户，并指定用户登录后使用的shell</span></span><br><span class="line">useradd <span class="built_in">test</span> -s /bin/bash</span><br><span class="line"><span class="comment"># 建立一个新用户账户，并设置ID：</span></span><br><span class="line">useradd <span class="built_in">test</span> －u 544</span><br></pre></td></tr></table></figure>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——w</title>
    <url>/a95.html</url>
    <content><![CDATA[<h2 id="w"><a href="#w" class="headerlink" title="w"></a>w</h2><ul>
<li><strong>功能</strong>：显示已经陆的用户列表，和他们正在执行的指令。<a id="more"></a></li>
<li><strong>提示</strong>：<ul>
<li>单独执行w命令会显示所有的用户和他们执行的命令；</li>
<li>您也可指定用户名称，仅显示某位用户和他正在执行的命令；</li>
</ul>
</li>
<li><strong>选项</strong>： <ul>
<li>-h：不打印头信息； </li>
<li>-u：显示进程和cpu时间时，忽略用户名【su切换到其它用户时，有区别】；</li>
<li>-s：使用短输出格式； </li>
<li>-f：显示用户从哪登录； </li>
<li>-V：显示版本信息。</li>
</ul>
</li>
<li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示所有用户的信息</span></span><br><span class="line">w</span><br><span class="line"><span class="comment"># 显示用户test的信息</span></span><br><span class="line">w <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 显示所有用户的信息，但是不显示头信息【标题栏】</span></span><br><span class="line">w -h</span><br><span class="line"><span class="comment"># 显示短输出格式【精简格式】</span></span><br><span class="line">w -s</span><br><span class="line"><span class="comment"># 显示/不显示用户从哪里登录</span></span><br><span class="line">w -f</span><br><span class="line"><span class="comment"># 显示版本</span></span><br><span class="line">w -V</span><br></pre></td></tr></table></figure></li>
<li><p>参数 <code>u</code> 举例说明：<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20151104201659742"></p>
</li>
<li><p>参数 <code>s</code> 举例说明：</p>
</li>
</ul>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20151104201811864"></p>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——whoami</title>
    <url>/78ce.html</url>
    <content><![CDATA[<h2 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h2><ul>
<li><strong>功能</strong>：打印当前<strong>有效的</strong>用户名<a id="more"></a></li>
<li><strong>提示</strong>：<ul>
<li>等价于于执行 <code>id -un</code> 命令；</li>
<li>如果使用<code>su</code>切换用户，打印切换后的用户名；</li>
</ul>
</li>
<li><strong>选项</strong>： <ul>
<li>—help：显示在线帮助； </li>
<li>—version：显示版本信息。</li>
</ul>
</li>
<li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示帮助</span></span><br><span class="line">whoami --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 显示版本信息</span></span><br><span class="line">whoami --version</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——who</title>
    <url>/bb80.html</url>
    <content><![CDATA[<h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><ul>
<li><strong>功能</strong>：显示登录用户的信息<a id="more"></a></li>
<li><strong>提示</strong>：<ul>
<li>执行who命令可得知目前有那些用户登入系统；</li>
<li>单独执行who命令会列出登入帐号，使用的终端机，登入时间和从何处登入；</li>
</ul>
</li>
<li><p><strong>选项</strong>： </p>
<ul>
<li>-b：显示系统上次启动时间</li>
<li>-H或—heading：显示头信息【标题栏】； </li>
<li>-u：显示闲置时间； </li>
<li>-m：显示当前用户的信息，等价于<code>who am i</code>； </li>
<li>-q或—count：只显示登入系统的用户名和总人数；</li>
<li>-r：显示当前运行级别（runlevel） ;</li>
<li>-s：此参数将忽略不予处理，仅负责解决who指令其他版本的兼容性问题； </li>
<li>-w或-T：显示用户的信息状态栏； </li>
<li>—help：在线帮助； </li>
<li>—version：显示版本信息；</li>
</ul>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示系统上次启动时间</span></span><br><span class="line">who -b</span><br><span class="line"><span class="comment"># 显示头信息【标题栏】</span></span><br><span class="line">who -H</span><br><span class="line">who --heading</span><br><span class="line"><span class="comment"># 突出显示“闲置时间”</span></span><br><span class="line"><span class="comment"># 若该用户在前一分钟之内有进行任何动作，将标示成"."号，如果该用户已超过24小时没有任何动作，则标示出"old"字符串</span></span><br><span class="line">who -u</span><br><span class="line"><span class="comment"># 显示当前用户的信息</span></span><br><span class="line">who -m</span><br><span class="line">who am i</span><br><span class="line"><span class="comment"># 只显示登入系统的用户名和总人数</span></span><br><span class="line">who -q</span><br><span class="line">who --count</span><br><span class="line"><span class="comment"># 显示当前运行级别</span></span><br><span class="line">who -r</span><br><span class="line"><span class="comment"># 显示用户的信息状态栏</span></span><br><span class="line">who -w</span><br><span class="line">who -T</span><br><span class="line"><span class="comment"># 显示在线帮助信息</span></span><br><span class="line">who --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 显示版本信息</span></span><br><span class="line">who --version</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——visudo</title>
    <url>/af33.html</url>
    <content><![CDATA[<h2 id="visudo"><a href="#visudo" class="headerlink" title="visudo"></a>visudo</h2><ul>
<li><strong>功能</strong>：编辑sudoers文件<a id="more"></a></li>
<li><strong>提示</strong>：<ul>
<li>需要超级用户权限；</li>
<li>默认编辑/etc/sudoers文件；</li>
<li>sudoers文件的默认权限是440，即默认无法修改；</li>
<li>visudo可以在不更改sudoers文件权限的情况下，直接修改sudoers文件；</li>
</ul>
</li>
<li><strong>选项</strong>： <ul>
<li>-c：使用<strong>check-only</strong>模式，打印语法等错误信息；</li>
<li>-q：使用<strong>quiet</strong>模式，不打印语法等错误信息；</li>
<li>-f：指定sudoers文件；</li>
</ul>
</li>
<li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑/etc/sudoers文件</span></span><br><span class="line">visudo</span><br><span class="line"><span class="comment"># 编辑/etc/sudoers文件，并检查语法等错误</span></span><br><span class="line">visudo -c</span><br><span class="line"><span class="comment"># 编辑/etc/sudoers文件，但不打印语法等错误</span></span><br><span class="line">visudo -q</span><br><span class="line"><span class="comment"># 显示版本信息</span></span><br><span class="line">visudo -V</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——uname</title>
    <url>/83d5.html</url>
    <content><![CDATA[<h2 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h2><ul>
<li><strong>功能</strong>：显示系统信息<a id="more"></a></li>
<li><strong>提示</strong>：<ul>
<li>系统信息包括：内核版本号、硬件架构、主机名称和操作系统类型等；</li>
</ul>
</li>
<li><p><strong>选项</strong>： </p>
<ul>
<li>-a或—all：显示全部的信息； </li>
<li>-m或—machine：显示机器硬件架构（如x86_64）； </li>
<li>-n或-nodename：显示主机名； </li>
<li>-o：显示操作系统名称；</li>
<li>-r：显示内核的发行编号； </li>
<li>-s：显示内核名称； </li>
<li>-v：显示内核的版本； </li>
<li>—help：显示帮助； </li>
<li>—version：显示版本信息。</li>
</ul>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示内核名称（如Linux）</span></span><br><span class="line">uname</span><br><span class="line">uname -s</span><br><span class="line"><span class="comment"># 显示操作系统名称</span></span><br><span class="line">uname -o</span><br><span class="line"><span class="comment"># 显示所有信息</span></span><br><span class="line">uname -a</span><br><span class="line"><span class="comment"># 显示系统架构（如x86_64）</span></span><br><span class="line">uname -m</span><br><span class="line"><span class="comment"># 显示主机名</span></span><br><span class="line">uname -n</span><br><span class="line"><span class="comment"># 显示内核的发行编号</span></span><br><span class="line">uname -r</span><br><span class="line"><span class="comment"># 显示内核的版本</span></span><br><span class="line">uname -v</span><br><span class="line"><span class="comment"># 显示帮助</span></span><br><span class="line">uname --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 显示版本</span></span><br><span class="line">uname --version</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——alias</title>
    <url>/34e1.html</url>
    <content><![CDATA[<h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><ul>
<li><strong>功能</strong>：设置指令的别名<a id="more"></a></li>
<li><strong>提示</strong>：<ul>
<li>该命令可将一些较长的命令进行简化；</li>
<li>使用alias时，用户必须使用单引号’’将原来的命令引起来，防止特殊字符导致错误；</li>
<li>alias命令的作用只局限于该次登入的操作，若要每次登入都能够使用这些命令别名，则可将相应的alias命令存放到bash的初始化文件<code>/etc/.bashrc</code>中；</li>
</ul>
</li>
<li><strong>选项</strong>： <ul>
<li>-p：打印已经设置的命令别名</li>
</ul>
</li>
<li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示已定义的命令别名</span></span><br><span class="line"><span class="built_in">alias</span></span><br><span class="line"><span class="built_in">alias</span> -p</span><br><span class="line"><span class="comment"># 显示某命令别名的信息</span></span><br><span class="line"><span class="built_in">alias</span> ll</span><br><span class="line"><span class="comment"># 定义命令xuezhisd,显示登录用户信息</span></span><br><span class="line"><span class="built_in">alias</span> xuezhisd=<span class="string">'who am i'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——unalias</title>
    <url>/bbb6.html</url>
    <content><![CDATA[<h2 id="unalias"><a href="#unalias" class="headerlink" title="unalias"></a>unalias</h2><ul>
<li><strong>功能</strong>：取消<strong>命令别名</strong>(shell内建命令)<a id="more"></a></li>
<li><strong>提示</strong>：<ul>
<li>如果需要取消任意一个命令别名，则使用该命令别名作为指令的参数选项即可；</li>
<li>如果使用-a选项，则表示取消所有已经存在的命令别名；</li>
</ul>
</li>
<li><p><strong>选项</strong>： </p>
<ul>
<li>-a：取消所有命令别名；</li>
</ul>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义命令xuezhisd,显示登录用户信息</span></span><br><span class="line"><span class="built_in">alias</span> xuezhisd=<span class="string">'who am i'</span></span><br><span class="line"><span class="comment"># 测试命令xuezhisd是否可用（可用）</span></span><br><span class="line">xuezhisd</span><br><span class="line"><span class="comment"># 删除命令别名xuezhisd</span></span><br><span class="line"><span class="built_in">unalias</span> xuezhisd</span><br><span class="line"><span class="comment"># 测试命令xuezhisd是否可用（不可用）</span></span><br><span class="line">xuezhisd</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令——awk</title>
    <url>/8c68.html</url>
    <content><![CDATA[<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><ul>
<li><p><strong>功能</strong>：模式匹配语言</p>
<ul>
<li>参考：<a href="http://man.linuxde.net/awk#awk的工作原理" target="_blank" rel="noopener">《awk工作原理》</a></li>
<li><strong>awk</strong>是一种编程语言，用于在*nix下对<code>文本</code>和<code>数据</code>进行处理；</li>
<li>数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出；<a id="more"></a></li>
<li>它支持<strong>用户自定义函数</strong>和<strong>动态正则表达式</strong>等先进功能，是*nix下的一个强大编程工具；</li>
<li>它可以在命令行中使用，但更多是<strong>作为脚本来使用</strong>；</li>
<li>awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处；</li>
<li>灵活性是awk一大的优势。</li>
<li>awk脚本是由<strong>模式</strong>和<strong>操作</strong>组成的；<ul>
<li>模式可以是以下任意一个： <ul>
<li>正则表达式：使用通配符的扩展集；</li>
<li>关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。 </li>
<li>模式匹配表达式：用运算符<code>~</code>（匹配）和<code>~!</code>（不匹配）；</li>
<li>BEGIN语句块、pattern语句块、END语句块；</li>
</ul>
</li>
<li>操作由一个或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内，主要部分是：<ul>
<li>变量或数组赋值 </li>
<li>输出命令 </li>
<li>内置函数 </li>
<li>控制流语句</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>选项</strong>： </p>
<ul>
<li>-F fs   fs指定输入分隔符，fs可以是字符串或正则表达式，如-F: -v var=value   赋值一个用户定义变量，将外部变量传递给awk -f scripfile  从脚本文件中读取awk命令 -m[fr] val   对val值设置内在限制，-mf选项限制分配给val的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。</li>
<li>-F：指定将输入分离器</li>
<li>-f：指定程序的源文件</li>
<li>—help：显示帮助信息</li>
<li>—version：显示版本信息</li>
</ul>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul>
<li><a href="http://www.lx138.com/" target="_blank" rel="noopener">Linux命令查询网站</a></li>
<li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li>
<li><a href="http://baidu.com/" target="_blank" rel="noopener">baidu</a></li>
<li><a href="http://google.com.hk" target="_blank" rel="noopener">Google</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Xftp使用教程——问答方式</title>
    <url>/832d.html</url>
    <content><![CDATA[<blockquote>
<p>通过下面一些练习（问题），来熟悉Xftp操作。</p>
</blockquote>
<h2 id="Xftp练习"><a href="#Xftp练习" class="headerlink" title="Xftp练习"></a>Xftp练习</h2><ol>
<li>如何新建用户？</li>
<li>如何打开属性对话框？</li>
<li>如何通过设置UTF-8编码方式，防止乱码？</li>
<li>如何设置迁移类型（ASCII，二进制，自动）？</li>
<li>什么是同步浏览，如何同步浏览？</li>
<li>如何打开（Xftp）选项对话框？</li>
<li>如何显示隐藏文件？</li>
<li>如何取消自动更新？</li>
<li>如何设置Notepad++为默认文本编辑器？</li>
</ol>
<a id="more"></a>
<h2 id="问题答案"><a href="#问题答案" class="headerlink" title="问题答案"></a>问题答案</h2><h3 id="1-如何新建用户？"><a href="#1-如何新建用户？" class="headerlink" title="1.    如何新建用户？"></a>1.    如何新建用户？</h3><ul>
<li>方法一：菜单栏【文件】→【新建】→打开新建对话框，输入“会话名称”，主机IP地址，协议（FTP&amp;SFTP），点击【确定】。</li>
<li>方法二：标准菜单栏【新建】→打开新建对话框，输入“会话名称”，主机IP地址，协议（FTP&amp;SFTP），点击【确定】。</li>
</ul>
<hr>
<h3 id="2-如何打开属性对话框？"><a href="#2-如何打开属性对话框？" class="headerlink" title="2.    如何打开属性对话框？"></a>2.    如何打开属性对话框？</h3><ul>
<li>方法一：菜单栏【文件】→【属性】→打开属性对话框，输入“会话名称”，主机IP地址，协议（FTP&amp;SFTP），点击【确定】。</li>
<li>方法二：标准菜单栏【熟悉】→打开属性对话框，输入“会话名称”，主机IP地址，协议（FTP&amp;SFTP），点击【确定】。</li>
</ul>
<hr>
<h3 id="3-如何通过设置UTF-8编码方式，防止乱码？"><a href="#3-如何通过设置UTF-8编码方式，防止乱码？" class="headerlink" title="3.    如何通过设置UTF-8编码方式，防止乱码？"></a>3.    如何通过设置UTF-8编码方式，防止乱码？</h3><ul>
<li>菜单栏【文件】→【属性】→打开属性对话框，选择“选项”选项卡，勾选“使用UTF-8编码”。</li>
</ul>
<hr>
<h3 id="4-如何设置迁移类型（ASCII，二进制，自动）？"><a href="#4-如何设置迁移类型（ASCII，二进制，自动）？" class="headerlink" title="4.    如何设置迁移类型（ASCII，二进制，自动）？"></a>4.    如何设置迁移类型（ASCII，二进制，自动）？</h3><ul>
<li>菜单栏【命令】→【迁移类型】，选择相应方式。</li>
</ul>
<hr>
<h3 id="5-什么是同步浏览，如何同步浏览？"><a href="#5-什么是同步浏览，如何同步浏览？" class="headerlink" title="5.    什么是同步浏览，如何同步浏览？"></a>5.    什么是同步浏览，如何同步浏览？</h3><ul>
<li>菜单栏【命令】→【同步浏览】，开启同步浏览功能。</li>
</ul>
<hr>
<h3 id="6-如何打开（Xftp）选项对话框？"><a href="#6-如何打开（Xftp）选项对话框？" class="headerlink" title="6.    如何打开（Xftp）选项对话框？"></a>6.    如何打开（Xftp）选项对话框？</h3><ul>
<li>菜单栏【工具】→【选项】，打开选项对话框。</li>
</ul>
<hr>
<h3 id="7-如何显示隐藏文件？"><a href="#7-如何显示隐藏文件？" class="headerlink" title="7.    如何显示隐藏文件？"></a>7.    如何显示隐藏文件？</h3><ul>
<li>菜单栏【工具】→【选项】，打开选项对话框，选择“常规”选项卡，勾选“显示隐藏的文件”，点击【确定】按钮。</li>
</ul>
<hr>
<h3 id="8-如何取消自动更新？"><a href="#8-如何取消自动更新？" class="headerlink" title="8.    如何取消自动更新？"></a>8.    如何取消自动更新？</h3><ul>
<li>菜单栏【工具】→【选项】，打开选项对话框，选择“更新”选项卡，取消勾选“更新检查时间间隔”，点击【确定】按钮。</li>
</ul>
<hr>
<h3 id="9-如何设置Notepad-为默认文本编辑器？"><a href="#9-如何设置Notepad-为默认文本编辑器？" class="headerlink" title="9.    如何设置Notepad++为默认文本编辑器？"></a>9.    如何设置Notepad++为默认文本编辑器？</h3><ul>
<li>菜单栏【工具】→【选项】，打开选项对话框，选择“高级”选项卡，取消勾选“将记事本用作文本编辑器”，设置编辑器路径（为Notepad++安装路径），点击【确定】按钮。</li>
</ul>
<p><strong><em>说明</em></strong> <em>学习Xftp，可使用它自带的Xftp帮助文件。</em></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Xshell使用教程——问答方式</title>
    <url>/9210.html</url>
    <content><![CDATA[<blockquote>
<p> 以问答的方式学习如何操作Xshell？</p>
</blockquote>
<h2 id="Xshell练习"><a href="#Xshell练习" class="headerlink" title="Xshell练习"></a>Xshell练习</h2><ol>
<li>安装Xshell 5【激活码】？</li>
<li>更改语言？</li>
<li>更改激活码？</li>
<li>如何创建新用户？</li>
<li>如何打开新的对话？</li>
<li>如何断开连接？</li>
<li>如何重新连接？</li>
<li>如何打印命令历史？<a id="more"></a></li>
<li>如何传输文件？</li>
<li>如何关闭Xshelll的声音提示？</li>
<li>如何是指属性？</li>
<li>如何复制？</li>
<li>如何粘贴？</li>
<li>如何选择会话中的文本？</li>
<li>如何将会话中的文本输出到记事本（Notepad）中？</li>
<li>如何查找字符串？</li>
<li>如何清屏？两种方法的区别是什么？</li>
<li>如何重置窗口大小？</li>
<li>如何显示/隐藏【菜单栏/标准按钮/地址栏/链接栏/】</li>
<li>如何锁定工具栏？</li>
<li>如何管理/保存/选择“布局”？</li>
<li>如何设置显示模式为“始终在最上面”？</li>
<li>如何设置显示模式为“半透明”？</li>
<li>如何设置显示模式为“最简显示”？</li>
<li>如何全屏显示？</li>
<li>如何“锁定屏幕”，防止别人乘你不在时操作？</li>
<li>如何“发送键输入到所有会话”？如何使用“撰写栏”？</li>
<li>如何设置/编辑/新建/选择“配色方案”？</li>
<li>如何设置/选择/新建“快速命令集”？如何显示“快速命令栏”？</li>
<li>如何新建“选项卡”，重命名“选项卡”，关闭“选项卡”，关闭“其它选项卡”，新建“选</li>
<li>有关“会话选项卡”的设置：显示新选项卡按钮（加号），显示序号，显示终端标签， </li>
<li>窗口操作：新建窗口，关闭全部窗口，除此窗口之外全部关闭，切换到下一个窗口，切</li>
<li>会话选项卡、选项卡组和窗口的区别？</li>
<li>如何设置“会话文件夹路径”？有什么用？</li>
<li>更换电脑时，需要复制哪些文件（夹）？</li>
<li>如何清除各种“历史记录”？</li>
<li>如何“取消自动更新”？</li>
<li>如何设置“主控密码”和“锁屏密码”？</li>
<li>如何在全屏显示是，显示“会话选项卡”？</li>
<li>如何让Xshell启动时，打开会话对话框？</li>
<li>如何绑定文本编辑器（Notepad++）？</li>
<li>如何创建会话的桌面快捷方式？</li>
<li>【Properties】和【Options】区别？</li>
<li>新建窗口和新建终端的联系和区别？</li>
</ol>
<hr>
<h2 id="练习答案"><a href="#练习答案" class="headerlink" title="练习答案"></a>练习答案</h2><h3 id="1-安装Xshell-5【激活码】？"><a href="#1-安装Xshell-5【激活码】？" class="headerlink" title="1.    安装Xshell 5【激活码】？"></a>1.    安装Xshell 5【激活码】？</h3><p>注意：激活码 生成激活码机</p>
<h3 id="2-更改语言？"><a href="#2-更改语言？" class="headerlink" title="2.    更改语言？"></a>2.    更改语言？</h3><p>菜单栏【Tools】→【Language】→【English/Chinese】</p>
<h3 id="3-更改激活码？"><a href="#3-更改激活码？" class="headerlink" title="3.    更改激活码？"></a>3.    更改激活码？</h3><p>菜单栏【Help】→【Chang Product Key】，输入激活码。</p>
<h3 id="4-如何创建新用户？"><a href="#4-如何创建新用户？" class="headerlink" title="4.    如何创建新用户？"></a>4.    如何创建新用户？</h3><p>菜单栏【File】→【New】，输入“会话名称”和“主机地址”，点击“OK”保存。</p>
<h3 id="5-如何打开新的对话？"><a href="#5-如何打开新的对话？" class="headerlink" title="5.    如何打开新的对话？"></a>5.    如何打开新的对话？</h3><p>菜单栏【File】→【Open】，选择保存的会话，点击“connect”打开会话。</p>
<h3 id="6-如何断开连接？"><a href="#6-如何断开连接？" class="headerlink" title="6.    如何断开连接？"></a>6.    如何断开连接？</h3><p>方法一：对话框中输入命令“disconnect”，即可重新连接。<br>方法二：菜单栏【File】→【Disconnect】，即可重新连接。<br>方法三：工具栏中“断开连接的图标”。</p>
<h3 id="7-如何重新连接？"><a href="#7-如何重新连接？" class="headerlink" title="7.    如何重新连接？"></a>7.    如何重新连接？</h3><p>方法一：对话框中输入命令“reconnect”，即可重新连接。<br>方法二：菜单栏【File】→【Reconnect】，即可重新连接。<br>方法三：工具栏中“重新连接的图标”。<br>注：菜单栏【File】→【Reconnect All】，重新连接所有的会话。</p>
<h3 id="8-如何打印命令历史？"><a href="#8-如何打印命令历史？" class="headerlink" title="8.    如何打印命令历史？"></a>8.    如何打印命令历史？</h3><p>菜单栏【File】→【Page Setup】，设置打印效果。<br>菜单栏【File】→【Print Preview】可以看“打印预览”。<br>菜单栏【File】→【Print】，设置打印参数，点击“OK”开始打印。</p>
<h3 id="9-如何传输文件？"><a href="#9-如何传输文件？" class="headerlink" title="9.    如何传输文件？"></a>9.    如何传输文件？</h3><p>方法一：菜单栏【File】→【Transfer】→【Sent with ZMODEM】，选择文件即可上传文件。<br>方法二：右键→【Transfer】→【Sent with ZMODEM】，选择文件即可上传文件。</p>
<h3 id="10-如何关闭Xshelll的声音提示？"><a href="#10-如何关闭Xshelll的声音提示？" class="headerlink" title="10.    如何关闭Xshelll的声音提示？"></a>10.    如何关闭Xshelll的声音提示？</h3><p>菜单栏【Tools】→【Options】→【Advanced】 ，在 Terminal 类别中勾选“Disable bell sound”</p>
<h3 id="11-如何是指属性？"><a href="#11-如何是指属性？" class="headerlink" title="11.    如何是指属性？"></a>11.    如何是指属性？</h3><p>菜单栏【File】→【Properties】，打开属性对话框。</p>
<h3 id="12-如何复制？"><a href="#12-如何复制？" class="headerlink" title="12.    如何复制？"></a>12.    如何复制？</h3><p>方法一：右键→复制。<br>方法二：菜单栏【Edit】→【Copy】。</p>
<h3 id="13-如何粘贴？"><a href="#13-如何粘贴？" class="headerlink" title="13.    如何粘贴？"></a>13.    如何粘贴？</h3><p>方法一：右键→Paste。<br>方法二：菜单栏【Edit】→【Paste】。<br>方法三：点击鼠标中键。</p>
<h3 id="14-如何选择会话中的文本？"><a href="#14-如何选择会话中的文本？" class="headerlink" title="14.    如何选择会话中的文本？"></a>14.    如何选择会话中的文本？</h3><p>方法一：菜单栏【Edit】→【Select All】，选择会话中的“所有文本”。<br>方法二：鼠标右键→【Select All】，选择会话中的“所有文本”。<br>方法三：菜单栏【Edit】→【Select Screen】，选择会话中的“当前屏幕中的文本”。<br>方法四：鼠标右键→【Select Screen】，选择会话中的“当前屏幕中的文本”。</p>
<h3 id="15-如何将会话中的文本输出到记事本（Notepad）中？"><a href="#15-如何将会话中的文本输出到记事本（Notepad）中？" class="headerlink" title="15.    如何将会话中的文本输出到记事本（Notepad）中？"></a>15.    如何将会话中的文本输出到记事本（Notepad）中？</h3><p>方法一：菜单栏【Edit】→【To Notepad】→【All】，将会话中的“所有文本”导出到记事本中。<br>方法二：菜单栏【Edit】→【To Notepad】→【Current Screen】，将会话中的“当前屏幕中的文本”导出到记事本中。<br>方法三：鼠标右键→【To Notepad】→【All】，将会话中的“所有文本”导出到记事本中。<br>方法四：鼠标右键→【To Notepad】→【Current Screen】，将会话中的“当前屏幕中的文本”导出到记事本中。</p>
<h3 id="16-如何查找字符串？"><a href="#16-如何查找字符串？" class="headerlink" title="16.    如何查找字符串？"></a>16.    如何查找字符串？</h3><p>方法一：菜单栏【Edit】→【Find…】，打开查找对话框。<br>方法二：鼠标右键→【Find…】，打开查找对话框。</p>
<h3 id="17-如何清屏？两种方法的区别是什么？"><a href="#17-如何清屏？两种方法的区别是什么？" class="headerlink" title="17.    如何清屏？两种方法的区别是什么？"></a>17.    如何清屏？两种方法的区别是什么？</h3><p>方法一：菜单栏【Edit】→【Reset Terminal】，即可清屏（重置终端）。<br>方法二：菜单栏【Edit】→【Clear Screen】，即可清屏。<br>方法三：菜单栏【Edit】→【Clear Scrollback Buffer】，即可清空滚动缓存区。<br>方法四：鼠标右键→【Reset Terminal】<br>方法五：鼠标右键→【Clear Screen】<br>方法六：鼠标右键→Edit】→【Clear Scrollback Buffer】<br>区别：第一种方法是重置终端，所以无法上滚历史；第二种方法仅仅是清屏，等价于clear的作用，所以能上滚历史命令。第一种方法 ==第二种方法+第三种方法。</p>
<h3 id="18-如何重置窗口大小？"><a href="#18-如何重置窗口大小？" class="headerlink" title="18.    如何重置窗口大小？"></a>18.    如何重置窗口大小？</h3><p>菜单栏【Edit】→【Reset Window Size】。</p>
<h3 id="19-如何显示-隐藏【菜单栏-标准按钮-地址栏-链接栏-】"><a href="#19-如何显示-隐藏【菜单栏-标准按钮-地址栏-链接栏-】" class="headerlink" title="19.    如何显示/隐藏【菜单栏/标准按钮/地址栏/链接栏/】"></a>19.    如何显示/隐藏【菜单栏/标准按钮/地址栏/链接栏/】</h3><div class="table-container">
<table>
<thead>
<tr>
<th>功能</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>显示/隐藏“菜单栏”</td>
<td>菜单栏【View】→【Toolbar】→【Menu Bar】</td>
</tr>
<tr>
<td>显示/隐藏“标准按钮”</td>
<td>菜单栏【View】→【Toolbar】→【Standard Button】</td>
</tr>
<tr>
<td>显示/隐藏“地址栏”</td>
<td>菜单栏【View】→【Toolbar】→【Address Bar】</td>
</tr>
<tr>
<td>显示/隐藏“链接栏”</td>
<td>菜单栏【View】→【Toolbar】→【Links Bar】</td>
</tr>
<tr>
<td>显示/隐藏“滚动条”</td>
<td>菜单栏【View】→【Scroll Bar】</td>
</tr>
<tr>
<td>显示/隐藏“状态栏”</td>
<td>菜单栏【View】→【Status Bar】</td>
</tr>
<tr>
<td>显示/隐藏“会话选项卡”</td>
<td>菜单栏【View】→【Session Tab】</td>
</tr>
<tr>
<td>显示/隐藏“撰写栏”</td>
<td>菜单栏【View】→【Compose Bar】</td>
</tr>
<tr>
<td>显示/隐藏“快速命令栏”</td>
<td>菜单栏【View】→【Quick Commands】</td>
</tr>
<tr>
<td>显示/隐藏“隧道窗格”</td>
<td>菜单栏【View】→【Tunneling Pane】</td>
</tr>
</tbody>
</table>
</div>
<h3 id="20-如何锁定工具栏？"><a href="#20-如何锁定工具栏？" class="headerlink" title="20.    如何锁定工具栏？"></a>20.    如何锁定工具栏？</h3><div class="table-container">
<table>
<thead>
<tr>
<th>功能</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>锁定“工具栏”</td>
<td>菜单栏【View】→【Toolbar】→【Lock the Toolbars】</td>
</tr>
</tbody>
</table>
</div>
<h3 id="21-如何管理-保存-选择“布局”？"><a href="#21-如何管理-保存-选择“布局”？" class="headerlink" title="21.    如何管理/保存/选择“布局”？"></a>21.    如何管理/保存/选择“布局”？</h3><p>菜单栏【View】→【Layout】，保存【Save As】,管理【Manage】。</p>
<h3 id="22-如何设置显示模式为“始终在最上面”？"><a href="#22-如何设置显示模式为“始终在最上面”？" class="headerlink" title="22.    如何设置显示模式为“始终在最上面”？"></a>22.    如何设置显示模式为“始终在最上面”？</h3><p>菜单栏【View】→【Always on Top】</p>
<h3 id="23-如何设置显示模式为“半透明”？"><a href="#23-如何设置显示模式为“半透明”？" class="headerlink" title="23.    如何设置显示模式为“半透明”？"></a>23.    如何设置显示模式为“半透明”？</h3><p>菜单栏【View】→【Transparent】</p>
<h3 id="24-如何设置显示模式为“最简显示”？"><a href="#24-如何设置显示模式为“最简显示”？" class="headerlink" title="24.    如何设置显示模式为“最简显示”？"></a>24.    如何设置显示模式为“最简显示”？</h3><p>菜单栏【View】→【Simple】</p>
<h3 id="25-如何全屏显示？"><a href="#25-如何全屏显示？" class="headerlink" title="25.    如何全屏显示？"></a>25.    如何全屏显示？</h3><p>方法一：菜单栏【View】→【Full Screen】<br>方法二：右键→【Full Screen】</p>
<h3 id="26-如何“锁定屏幕”，防止别人乘你不在时操作？"><a href="#26-如何“锁定屏幕”，防止别人乘你不在时操作？" class="headerlink" title="26.    如何“锁定屏幕”，防止别人乘你不在时操作？"></a>26.    如何“锁定屏幕”，防止别人乘你不在时操作？</h3><p>菜单栏【View】→【Lock Screen】</p>
<h3 id="27-如何“发送键输入到所有会话”？如何使用“撰写栏”？"><a href="#27-如何“发送键输入到所有会话”？如何使用“撰写栏”？" class="headerlink" title="27.    如何“发送键输入到所有会话”？如何使用“撰写栏”？"></a>27.    如何“发送键输入到所有会话”？如何使用“撰写栏”？</h3><p>方法一：菜单栏【Tools】→【Send Key Input All Sessions】，就可以打开或关闭该功能了。<br>方法二：右键→【Send Key Input All Sessions】<br>菜单栏【View】→【Compose Bar】显示“撰写栏”，然后点击撰写栏最右侧按钮，设置命令发送范围。</p>
<h3 id="28-如何设置-编辑-新建-选择“配色方案”？"><a href="#28-如何设置-编辑-新建-选择“配色方案”？" class="headerlink" title="28.    如何设置/编辑/新建/选择“配色方案”？"></a>28.    如何设置/编辑/新建/选择“配色方案”？</h3><p>方法一：菜单栏【Tools】→【Color Schemes】<br>方法二：右键→【Color Schemes】，选择颜色模式。默认首映xTerm。</p>
<h3 id="29-如何设置-选择-新建“快速命令集”？如何显示“快速命令栏”？"><a href="#29-如何设置-选择-新建“快速命令集”？如何显示“快速命令栏”？" class="headerlink" title="29.    如何设置/选择/新建“快速命令集”？如何显示“快速命令栏”？"></a>29.    如何设置/选择/新建“快速命令集”？如何显示“快速命令栏”？</h3><p>菜单栏【Tools】→【Quick Command Sets】，可以设置快速命令集。<br>菜单栏【View】→【Quick Commands】，显示/隐藏“快速命令栏”。<br>快速命令栏中显示的快捷命令就是“快速命令集”中的命令。<br>单击“快速命令栏”最右侧的按钮，可以便捷/添加/删除命令。</p>
<h3 id="30-如何新建“选项卡”，重命名“选项卡”，关闭“选项卡”，关闭“其它选项卡”，新建“选项卡组”，关闭选项卡组，排列选项卡组？"><a href="#30-如何新建“选项卡”，重命名“选项卡”，关闭“选项卡”，关闭“其它选项卡”，新建“选项卡组”，关闭选项卡组，排列选项卡组？" class="headerlink" title="30.    如何新建“选项卡”，重命名“选项卡”，关闭“选项卡”，关闭“其它选项卡”，新建“选项卡组”，关闭选项卡组，排列选项卡组？"></a>30.    如何新建“选项卡”，重命名“选项卡”，关闭“选项卡”，关闭“其它选项卡”，新建“选项卡组”，关闭选项卡组，排列选项卡组？</h3><div class="table-container">
<table>
<thead>
<tr>
<th>功能</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>新建“选项卡”</td>
<td>菜单栏【Tab】→【New Tab】</td>
</tr>
<tr>
<td>重命名“选项卡”</td>
<td>菜单栏【Tab】→【Rename】</td>
</tr>
<tr>
<td>关闭“选项卡”</td>
<td>菜单栏【Tab】→【Close】</td>
</tr>
<tr>
<td>关闭“其他选项卡”</td>
<td>菜单栏【Tab】→【Close other Tabs】</td>
</tr>
<tr>
<td>新建“选项卡组”</td>
<td>菜单栏【Tab】→【New Tab Groubs】，再选择位置</td>
</tr>
<tr>
<td>关闭“选项卡组”</td>
<td>菜单栏【Tab】→【Close This Tab Group】</td>
</tr>
<tr>
<td>排列“选项卡组”</td>
<td>菜单栏【Tab】→【Arrange】，选择排列方式</td>
</tr>
</tbody>
</table>
</div>
<h3 id="31-有关“会话选项卡”的设置：显示新选项卡按钮（加号），显示序号，显示终端标签，显示状态图标（连接or没连接），设置颜色？"><a href="#31-有关“会话选项卡”的设置：显示新选项卡按钮（加号），显示序号，显示终端标签，显示状态图标（连接or没连接），设置颜色？" class="headerlink" title="31.    有关“会话选项卡”的设置：显示新选项卡按钮（加号），显示序号，显示终端标签，显示状态图标（连接or没连接），设置颜色？"></a>31.    有关“会话选项卡”的设置：显示新选项卡按钮（加号），显示序号，显示终端标签，显示状态图标（连接or没连接），设置颜色？</h3><div class="table-container">
<table>
<thead>
<tr>
<th>功能</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>显示新选项卡按钮（加号）</td>
<td>菜单栏【Tab】→【Show New Tab Button】</td>
</tr>
<tr>
<td>显示序号</td>
<td>菜单栏【Tab】→【Show Numbers】</td>
</tr>
<tr>
<td>显示终端标签</td>
<td>菜单栏【Tab】→【Show Terminal Title】</td>
</tr>
<tr>
<td>显示状态图标</td>
<td>菜单栏【Tab】→【Show Status Icon】</td>
</tr>
<tr>
<td>设置颜色</td>
<td>菜单栏【Tab】→【Set Color】</td>
</tr>
</tbody>
</table>
</div>
<h3 id="32-窗口操作：新建窗口，关闭全部窗口，除此窗口之外全部关闭，切换到下一个窗口，切换到上一个窗口，窗口层叠排列，窗口水平排列，窗口垂直排列。打开新的终端窗口，打开新的文件传输窗口（Xftp）？"><a href="#32-窗口操作：新建窗口，关闭全部窗口，除此窗口之外全部关闭，切换到下一个窗口，切换到上一个窗口，窗口层叠排列，窗口水平排列，窗口垂直排列。打开新的终端窗口，打开新的文件传输窗口（Xftp）？" class="headerlink" title="32.    窗口操作：新建窗口，关闭全部窗口，除此窗口之外全部关闭，切换到下一个窗口，切换到上一个窗口，窗口层叠排列，窗口水平排列，窗口垂直排列。打开新的终端窗口，打开新的文件传输窗口（Xftp）？"></a>32.    窗口操作：新建窗口，关闭全部窗口，除此窗口之外全部关闭，切换到下一个窗口，切换到上一个窗口，窗口层叠排列，窗口水平排列，窗口垂直排列。打开新的终端窗口，打开新的文件传输窗口（Xftp）？</h3><div class="table-container">
<table>
<thead>
<tr>
<th>功能</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>新建窗口</td>
<td>菜单栏【Window】→【New Window】</td>
</tr>
<tr>
<td>关闭全部窗口</td>
<td>菜单栏【Window】→【Close All】</td>
</tr>
<tr>
<td>除此窗口之外全部关闭</td>
<td>菜单栏【Window】→【Close All But This】</td>
</tr>
<tr>
<td>切换到下一个窗口</td>
<td>菜单栏【Window】→【Next】</td>
</tr>
<tr>
<td>切换到上一个窗口</td>
<td>菜单栏【Window】→【Previous】</td>
</tr>
<tr>
<td>窗口层叠排列</td>
<td>菜单栏【Window】→【Cascade】</td>
</tr>
<tr>
<td>窗口水平排列</td>
<td>菜单栏【Window】→【Tile Horizontally】</td>
</tr>
<tr>
<td>窗口垂直排列</td>
<td>菜单栏【Window】→【Tile Vertically】</td>
</tr>
<tr>
<td>打开新的终端窗口</td>
<td>菜单栏【Window】→【New Terminal】</td>
</tr>
<tr>
<td>打开新的文件传输窗口</td>
<td>菜单栏【Window】→【New File Transfer】</td>
</tr>
</tbody>
</table>
</div>
<h3 id="33-会话选项卡、选项卡组和窗口的区别？"><a href="#33-会话选项卡、选项卡组和窗口的区别？" class="headerlink" title="33.    会话选项卡、选项卡组和窗口的区别？"></a>33.    会话选项卡、选项卡组和窗口的区别？</h3><p>一个窗口中可以有多个选项卡组，一个选项卡组中又可以有多个会话选项卡。新建窗口之后，在任务栏中可以看到多一个“窗口”。</p>
<h3 id="34-如何设置“会话文件夹路径”？有什么用？"><a href="#34-如何设置“会话文件夹路径”？有什么用？" class="headerlink" title="34.    如何设置“会话文件夹路径”？有什么用？"></a>34.    如何设置“会话文件夹路径”？有什么用？</h3><p>菜单栏【Tools】→【Options】→【General】，在【Session】条目中，修改文件夹路径即可。通过它，当我们更换电脑时，可以将此文件夹中的内容复制到现在电脑中该文件下，就可打开这些会话了。</p>
<h3 id="35-更换电脑时，需要复制哪些文件（夹）？"><a href="#35-更换电脑时，需要复制哪些文件（夹）？" class="headerlink" title="35.    更换电脑时，需要复制哪些文件（夹）？"></a>35.    更换电脑时，需要复制哪些文件（夹）？</h3><p>D:\Documents\NetSarang\Xshell\Sessions 保存了所有的会话。<br>D:\Documents\NetSarang\Xshell\QuickButton Files快速命令集<br>最好将D:\Documents\NetSarang\Xshell\所有文件（夹）复制到新的电脑中。</p>
<h3 id="36-如何清除各种“历史记录”？"><a href="#36-如何清除各种“历史记录”？" class="headerlink" title="36.    如何清除各种“历史记录”？"></a>36.    如何清除各种“历史记录”？</h3><p>菜单栏【Tools】→【Options】→【General】，History条目中点击“Clean”按钮。</p>
<h3 id="37-如何“取消自动更新”？"><a href="#37-如何“取消自动更新”？" class="headerlink" title="37.    如何“取消自动更新”？"></a>37.    如何“取消自动更新”？</h3><p>菜单栏【Tools】→【Options】→【Update】，去掉复选框中的对号。</p>
<h3 id="38-如何设置“主控密码”和“锁屏密码”？"><a href="#38-如何设置“主控密码”和“锁屏密码”？" class="headerlink" title="38.    如何设置“主控密码”和“锁屏密码”？"></a>38.    如何设置“主控密码”和“锁屏密码”？</h3><p>菜单栏【Tools】→【Options】→【Security】，勾选“Use Master Password”，即可设置主控密码。不过建议慎用，如果忘记主控密码，就不能打开喽！<br>菜单栏【Tools】→【Options】→【Security】，在Lock Screen条目中，点击“Set Password”，即可设置锁屏密码。</p>
<h3 id="39-如何在全屏显示是，显示“会话选项卡”？"><a href="#39-如何在全屏显示是，显示“会话选项卡”？" class="headerlink" title="39.    如何在全屏显示是，显示“会话选项卡”？"></a>39.    如何在全屏显示是，显示“会话选项卡”？</h3><p>菜单栏【Tools】→【Options】→【Advanced】，在Window项目中，勾选“Show session tab in full screen mode”即可。</p>
<h3 id="40-如何让Xshell启动时，打开会话对话框？"><a href="#40-如何让Xshell启动时，打开会话对话框？" class="headerlink" title="40.    如何让Xshell启动时，打开会话对话框？"></a>40.    如何让Xshell启动时，打开会话对话框？</h3><p>菜单栏【Tools】→【Options】→【Advanced】，在Window项目中，勾选“Open the Sessions dialog box at Xshell startup”即可。</p>
<h3 id="41-如何绑定文本编辑器（Notepad-）？"><a href="#41-如何绑定文本编辑器（Notepad-）？" class="headerlink" title="41.    如何绑定文本编辑器（Notepad++）？"></a>41.    如何绑定文本编辑器（Notepad++）？</h3><p>菜单栏【Tools】→【Options】→【Advanced】，在<em>Text Editor</em>项目中，点击“Settings”按钮，设置文本编辑器（Notepad++）的路径。</p>
<h3 id="42-如何创建会话的桌面快捷方式？"><a href="#42-如何创建会话的桌面快捷方式？" class="headerlink" title="42.    如何创建会话的桌面快捷方式？"></a>42.    如何创建会话的桌面快捷方式？</h3><p>菜单栏【File】→【Open】，选择一个会话，然后点击“Create Shortcut”。</p>
<h3 id="43-【Properties】和【Options】区别？"><a href="#43-【Properties】和【Options】区别？" class="headerlink" title="43.    【Properties】和【Options】区别？"></a>43.    【Properties】和【Options】区别？</h3><p>【File】→【Properties】设置的是会话的终端属性，【Tools】→【Options】设置的是Xshell的选项（属性）。</p>
<h3 id="44-新建窗口和新建终端的联系和区别？"><a href="#44-新建窗口和新建终端的联系和区别？" class="headerlink" title="44.    新建窗口和新建终端的联系和区别？"></a>44.    新建窗口和新建终端的联系和区别？</h3><p>联系：两者都打开新的饿窗口。<br>区别：新建窗口打开的会话是本地会话，没有连接服务器；而新建终端试图连接与当前会话相同的会话信息。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>系统运维学习笔记</title>
    <url>/c517.html</url>
    <content><![CDATA[<blockquote>
<p>该系列博文是<strong>系统运维</strong>的学习笔记。</p>
</blockquote>
<h2 id="工具学习"><a href="#工具学习" class="headerlink" title="工具学习"></a>工具学习</h2><ol>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/49621311" target="_blank" rel="noopener">《Xshell使用教程——问答方式》</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/49621231" target="_blank" rel="noopener">《Xftp使用教程——问答方式》</a></li>
</ol>
<a id="more"></a>
<h2 id="命令学习"><a href="#命令学习" class="headerlink" title="命令学习"></a>命令学习</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">adduser</span> <span class="string"></span></span><br><span class="line"><span class="attr">alias</span> <span class="string"></span></span><br><span class="line"><span class="attr">awk</span></span><br><span class="line"><span class="attr">cat</span></span><br><span class="line"><span class="attr">cd</span> <span class="string"></span></span><br><span class="line"><span class="attr">chkconfig</span> <span class="string"></span></span><br><span class="line"><span class="attr">cp</span> <span class="string"></span></span><br><span class="line"><span class="attr">diff</span> <span class="string"></span></span><br><span class="line"><span class="attr">echo</span> <span class="string"></span></span><br><span class="line"><span class="attr">egrep</span> <span class="string"></span></span><br><span class="line"><span class="attr">exec</span> <span class="string"></span></span><br><span class="line"><span class="attr">find</span> <span class="string"></span></span><br><span class="line"><span class="attr">getenforce</span></span><br><span class="line"><span class="attr">grep</span> <span class="string"></span></span><br><span class="line"><span class="attr">head</span></span><br><span class="line"><span class="attr">history</span> <span class="string"></span></span><br><span class="line"><span class="attr">hostname</span> <span class="string"></span></span><br><span class="line"><span class="attr">init</span></span><br><span class="line"><span class="attr">ll</span></span><br><span class="line"><span class="attr">locate</span> <span class="string"></span></span><br><span class="line"><span class="attr">ls</span> <span class="string"></span></span><br><span class="line"><span class="attr">lsof</span> <span class="string"></span></span><br><span class="line"><span class="attr">man</span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string"></span></span><br><span class="line"><span class="attr">mv</span> <span class="string"></span></span><br><span class="line"><span class="attr">netstat</span> <span class="string"></span></span><br><span class="line"><span class="attr">passwd</span> <span class="string"></span></span><br><span class="line"><span class="attr">pwd</span> <span class="string"></span></span><br><span class="line"><span class="attr">rm</span> <span class="string"></span></span><br><span class="line"><span class="attr">rmdir</span> <span class="string"></span></span><br><span class="line"><span class="attr">rpm</span> <span class="string"></span></span><br><span class="line"><span class="attr">runlevel</span></span><br><span class="line"><span class="attr">sed</span> <span class="string"></span></span><br><span class="line"><span class="attr">seq</span></span><br><span class="line"><span class="attr">setenforce</span> <span class="string"></span></span><br><span class="line"><span class="attr">source</span> <span class="string"></span></span><br><span class="line"><span class="attr">tail</span> <span class="string"></span></span><br><span class="line"><span class="attr">touch</span>  <span class="string"></span></span><br><span class="line"><span class="attr">tree</span></span><br><span class="line"><span class="attr">useradd</span> <span class="string"></span></span><br><span class="line"><span class="attr">userdel</span> <span class="string"></span></span><br><span class="line"><span class="attr">unalias</span> <span class="string"></span></span><br><span class="line"><span class="attr">uname</span> <span class="string"></span></span><br><span class="line"><span class="attr">updated</span> <span class="string"></span></span><br><span class="line"><span class="attr">vi</span> <span class="string"></span></span><br><span class="line"><span class="attr">vim</span> <span class="string"></span></span><br><span class="line"><span class="attr">vimdiff</span> <span class="string"></span></span><br><span class="line"><span class="attr">visudo</span> <span class="string"></span></span><br><span class="line"><span class="attr">whoami</span></span><br><span class="line"><span class="attr">xargs</span> <span class="string"></span></span><br><span class="line"><span class="attr">yum</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>caffe安装系列——安装caffe</title>
    <url>/5177.html</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>网上关于caffe的安装教程非常多，但是关于每一步是否操作成功，出现了什么样的错误又该如何处理没有给出说明。因为大家的操作系统的环境千差万别，按照博客中的教程一步步的安装，最后可能失败——这是很常见的哦。有的教程甚至省略了一些细节部分，让小白更不知道如何判断每一步是否操作成功，如何处理出现的错误。</li>
<li>作者花费了很长时间才成功地将caffe装完，期间遇到好多错误，多次重装操作系统。现在将经验写下来，一方面为了和大家分享，讨论；另一方面是为了记录一下下~~~</li>
</ul>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统： <strong><em>Ubuntu 14.04</em></strong><br>GCC/G++:<strong><em>4.7.x</em></strong><br>OpenCV: <strong><em>2.4.11和3.0.0</em></strong><br>Matlab :<strong><em>R2014b(a)</em></strong><br>Python:   <strong><em>2.7</em></strong></p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BB%BC%E8%BF%B0/" target="_blank" rel="noopener">综述</a></li>
<li><a href>准备工作</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85GCC4.7%E5%92%8CG++4.7%E5%B9%B6%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">安装GCC4.7和G++4.7并降级</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/" target="_blank" rel="noopener">安装显卡驱动</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85cuda%E5%92%8Ccudnn/" target="_blank" rel="noopener">安装cuda和cudnn</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/23/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85Matlab/" target="_blank" rel="noopener">安装Matlab</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85OpenCV/" target="_blank" rel="noopener">安装OpenCV</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85python%E4%BE%9D%E8%B5%96%E5%8C%85/" target="_blank" rel="noopener">安装Python依赖包</a></li>
<li><a href="http://zhangxuezhi.com/2015/10/13/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85caffe/" target="_blank" rel="noopener">安装caffe</a></li>
</ol>
<h2 id="安装caffe"><a href="#安装caffe" class="headerlink" title="安装caffe"></a>安装caffe</h2><ul>
<li>这已经是caffe安装过程的最后一步了。但是<strong>行百里者，半于九十</strong>，因此还要小心。</li>
</ul>
<h3 id="1-安装Google-Logging-Library（glog）"><a href="#1-安装Google-Logging-Library（glog）" class="headerlink" title="1. 安装Google Logging Library（glog）"></a>1. 安装Google Logging Library（glog）</h3><ul>
<li><a href="https://code.google.com/p/google-glog/" target="_blank" rel="noopener">glog 下载地址</a></li>
<li>安装命令如下所示<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="attr">tar</span> <span class="string">-zxvf glog-0.3.3.tar.gz</span></span><br><span class="line"><span class="comment"># 切换路径</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">glog-0.3.3</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">./configure</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">make –j</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">make install</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-安装其它依赖"><a href="#2-安装其它依赖" class="headerlink" title="2. 安装其它依赖"></a>2. 安装其它依赖</h3><ul>
<li>执行以下命令即可。<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install -y libprotobuf-<span class="built_in">dev</span> libleveldb-<span class="built_in">dev</span> libsnappy-<span class="built_in">dev</span> libopencv-<span class="built_in">dev</span> libboost-<span class="built_in">all</span>-<span class="built_in">dev</span> libhdf5-serial-<span class="built_in">dev</span> </span><br><span class="line"></span><br><span class="line">sudo apt-<span class="built_in">get</span> install -y libgflags-<span class="built_in">dev</span> libgoogle-glog-<span class="built_in">dev</span> liblmdb-<span class="built_in">dev</span> protobuf-compiler protobuf-c-compiler python-pandas</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-编辑Makefile-config文件"><a href="#3-编辑Makefile-config文件" class="headerlink" title="3. 编辑Makefile.config文件"></a>3. 编辑Makefile.config文件</h3><ul>
<li>操作命令如下所示。<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">unzip caffe-master.zip #本地解压caffe-master</span><br><span class="line">#切换路径</span><br><span class="line">cd /caffe-master </span><br><span class="line">#caffe源文件中没有<span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span>config，需要复制<span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span>config.example</span><br><span class="line">cp <span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span>config.example <span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span>config</span><br><span class="line">#编辑<span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span>config</span><br><span class="line">vi <span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span>config</span><br></pre></td></tr></table></figure></li>
<li><p>修改Makefile.config</p>
<ul>
<li>取消第5行的注释，即将 <code>#USE_CUDNN=1 改为 USE_CUDNN=1</code>；</li>
<li>如果使用本教程系列安装的，就不需要修改<code>BLAS=atlas</code>，如果是参考欧新宇的教程，安装了MKL，需要改成<code>BLAS=mkl</code>；</li>
<li>启用CUDNN，加注释: <code>CPU_ONLY:=1 改成 # CPU_ONLY:=1</code>；</li>
<li><p>配置路径，实现caffe对Python和Matlab接口的支持：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">PYTHON_LIB :</span>= <span class="regexp">/usr/</span>local/lib</span><br><span class="line"><span class="string">MATLAB_DIR :</span>= <span class="regexp">/usr/</span>local<span class="regexp">/MATLAB/</span>R2014a</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="4-编辑Makefile文件"><a href="#4-编辑Makefile文件" class="headerlink" title="4. 编辑Makefile文件"></a>4. 编辑Makefile文件</h3><ul>
<li>如果openCV版本是2.4.x，此小节可以不再阅读</li>
<li>如果openCV版本3.0，还需要修改Makefile文件，实现对OpenCV 3.x的支持。</li>
<li>在Makefile文件中查找“Derive include and lib directories”一节，修改“LIBRARIES +=”的最后一行，增加<strong>opencv_imgcodecs</strong>，修改之后为：<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">LIBRARIES += opencv_core opencv_highgui opencv_imgproc opencv_imgcodecs</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-编译caffe-master"><a href="#5-编译caffe-master" class="headerlink" title="5.  编译caffe-master"></a>5.  编译caffe-master</h3><ul>
<li>依次执行下面的命令，编译caffe：<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">make</span> <span class="keyword">all</span> -<span class="keyword">j</span></span><br><span class="line"><span class="keyword">make</span> test -<span class="keyword">j</span></span><br><span class="line"><span class="keyword">make</span> runtest -<span class="keyword">j</span></span><br></pre></td></tr></table></figure></li>
<li><p>runtest执行结束之后，如下图所示。这样子就说明安装成功了。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150924102251050"></p>
</li>
<li><p>编译Python和Matlab用到的caffe文件</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span> pycaffe -j</span><br><span class="line"><span class="built_in">make</span> matcaffe -j</span><br></pre></td></tr></table></figure></li>
<li>pycaffe和matcaffe编译完成后，如下图所示：<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150924104443215"></li>
<li>编译过程中可能会遇到错误，比如<strong><em>./include/caffe/util/cudnn.hpp:8:34: fatal error: caffe/proto/caffe.pb.h: No such file or director</em></strong>，这是因为protobuf和pillow没有安装，或者是通过apt-get安装的。使用pip重新安装一遍即可解决问题。删除caffe-mast（提前保存Makefile.config和Makefile），解压，解压重新编译。<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pip install protobuf --upgrade -i <span class="string">http:</span><span class="comment">//pypi.douban.com/simple </span></span><br><span class="line">pip install pillow --upgrade -i <span class="string">http:</span><span class="comment">//pypi.douban.com/simple</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="6-设置Python环境变量"><a href="#6-设置Python环境变量" class="headerlink" title="6.设置Python环境变量"></a>6.设置Python环境变量</h3><ul>
<li>此时虽然编译完成，但是python还不能使用caffe，需要设置python的环境变量，将其caffe/python路径添加到python环境变量中。</li>
<li>操作命令如下所示：<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo vi /etc<span class="built_in">/profile </span># 编辑profile文件</span><br><span class="line"><span class="comment">#在最后面添加以下语句，注意将path换成你的系统下的路径</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PYTHONPATH</span>=/path/to/caffe/python:$PYTHONPATH</span><br></pre></td></tr></table></figure></li>
<li>在caffe安装整个过程中，我么修改/etc/profile三次，如下图所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150924102736837"></li>
</ul>
<h3 id="7-使用MNIST数据集进行测试"><a href="#7-使用MNIST数据集进行测试" class="headerlink" title="7.使用MNIST数据集进行测试"></a>7.使用MNIST数据集进行测试</h3><ul>
<li>参考<a href="http://ouxinyu.github.io/Blogs/20140723001.html" target="_blank" rel="noopener">欧新宇的教程</a>即可。</li>
<li>操作命令如下所示：<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 1. 数据预处理</span></span><br><span class="line">sh data/mnist/get_mnist.sh</span><br><span class="line"><span class="meta"># 2. 重建lmdb文件。Caffe支持三种数据格式输入网络，包括Image(.jpg, .png等)，leveldb，lmdb，根据自己需要选择不同输入吧。</span></span><br><span class="line"><span class="meta">#生成mnist-train-lmdb 和 mnist-train-lmdb文件夹，这里包含了lmdb格式的数据集</span></span><br><span class="line">sh examples/mnist/create_mnist.sh</span><br><span class="line"></span><br><span class="line"><span class="meta"># 3. 训练mnist</span></span><br><span class="line">sh examples/mnist/train_lenet.sh</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>注意：</strong>如果在使用过程中出现检测不到NVIDIA显卡的情况，重装显卡驱动和cuda即可。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>至此，ubuntu下安装caffe的工作已经结束了。如果你完全按照本教程操作，相信你一定已经成功安装caffe了，并且对caffe有了一定的了解。</li>
<li><strong><em>世上无难事只怕有坚持</em></strong>，安装过程虽然很复杂，但是只要坚持，不断的Google解决它，caffe就一定能安装。</li>
<li>错误不可怕，它是成功的障碍，同时也为我们成长提供了阶梯——所谓的能力，很大一部分是通过不断解决问题来获取的。</li>
<li>下面开始学习如何使用caffe做深度学习的研究喽，祝大家学习愉快。。。</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Caffe</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器安装并配置Ubuntu Server 14.04</title>
    <url>/8c26.html</url>
    <content><![CDATA[<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ul>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/48437097" target="_blank" rel="noopener">服务器如何进入Bios</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/48437187" target="_blank" rel="noopener">U盘安装Ubuntu Server ，CD-ROM自检，安装失败</a></li>
</ul>
<h2 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h2><ul>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/48437221" target="_blank" rel="noopener">使用Putty无法远程登录，显示服务器拒绝连接</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/48622069" target="_blank" rel="noopener">Putty使用设置</a><a id="more"></a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/48437247" target="_blank" rel="noopener">Ubuntu Server 14.04安装Gnome桌面环境</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/48437007" target="_blank" rel="noopener">windows使用VNC远程访问Ubuntu Server 14.04图形界面</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/48662435" target="_blank" rel="noopener">在VNC中Xfce4中Tab键失效的解决方法</a></li>
</ul>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/48437901" target="_blank" rel="noopener">Ubuntu Server 添加/删除/修改用户</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/48468143" target="_blank" rel="noopener">Ubuntu 14.04 64位安装32位兼容包</a></li>
<li><a href>开机自启任务</a></li>
<li><a href="http://blog.csdn.net/eager7/article/details/14221901" target="_blank" rel="noopener">linux创建新用户后shell无法自动补全命令</a></li>
<li><a href="http://www.cnblogs.com/vincedotnet/p/4013099.html" target="_blank" rel="noopener">ubuntu14.04设置静态ip</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_674d87000100pzmh.html" target="_blank" rel="noopener">linux下查看网关的命令</a></li>
</ul>
<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><ul>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/46872285" target="_blank" rel="noopener">Ubuntu-安装-Chrome</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/46876717" target="_blank" rel="noopener">Ubuntu-安装-搜狗输入法-详细教程</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/46878577" target="_blank" rel="noopener">Ubuntu-安装-Python包</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/47065475" target="_blank" rel="noopener">Ubuntu14.04安装Theano详细教程</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/47075401" target="_blank" rel="noopener"> Ubuntu-安装-cuda7.0-单显卡-超详细教程</a></li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/47169583" target="_blank" rel="noopener">Ubuntu-安装-theano+caffe-超详细教程</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>caffe安装系列——安装OpenCV</title>
    <url>/51f1.html</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>网上关于caffe的安装教程非常多，但是关于每一步是否操作成功，出现了什么样的错误又该如何处理没有给出说明。因为大家的操作系统的环境千差万别，按照博客中的教程一步步的安装，最后可能失败——这是很常见的哦。有的教程甚至省略了一些细节部分，让小白更不知道如何判断每一步是否操作成功，如何处理出现的错误。</li>
<li>作者花费了很长时间才成功地将caffe装完，期间遇到好多错误，多次重装操作系统。现在将经验写下来，一方面为了和大家分享，讨论；另一方面是为了记录一下下~~~</li>
</ul>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统： <strong><em>Ubuntu 14.04(64bit)</em></strong><br>GCC/G++:<strong><em>4.7.x</em></strong><br>OpenCV: <strong><em>2.4.11和3.0.0</em></strong><br>Matlab :<strong><em>R2014b(a)</em></strong><br>Python:   <strong><em>2.7</em></strong><br>显卡：Telsa K40m &amp; Telsa K20xm</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BB%BC%E8%BF%B0/" target="_blank" rel="noopener">综述</a></li>
<li><a href>准备工作</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85GCC4.7%E5%92%8CG++4.7%E5%B9%B6%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">安装GCC4.7和G++4.7并降级</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/" target="_blank" rel="noopener">安装显卡驱动</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85cuda%E5%92%8Ccudnn/" target="_blank" rel="noopener">安装cuda和cudnn</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/23/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85Matlab/" target="_blank" rel="noopener">安装Matlab</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85OpenCV/" target="_blank" rel="noopener">安装OpenCV</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85python%E4%BE%9D%E8%B5%96%E5%8C%85/" target="_blank" rel="noopener">安装Python依赖包</a></li>
<li><a href="http://zhangxuezhi.com/2015/10/13/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85caffe/" target="_blank" rel="noopener">安装caffe</a></li>
</ol>
<h2 id="安装OpenCV"><a href="#安装OpenCV" class="headerlink" title="安装OpenCV"></a>安装OpenCV</h2><ul>
<li>安装前，请下载我的安装脚本,如下图所示。<a href="http://pan.baidu.com/s/1geAezRH" target="_blank" rel="noopener">点此下载</a><br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150923231755240"></li>
<li>这个脚本是我根据GitHub上大神写的<a href="https://github.com/jayrambhia/Install-OpenCV" target="_blank" rel="noopener">安装OpenCV的脚本</a>改造的，这个脚本有一些问题，有些包安装不上，比如mmfpeg，有些包前后安装相互冲突，后面的会把前面的卸载等等。</li>
<li>使用这个脚本的方法就是，先给5个脚本执行权限<code>chmod +x *.sh</code>，然后依照顺序执行这些脚本。</li>
<li>执行1dependeccies.sh的方法是<code>sudo sh 1dependencies.sh</code>。这个脚本主要是安装OpenCV的一些依赖库。<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#edited by xuezhi zhang.</span></span><br><span class="line">echo <span class="string">"--- Removing any pre-installed ffmpeg and x264"</span></span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -qq <span class="builtin-name">remove</span> ffmpeg x264 libx264-dev</span><br><span class="line"><span class="comment">#function install_dependency &#123;</span></span><br><span class="line"><span class="comment">#    echo "--- Installing dependency: $1"</span></span><br><span class="line"><span class="comment">#    sudo apt-get -y install $1</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line">echo <span class="string">"Installing dependency"</span></span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libopencv-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install build-essential</span><br><span class="line"><span class="comment"># conflict</span></span><br><span class="line"><span class="comment">#sudo apt-get -y install checkinstall</span></span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install cmake</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install pkg-config</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install yasm</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libjasper-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libavcodec-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libavformat-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libswscale-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libdc1394-22-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libxine-dev</span><br><span class="line"><span class="comment">#echo "===================================================="</span></span><br><span class="line"><span class="comment"># conflict with libxine-dev</span></span><br><span class="line"><span class="comment">#sudo apt-get -y install libxine2-dev</span></span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libgstreamer0.10-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libgstreamer-plugins-base0.10-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libv4l-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install python-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install python-numpy</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install python-scipy</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install  python-sphinx</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libtbb-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libqt4-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libgtk2.0-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libfaac-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libmp3lame-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libopencore-amrnb-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libopencore-amrwb-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libtheora-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libvorbis-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libxvidcore-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install x264</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install v4l-utils</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install unzip</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libgtk2.0-0</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libjpeg-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libjpeg62 </span><br><span class="line"><span class="comment"># conflict</span></span><br><span class="line"><span class="comment">#sudo apt-get -y install libjpeg62-dev</span></span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libtiff4-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install libtiff5-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -y install qt5-default</span><br><span class="line">echo <span class="string">"===================================================="</span></span><br><span class="line">echo <span class="string">"^^^^^^^^^^^^^^^^^^^^^^Over^^^^^^^^^^^^^^^^^^^^^^^^^^"</span></span><br><span class="line">echo <span class="string">"===================================================="</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#install_dependency ffmpeg</span></span><br><span class="line"><span class="comment">#install fail, run file of ffmpeg_install to install it</span></span><br></pre></td></tr></table></figure></li>
<li>执行2download.sh的方法是<code>sudo sh 2download.sh</code>。这个脚本主要是下载一个安装包，为后面编译安装做准备。</li>
<li>执行2download.sh前，修改一下脚本，选择opencv-2.4.11和opencv-3.0.0，注释（#）另外一个就OK。<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"--- Dowloading v4l-utils"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line">wget http:<span class="string">//www.linuxtv.org/downloads/v4l-utils/v4l-utils-0.8.5.tar.bz2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"--- Dowloading mmfpeg-2.8"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line">wget http:<span class="string">//ffmpeg.org/releases/ffmpeg-2.8.tar.bz2</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Downloading OpenCV"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line"><span class="comment"># opencv-2.4.11和opencv-3.0.0根据自己的需要，选择下载一个就OK了。</span></span><br><span class="line"><span class="comment"># 下载 opencv-2.4.11.zip</span></span><br><span class="line">wget -O opencv-2.4.11.zip http:<span class="string">//sourceforge.net/projects/opencvlibrary/files/opencv-unix/2.4.11/opencv-2.4.11.zip/download</span></span><br><span class="line"><span class="comment"># 下载 opencv-3.0.0</span></span><br><span class="line"><span class="comment">#wget -O opencv-3.0.0.zip http://sourceforge.net/projects/opencvlibrary/files/opencv-unix/3.0.0/opencv-3.0.0.zip/download</span></span><br></pre></td></tr></table></figure></li>
<li>执行3mmfpeg_install.sh的方法是<code>sudo sh 3mmfpeg_install.sh</code>。这个脚本主要是安装mmfpeg。为后面安装OpenCV做准备。</li>
<li>因为mmfpeg不能使用apt-get安装，因此需要自己编译安装。<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Installing dependency"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line">sudo apt-get install -y libx264-dev libxext-dev libxfixes-dev</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"--- Configure mmfpeg-2.8"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line">tar -xf ffmpeg-2.8.tar.bz2</span><br><span class="line"><span class="keyword">cd</span> ffmpeg-2.8</span><br><span class="line"><span class="string">./configure</span> <span class="params">--prefix=/usr/local/ffmpeg</span> <span class="params">--enable-gpl</span> <span class="params">--enable-version3</span> <span class="params">--enable-nonfree</span> <span class="params">--enable-postproc</span> <span class="params">--enable-pthreads</span> <span class="params">--enable-libfaac</span> <span class="params">--enable-libmp3lame</span> <span class="params">--enable-libtheora</span> <span class="params">--enable-libx264</span> <span class="params">--enable-libxvid</span> <span class="params">--enable-x11grab</span> <span class="params">--enable-libvorbis</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"--- Making mmfpeg-2.8"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line">make -j</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"--- Installing mmfpeg-2.8"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line">make install</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br></pre></td></tr></table></figure></li>
<li>执行4v4l_install.sh，安装v4l。<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"---Installing v4l---"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"===================================================="</span></span><br><span class="line"><span class="comment">#wget http://www.linuxtv.org/downloads/v4l-utils/v4l-utils-0.8.5.tar.bz2</span></span><br><span class="line">tar -xvf v4l-utils-0.8.5.tar.bz2</span><br><span class="line"><span class="keyword">cd</span> v4l-utils-0.8.5</span><br><span class="line">make -j</span><br><span class="line">sudo make install</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br></pre></td></tr></table></figure></li>
<li>安装OpenCV有两个选择，OpenCV2.4.11和OpenCV3.0.0，分别对应于5opencv2411.sh和5opencv300.sh，根据自己的需要选择执行哪个脚本。【注意：和前面2download.sh中下载的版本保持一致】</li>
<li>注意根据自己的显卡，修改 CUDA_GENERATION。如果是Fermi架构，就需要将Kepler修改成Fermi</li>
<li>安装opencv2.4.11之前，根据最下面的错误分析中的错误1，修改opencvpath/cmake/OpenCVDetectCUDA.cmake文件之后，再执行脚本，否则可能出错。<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># added by xuezhi zhang.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># OpenCV 2.4.11</span></span><br><span class="line"><span class="comment"># http://vinayhacks.blogspot.com.es/2011/11/installing-opencv-231-with-ffmpeg-on-64.html</span></span><br><span class="line">echo <span class="string">"===================================================="</span></span><br><span class="line">echo <span class="string">"Installing OpenCV"</span></span><br><span class="line">echo <span class="string">"===================================================="</span></span><br><span class="line"></span><br><span class="line">sudo unzip opencv-2.4.11.zip</span><br><span class="line">cd opencv-2.4.11</span><br><span class="line">sudo mkdir build</span><br><span class="line">cd build</span><br><span class="line"><span class="comment"># 注意根据自己的显卡，修改 CUDA_GENERATION。如果是Fermi架构，就需要将Kepler修改成Fermi</span></span><br><span class="line">sudo cmake -D <span class="attribute">CMAKE_BUILD_TYPE</span>=RELEASE -D <span class="attribute">CMAKE_INSTALL_PREFIX</span>=/usr/local -D <span class="attribute">WITH_TBB</span>=ON -D <span class="attribute">BUILD_NEW_PYTHON_SUPPORT</span>=ON -D <span class="attribute">WITH_V4L</span>=ON -D <span class="attribute">INSTALL_C_EXAMPLES</span>=ON -D <span class="attribute">INSTALL_PYTHON_EXAMPLES</span>=ON -D <span class="attribute">BUILD_EXAMPLES</span>=ON -D <span class="attribute">WITH_QT</span>=ON -D <span class="attribute">WITH_OPENGL</span>=ON <span class="attribute">CUDA_GENERATION</span>=Kepler <span class="built_in">..</span></span><br><span class="line"><span class="comment">#make -j 32</span></span><br><span class="line">sudo make -j</span><br><span class="line">sudo make install</span><br><span class="line">sudo sh -c <span class="string">'echo "/usr/local/lib" &gt; /etc/ld.so.conf.d/opencv.conf'</span></span><br><span class="line">sudo ldconfig</span><br><span class="line">echo <span class="string">"OpenCV ready to be used"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="判定OpenCV是否安装成功"><a href="#判定OpenCV是否安装成功" class="headerlink" title="判定OpenCV是否安装成功"></a>判定OpenCV是否安装成功</h2><ul>
<li>安装过程中如果没有返回错误，说明安装没有问题，如果有任何错误提示，请自行Google解决。</li>
<li>安装成功之后，如下所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150924090717807"></li>
</ul>
<h2 id="OpenCV安装过程中的错误"><a href="#OpenCV安装过程中的错误" class="headerlink" title="OpenCV安装过程中的错误"></a>OpenCV安装过程中的错误</h2><ul>
<li>因为OpenCV有很多依赖包，因此安装过程非常的复杂。如果依赖的包没有安装，或者操作系统的编译环境有问题的话，很造成容易编译失败。</li>
<li><strong><em>错误1： cannot build OpenCV 2.4.11 with CUDA 7.0</em></strong></li>
<li>这个问题已经解决，<a href="https://github.com/Itseez/opencv/pull/3886" target="_blank" rel="noopener">参考网址</a>。</li>
<li>这是一个和cuda的架构1.1（cuda7.0不再支持架构1.x）有关的错误，通过修改opencvpath/cmake/OpenCVDetectCUDA.cmake文件解决。如下图所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150924091021080"></li>
<li><strong><em>错误2：error: a storage class is not allowed in an explicit specialization</em></strong></li>
<li>这是cuda和opencv版本不适应的错误。</li>
<li>这个问题也已经解决，<a href="http://code.opencv.org/issues/3814" target="_blank" rel="noopener">参考网址</a>。</li>
<li>因此，最好的组合方式【cuda7.0 + opencv3.0.】和【cuda6.5+opencv2.4.11】。这两种组合方法，我都已经在Ubuntu14.04操作系统（64位版本）上成功地安装了。</li>
<li>网上安装OpenCV的教程很多都是通过Install-OpenCV脚本来安装的，但我在使用过程中发现会出现问题，而网络教程有没有说明遇到问题如何解决，因此很坑。最终，借助Google，解决的所有问题，成功安装了所有依赖和OpenCV3.0。因此，如果大家遇到什么编译错误，不要害怕，google一下，一般别人已经遇到这个问题，并成功地解决了。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://ouxinyu.github.io/Blogs/20140723001.html" target="_blank" rel="noopener">《Caffe + Ubuntu 15.04 + CUDA 7.0 新手安装配置指南》</a>——欧新宇 </li>
<li><a href="http://sourceforge.net/projects/opencvlibrary/files/opencv-unix/" target="_blank" rel="noopener">opencv 项目</a></li>
<li><a href="http://pan.baidu.com/s/1mgH5dbE" target="_blank" rel="noopener">我的opencv安装脚本</a></li>
<li><a href="https://github.com/jayrambhia/Install-OpenCV" target="_blank" rel="noopener">GitHub上的opencv安装脚本</a></li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Caffe</tag>
      </tags>
  </entry>
  <entry>
    <title>caffe安装系列——安装python依赖包</title>
    <url>/3aa4.html</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>网上关于caffe的安装教程非常多，但是关于每一步是否操作成功，出现了什么样的错误又该如何处理没有给出说明。因为大家的操作系统的环境千差万别，按照博客中的教程一步步的安装，最后可能失败——这是很常见的哦。有的教程甚至省略了一些细节部分，让小白更不知道如何判断每一步是否操作成功，如何处理出现的错误。</li>
<li>作者花费了很长时间才成功地将caffe装完，期间遇到好多错误，多次重装操作系统。现在将经验写下来，一方面为了和大家分享，讨论；另一方面是为了记录一下下~~~</li>
</ul>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统： <strong><em>Ubuntu 14.04</em></strong><br>GCC/G++:<strong><em>4.7.x</em></strong><br>OpenCV: <strong><em>2.4.11和3.0.0</em></strong><br>Matlab :<strong><em>R2014b(a)</em></strong><br>Python:   <strong><em>2.7</em></strong></p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BB%BC%E8%BF%B0/" target="_blank" rel="noopener">综述</a></li>
<li><a href>准备工作</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85GCC4.7%E5%92%8CG++4.7%E5%B9%B6%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">安装GCC4.7和G++4.7并降级</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/" target="_blank" rel="noopener">安装显卡驱动</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85cuda%E5%92%8Ccudnn/" target="_blank" rel="noopener">安装cuda和cudnn</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/23/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85Matlab/" target="_blank" rel="noopener">安装Matlab</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85OpenCV/" target="_blank" rel="noopener">安装OpenCV</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85python%E4%BE%9D%E8%B5%96%E5%8C%85/" target="_blank" rel="noopener">安装Python依赖包</a></li>
<li><a href="http://zhangxuezhi.com/2015/10/13/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85caffe/" target="_blank" rel="noopener">安装caffe</a></li>
</ol>
<h2 id="安装theano依赖包"><a href="#安装theano依赖包" class="headerlink" title="安装theano依赖包"></a>安装theano依赖包</h2><ul>
<li>安装基本的依赖包<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装ipython</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装gfortran,后面编译过程中会用到</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装blas,Ubuntu下对应的是libopenblas，其它操作系统可能需要安装其它版本的blas——这是个OS相关的。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装lapack，Ubuntu下对应的是liblapack-dev，和OS相关。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装atlas，Ubuntu下对应的是libatlas-base-dev，和OS相关。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -y,遇到需要用户选择的项，都选y</span></span><br><span class="line">sudo apt-get install -y ipython ipython-notebook pandoc </span><br><span class="line">sudo apt-get install -y gfortran libopenblas-dev liblapack-dev libatlas-base-dev </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装pip</span></span><br><span class="line">sudo apt-get install -y python-pip python-dev python-nose g++ git </span><br><span class="line">sudo apt-get install -y python-numpy python-scipy  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 自己编译的原因是，防止theano出错</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用豆瓣的python源，下载速度快</span></span><br><span class="line">sudo pip install numpy -i http://pypi.douban.com/simple </span><br><span class="line">sudo pip install scipy -i http://pypi.douban.com/simple </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看目录/tmp/pip_build_root</span></span><br><span class="line">sudo apt-get install -y python-matplotlib python-sklearn python-sklearn-lib</span><br></pre></td></tr></table></figure></li>
<li>安装boost和pyCUDA<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装boost和和pyCUDA。pyCUDA需要boost。</span></span><br><span class="line">sudo apt-get install -y libboost-all-dev </span><br><span class="line"><span class="comment"># 下载pycuda源代码</span></span><br><span class="line">git clone <span class="params">--recursive</span> http:<span class="string">//git.tiker.net/trees/pycuda.git</span></span><br><span class="line"><span class="keyword">cd</span> pycuda</span><br><span class="line">sudo <span class="string">./configure.py</span> <span class="params">--cuda-root=/usr/local/cuda</span> <span class="params">--cudadrv-lib-dir=/usr/lib/x86_64-linux-gnu</span> <span class="params">--boost-inc-dir=/usr/include</span> <span class="params">--boost-lib-dir=/usr/lib</span> <span class="params">--boost-python-libname=boost_python</span> <span class="params">--boost-thread-libname=boost_thread</span> <span class="params">--no-use-shipped-boost</span> </span><br><span class="line"><span class="comment">#多核编译</span></span><br><span class="line">make -j </span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure></li>
<li><p>安装Theano</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">sudo pip install theano -i <span class="string">http:</span><span class="comment">//pypi.douban.com/simple</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装pyCaffe需要的依赖</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 使用apt-<span class="built_in">get</span>安装大多数包</span><br><span class="line">sudo apt-<span class="built_in">get</span> install -<span class="keyword">y</span> <span class="keyword">python</span>-numpy <span class="keyword">python</span>-scipy <span class="keyword">python</span>-matplotlib <span class="keyword">python</span>-sklearn <span class="keyword">python</span>-skimage <span class="keyword">python</span>-h5py <span class="keyword">python</span>-protobuf <span class="keyword">python</span>-leveldb <span class="keyword">python</span>-networkx <span class="keyword">python</span>-nose <span class="keyword">python</span>-pandas <span class="keyword">python</span>-gflags cython ipython <span class="keyword">python</span>-yaml </span><br><span class="line">sudo apt-<span class="built_in">get</span> install -<span class="keyword">y</span> protobuf-<span class="keyword">c</span>-<span class="keyword">compiler</span> protobuf-compile</span><br><span class="line"># 因为有些包使用apt-<span class="built_in">get</span>安装失败，所以使用pip重新安装它们，防止后面编译caffe过程中报错。</span><br><span class="line">sudo pip install protobuf --upgrade -i http://pypi.douban.<span class="keyword">com</span>/simple</span><br><span class="line">sudo pip install pillow --upgrade -i http://pypi.douban.<span class="keyword">com</span>/simple</span><br><span class="line">sudo pip install six --upgrade -i http://pypi.douban.<span class="keyword">com</span>/simple</span><br></pre></td></tr></table></figure>
<p>至此，安装python依赖包的工作已经完成。也没有什么检查安装成功的评价标准。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Caffe</tag>
      </tags>
  </entry>
  <entry>
    <title>caffe安装系列——综述</title>
    <url>/b95.html</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>网上关于caffe的安装教程非常多，但是关于每一步是否操作成功，出现了什么样的错误又该如何处理没有给出说明。因为大家的操作系统的环境千差万别，按照博客中的教程一步步的安装，最后可能失败——这是很常见的哦。有的教程甚至省略了一些细节部分，让小白更不知道如何判断每一步是否操作成功，如何处理出现的错误。</li>
<li>作者花费了很长时间才成功地将caffe装完，期间遇到好多错误，多次重装操作系统。现在将经验写下来，一方面为了和大家分享，讨论；另一方面是为了记录一下下~~~</li>
</ul>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统： <strong><em>Ubuntu 14.04</em></strong><br>GCC/G++:<strong><em>4.7.x</em></strong><br>OpenCV: <strong><em>2.4.11和3.0.0</em></strong><br>Matlab :<strong><em>R2014b(a)</em></strong><br>Python:   <strong><em>2.7</em></strong></p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BB%BC%E8%BF%B0/" target="_blank" rel="noopener">综述</a></li>
<li><a href>准备工作</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85GCC4.7%E5%92%8CG++4.7%E5%B9%B6%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">安装GCC4.7和G++4.7并降级</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/" target="_blank" rel="noopener">安装显卡驱动</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85cuda%E5%92%8Ccudnn/" target="_blank" rel="noopener">安装cuda和cudnn</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/23/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85Matlab/" target="_blank" rel="noopener">安装Matlab</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85OpenCV/" target="_blank" rel="noopener">安装OpenCV</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85python%E4%BE%9D%E8%B5%96%E5%8C%85/" target="_blank" rel="noopener">安装Python依赖包</a></li>
<li><a href="http://zhangxuezhi.com/2015/10/13/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85caffe/" target="_blank" rel="noopener">安装caffe</a></li>
</ol>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0.准备工作"></a>0.准备工作</h3><ul>
<li>安装Ubuntu 14.04（15.04）,最好安装较新版本的Ubuntu。为什么选择Ubuntu呢？一方面，个人使用习惯，感觉Ubuntu安装软件等特别方便，使用特别顺手；另一方面，caffe项目最初貌似在Ubuntu上开发的，原生嘛。</li>
<li>安装过程需要下载东东，因此需要<strong>联网</strong>。</li>
<li>安装</li>
</ul>
<h3 id="1-安装GCC4-7和G-4-7并降级"><a href="#1-安装GCC4-7和G-4-7并降级" class="headerlink" title="1.安装GCC4.7和G++4.7并降级"></a>1.安装GCC4.7和G++4.7并降级</h3><ul>
<li><strong><em>为什么要先安装GCC和G++，并需要降级呢？</em></strong></li>
<li>Ubuntu14.04版本默认的GCC和G++都是4.8。而Matlab默认支持的mex编译器是GCC4.7.x和G++4.7.x。因此需要额外安装GCC4.7和G++4.7并降级。</li>
<li><strong><em>为什么需要先安装编译器GCC和G++，而不是先安装显卡驱动和cuda等等呢？</em></strong></li>
<li>首先，先安装显卡驱动，后安装GCC并降级的安装顺序过程中，遇到了很多问题。比如，在安装CUDA SAMPLES的过程中，遇到了问题<strong>/usr/bin/ld: cannot find –lGL</strong>，后面通过网上教程，重新连接该库文件，仍然不能通过OpenCV的编译。但是，先安装GCC，再安装显卡驱动，就不会遇到这个问题了。</li>
<li><p>其次，请先看下图。这是在成功地安装完显卡驱动之后，查看加载的显卡的版本信息时返回的结果。注意，包含了GCC4.7.3。说明，显卡安装过程中，会和GCC的版本产生联系。。。。这也就不不难理解为什么在编译Cuda Samples过程中会遇到上面的问题。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150922092210340"></p>
</li>
<li><p>所以，请先安装GCC4.7和G++4.7，然后在执行下面的步骤。</p>
</li>
</ul>
<h3 id="2-安装NVIDIA显卡驱动"><a href="#2-安装NVIDIA显卡驱动" class="headerlink" title="2.安装NVIDIA显卡驱动"></a>2.<a href="http://blog.csdn.net/xuezhisdc/article/details/48650565" target="_blank" rel="noopener">安装NVIDIA显卡驱动</a></h3><ul>
<li><strong><em>为什么需要安装NVIDIA显卡驱动，Ubuntu没有自带的显卡驱动吗？</em></strong><ul>
<li>Ubuntu自带的显卡驱动是开源的Nouveau，据说是一个比较烂的东东。而且，最关键的是cuda不支持Nouveau。如果想使用cuda进行GPU计算，必须安装NVIDIA显卡驱动。</li>
</ul>
</li>
<li><strong><em>选择哪个版本的显卡驱动呢</em></strong><ul>
<li>这个问题需要结合操作系统，显卡和个人需求来讨论。</li>
<li>操作系统影响显卡驱动的版本。比如，我在Ubuntu14.04 Server上安装NVIDIA-352显卡驱动，说是由于dkms，安装失败。目前，通过apt-get方式可以安装的最新NVIDIA显卡驱动是NVIDIA-346。</li>
<li>显卡嘛，硬件当然要和驱动适应才行</li>
<li>个人需求，主要从cuda的角度考虑。比如cuda7.5需要显卡驱动最低版本是nvidia-352；cuda7.0需要显卡驱动最低版本是nvidia-336；cuda6.5需要显卡驱动最低版本是nvidia-33*；其他的记不清楚啦。。。</li>
</ul>
</li>
<li><strong><em>显卡驱动的安装方式有哪些</em></strong><ul>
<li>方法一：去NVIDIA官网下载相应的驱动二进制安装包，然后安装。</li>
<li>方法二：通过<code>apt-get</code>来安装。</li>
<li>区别：apt-get安装方便，但是不能安装最新的显卡驱动，目前ubuntu14.04通过apt-get可以安装nvidia-346显卡。</li>
<li>安装过程中注意事项：①需要关闭显示管理器，②二进制安装需要修改文件，并重启。</li>
</ul>
</li>
</ul>
<h3 id="3-安装cuda和cudnn"><a href="#3-安装cuda和cudnn" class="headerlink" title="3.安装cuda和cudnn"></a>3.<a href="http://blog.csdn.net/xuezhisdc/article/details/48651003" target="_blank" rel="noopener">安装cuda和cudnn</a></h3><ul>
<li><strong><em>安装cuda的方式有哪些？</em></strong><ul>
<li>方法一：官网下载cuda开发包的二进制安装包进行安装。</li>
<li>方法二：官网下载cuda开发包的deb文件进行安装。</li>
</ul>
</li>
<li><strong><em>cuda版本的选择问题？</em></strong><ul>
<li>根据个人需求和操作系统来决定，显卡驱动版本。</li>
<li>cuda6.5是一个分界点，cuda6.5支持compute_11，compute_12. etc. compute_1X系列架构；从cuda7.0开始，不支持compute_1X系列架构，最低是compute_20架构。</li>
<li>cuda对显卡驱动有要求。比如cuda7.5需要显卡驱动最低版本是nvidia-352；cuda7.0需要显卡驱动最低版本是nvidia-336；cuda6.5需要显卡驱动最低版本是nvidia-33*；其他的记不清楚啦。因此，结合自己操作系统可以安装的NVIDIA显卡驱动来决定选择哪个版本的cuda。</li>
</ul>
</li>
<li><strong><em>为什么安装cudnn？</em></strong><ul>
<li>cudnn可以简单的理解为<code>CUDa cNN</code>，即在GPU上做卷积运算。最近几年，深度学习很火，尤其是CNN（卷积神经网络）。通过cudnn，可以极大的提高CNN训练速度。简单的说，实用GPU是为了快，实用cudnn是为了更快。</li>
</ul>
</li>
</ul>
<h3 id="4-安装Matlab"><a href="#4-安装Matlab" class="headerlink" title="4.安装Matlab"></a>4.<a href="http://blog.csdn.net/xuezhisdc/article/details/48691147" target="_blank" rel="noopener">安装Matlab</a></h3><ul>
<li>在Ubuntu中安装Matlab比较简单，除了几个注意事项，和Windows中安装没有区别。</li>
<li><strong><em>为什么需要安装Matlab？</em></strong><ul>
<li>caffe有Matlab的接口，因此如果需要使用Matlab调用caffe，进行编程，就需要安装Matlab。如果你觉得使用C或Python编程比较难，就请安装Matlab。当然如果不需要，并且后面不会编译caffe生成Matlab的接口，就不需要安装Matlab了。这个纯粹根据个人需求来定。</li>
</ul>
</li>
<li>Matlab是商业软件，请自行百度下载。。。【主要是太大了，不方便提供】</li>
</ul>
<h3 id="5-安装OpenCV"><a href="#5-安装OpenCV" class="headerlink" title="5.安装OpenCV"></a>5.<a href="http://blog.csdn.net/xuezhisdc/article/details/48691797" target="_blank" rel="noopener">安装OpenCV</a></h3><ul>
<li><strong><em>为什么需要安装OpenCV？</em></strong><ul>
<li>caffe是用来做深度学习的，深度学习的一大应用对象就是图像和视频。而OpenCV是目前最火的开源计算机视觉库，非常多的项目多用到了OpenCV，当然caffe也依赖OpenCV。所以，需要安装OpenCV，否则无法使用caffe哦。。。</li>
</ul>
</li>
<li><strong><em>OpenCV安装简单吗？</em></strong><ul>
<li>答案是因人而异。有的人觉得简单，可以自己弄，有的人觉得难，没关系，大神们有写的安装脚本<a href="https://github.com/jayrambhia/Install-OpenCV" target="_blank" rel="noopener">点此*下载</a>，运行一下就OK了。</li>
<li>但是，使用别人脚本安装的方法，也会遇到一些问题。如果遇到问题，请Google解决。</li>
<li>最简单的方式是使用我修改过的脚本，按照顺序执行12345个脚本，基本不需要修改就能成功安装。</li>
<li>最后提醒，安装OpenCV是挺麻烦的，请耐心安装，编译不过的话，查看错误Google，解决了再编译，一遍遍的尝试，最后就能解决问题了。</li>
</ul>
</li>
<li><strong><em>应该安装OpenCV哪个版本呢？</em></strong><ul>
<li>OpenCV的版本和cuda的版本最好匹配。这样子安排的目的是为了减少错误出现的概率。比如，我无错误编译成功的组合有【cuda7.0 + opencv3.0】，【cuda6.5+opencv2.11】。</li>
<li>应该安装最新的，又不该安装最新的。呵呵，好别扭哦。针对于低版本的cuda，最好安装opencv2.x。而且是opencv2.x中最新的。</li>
<li>低版本cuda安装opencv2.x的原因是，opencv的一些文件中涉及一些关于cuda架构的设置，opencv2.x中有支持相应的架构的配置。从这个角度看，cuda6.5是最保险的， 因为它既支持compute_1x，也支持更高的架构。</li>
</ul>
</li>
</ul>
<h3 id="6-安装Python相关依赖"><a href="#6-安装Python相关依赖" class="headerlink" title="6.安装Python相关依赖"></a>6.<a href="http://blog.csdn.net/xuezhisdc/article/details/48706843" target="_blank" rel="noopener">安装Python相关依赖</a></h3><ul>
<li><strong><em>为什么要安装python相关依赖？？？</em></strong><ul>
<li>首先，python在linux中应用非常的广泛，很多项目都会涉及python，caffe也不例外。</li>
<li>其次，caffe提供了python的接口，为了后面使用，也需要这些依赖。</li>
</ul>
</li>
<li><strong><em>这些依赖都可以通过apt-get安装吗？</em></strong><ul>
<li>答案是否定的。</li>
<li>首先，google一下<code>apt-get vs pip</code>，查看两者区别。</li>
<li>其次，安装theano的时候，发现apt-get安装的numPy和sciPy无法通过测试，并且造成theano测试失败。使用pip安装成功。参考<a href="http://blog.csdn.net/xuezhisdc/article/details/47065475" target="_blank" rel="noopener">《Ubuntu14.04安装Theano详细教程》</a>。</li>
<li>最后，在安装caffe的过程中，发现有几个python依赖包必须通过pip安装（即自行编译），否则无法成功地编译caffe。</li>
</ul>
</li>
</ul>
<h3 id="7-安装caffe"><a href="#7-安装caffe" class="headerlink" title="7.安装caffe"></a>7.<a href="http://blog.csdn.net/xuezhisdc/article/details/48707101" target="_blank" rel="noopener">安装caffe</a></h3><ul>
<li>再重复一遍，请在上面所有步骤成功执行的前提下，安装caffe，否则编译肯定不会通过的。</li>
<li><strong><em>caffe源代码能不能直接拿过来编译呢？</em></strong><ul>
<li>不能。至少需要修改一个文件Makefile.config。该文件给caffe编译提供了必要的信息。</li>
<li>如果opencv的版本是3.0，还需要修改其他项。</li>
<li>其他的请参考安装caffe的教程</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>至此，ubuntu下安装caffe的工作已经结束了。如果你完全按照本教程操作，相信你一定已经成功安装caffe了，并且对caffe有了一定的了解。</li>
<li><strong><em>世上无难事只怕有坚持</em></strong>，安装过程虽然很复杂，但是只要坚持，不断的Google解决它，caffe就一定能安装。</li>
<li>错误不可怕，它是成功的障碍，同时也为我们成长提供了阶梯——所谓的能力，很大一部分是通过不断解决问题来获取的。</li>
<li>下面开始学习如何使用caffe做深度学习的研究喽，祝大家学习愉快。。。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://ouxinyu.github.io/Blogs/20140723001.html" target="_blank" rel="noopener">《Caffe + Ubuntu 15.04 + CUDA 7.0 新手安装配置指南》</a>——欧新宇<br>这个教程很好，请查看本教程的过程中，结合欧新宇的教程一并查看。</li>
<li><a href="https://github.com/BVLC/caffe" target="_blank" rel="noopener">《caffe - GitHub主页》</a></li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Caffe</tag>
      </tags>
  </entry>
  <entry>
    <title>caffe安装系列——安装NVIDIA显卡驱动</title>
    <url>/9237.html</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>网上关于caffe的安装教程非常多，但是关于每一步是否操作成功，出现了什么样的错误又该如何处理没有给出说明。因为大家的操作系统的环境千差万别，按照博客中的教程一步步的安装，最后可能失败——这是很常见的哦。有的教程甚至省略了一些细节部分，让小白更不知道如何判断每一步是否操作成功，如何处理出现的错误。</li>
<li>作者花费了很长时间才成功地将caffe装完，期间遇到好多错误，多次重装操作系统。现在将经验写下来，一方面为了和大家分享，讨论；另一方面是为了记录一下下~~~</li>
</ul>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统： <strong><em>Ubuntu 14.04(64 bit)</em></strong><br>GCC/G++:<strong><em>4.7.x</em></strong><br>OpenCV: <strong><em>2.4.11和3.0.0</em></strong><br>Matlab :<strong><em>R2014b(a)</em></strong><br>Python:   <strong><em>2.7</em></strong><br>显卡：Telsa K40m &amp; Telsa K20xm</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BB%BC%E8%BF%B0/" target="_blank" rel="noopener">综述</a></li>
<li><a href>准备工作</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85GCC4.7%E5%92%8CG++4.7%E5%B9%B6%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">安装GCC4.7和G++4.7并降级</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/" target="_blank" rel="noopener">安装显卡驱动</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85cuda%E5%92%8Ccudnn/" target="_blank" rel="noopener">安装cuda和cudnn</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/23/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85Matlab/" target="_blank" rel="noopener">安装Matlab</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85OpenCV/" target="_blank" rel="noopener">安装OpenCV</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85python%E4%BE%9D%E8%B5%96%E5%8C%85/" target="_blank" rel="noopener">安装Python依赖包</a></li>
<li><a href="http://zhangxuezhi.com/2015/10/13/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85caffe/" target="_blank" rel="noopener">安装caffe</a></li>
</ol>
<h2 id="安装NVIDIA显卡驱动"><a href="#安装NVIDIA显卡驱动" class="headerlink" title="安装NVIDIA显卡驱动"></a>安装NVIDIA显卡驱动</h2><h3 id="0-版本说明"><a href="#0-版本说明" class="headerlink" title="0.版本说明"></a>0.版本说明</h3><p>cuda6.5 <strong><em>NVIDIA-Linux-x86_64-346.xx</em></strong> (Ubuntu 14.04)<br>cuda7.0 <strong><em>NVIDIA-Linux-x86_64-346.xx</em></strong> (Ubuntu 14.04)<br>cuda7.5 <strong><em>NVIDIA-Linux-x86_64-352.xx</em></strong> (Ubuntu 15.04)</p>
<h3 id="1-使用apt-get安装"><a href="#1-使用apt-get安装" class="headerlink" title="1.使用apt-get安装"></a>1.使用apt-get安装</h3><ul>
<li>安装32位兼容包<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 32位兼容包</span></span><br><span class="line"><span class="meta"># 为什么呢？安装二进制安装包时，提示是否安装32bit兼容包，因此，最好安装上32兼容包，以后操作系统上安装32bit软件也方便啊。。。</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> install lib32z1</span><br></pre></td></tr></table></figure></li>
<li>关闭图形显示管理器<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要关闭图形显示管理器（Display Manager）。显卡，当然和显示有关喽，因此最好关闭图形显示管理器。</span></span><br><span class="line"><span class="literal">stop</span> lightdm</span><br></pre></td></tr></table></figure></li>
<li>安装显卡驱动<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 安装显卡驱动。截止目前为止，<span class="number">346</span>显卡驱动是Ubuntu可以通过apt-<span class="keyword">get</span>安装的最新显卡驱动，也是cuda7<span class="number">.0</span>支持的最低显卡驱动版本。</span><br><span class="line">sudo apt-<span class="keyword">get</span> install nvidia<span class="number">-346</span></span><br></pre></td></tr></table></figure></li>
<li>重启电脑，检查是否成功<ul>
<li>电脑重启后，命令行中输入<code>cat /proc/driver/nvidia/version</code>查看显卡信息。如下图所示</li>
<li>如果/proc/driver/目录下没有nvidia目录，说明nvidia显卡驱动没有加载，也就意味着安装失败。请参考其它教程，保证安装完成。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150922092210340"></li>
</ul>
</li>
<li>注意：务必成功安装显卡驱动之后，再继续其它步骤，否则。。。。</li>
<li>注意：先将GCC和G++降级，然后再安装驱动。</li>
</ul>
<h3 id="2-使用二进制安装包安装"><a href="#2-使用二进制安装包安装" class="headerlink" title="2.使用二进制安装包安装"></a>2.使用二进制安装包安装</h3><ul>
<li>下载驱动</li>
<li>参考<a href="http://blog.csdn.net/xuezhisdc/article/details/47075401" target="_blank" rel="noopener">《Ubuntu-安装-cuda7.0-单显卡-超详细教程》</a>安装。。。</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Caffe</tag>
      </tags>
  </entry>
  <entry>
    <title>caffe安装系列——安装Matlab</title>
    <url>/3bb1.html</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>网上关于caffe的安装教程非常多，但是关于每一步是否操作成功，出现了什么样的错误又该如何处理没有给出说明。因为大家的操作系统的环境千差万别，按照博客中的教程一步步的安装，最后可能失败——这是很常见的哦。有的教程甚至省略了一些细节部分，让小白更不知道如何判断每一步是否操作成功，如何处理出现的错误。</li>
<li>作者花费了很长时间才成功地将caffe装完，期间遇到好多错误，多次重装操作系统。现在将经验写下来，一方面为了和大家分享，讨论；另一方面是为了记录一下下~~~</li>
</ul>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统： <strong><em>Ubuntu 14.04(64bit)</em></strong><br>GCC/G++:<strong><em>4.7.x</em></strong><br>OpenCV: <strong><em>2.4.11和3.0.0</em></strong><br>Matlab :<strong><em>R2014b(a)</em></strong><br>Python:   <strong><em>2.7</em></strong><br>显卡：Telsa K40m &amp; Telsa K20xm</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BB%BC%E8%BF%B0/" target="_blank" rel="noopener">综述</a></li>
<li><a href>准备工作</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85GCC4.7%E5%92%8CG++4.7%E5%B9%B6%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">安装GCC4.7和G++4.7并降级</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/" target="_blank" rel="noopener">安装显卡驱动</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85cuda%E5%92%8Ccudnn/" target="_blank" rel="noopener">安装cuda和cudnn</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/23/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85Matlab/" target="_blank" rel="noopener">安装Matlab</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85OpenCV/" target="_blank" rel="noopener">安装OpenCV</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85python%E4%BE%9D%E8%B5%96%E5%8C%85/" target="_blank" rel="noopener">安装Python依赖包</a></li>
<li><a href="http://zhangxuezhi.com/2015/10/13/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85caffe/" target="_blank" rel="noopener">安装caffe</a></li>
</ol>
<h2 id="安装Matlab"><a href="#安装Matlab" class="headerlink" title="安装Matlab"></a>安装Matlab</h2><h3 id="1-下载Matlab"><a href="#1-下载Matlab" class="headerlink" title="1. 下载Matlab"></a>1. 下载Matlab</h3><ul>
<li>下载地址，请自行百度解决。太大了，不方便提供。</li>
<li>版本选择问题。最好下载较新的版本。比如R2014a，R2014b和R2015a等。</li>
<li>下载破解文件Crack文件。一般情况下，crack文件是包含在下载的Matlab安装镜像里面的——除非你下载的是MathWork公司提供的原版。如果里面没有crack文件，自行<strong><em>Google</em></strong>解决。<h3 id="2-安装Matlab"><a href="#2-安装Matlab" class="headerlink" title="2. 安装Matlab"></a>2. 安装Matlab</h3></li>
<li>Matlab安装过程请参考下面的连接（欧新宇）。里面给出了详细的教程。</li>
<li><p>说明几点：</p>
<ul>
<li>Windows下安装Matlab，直接双击安装文件即可。但是，在Ubuntu中安装Matlab时，是<strong><em>在命令行中安装</em></strong>的。具体而言，在命令行中，切换到Matlab安装包路径下，执行<code>sudo ./install</code>，就会跳出安装会话框。</li>
<li><em>Ubuntu安装Matlab需要在图形界面中操作</em>。如上所言，执行<code>sudo ./install</code>之后，会跳出图形对话框，如果是在纯粹的命令行上，应该无法进行。</li>
<li>安装过程中，依次会提示<strong>输入序列号</strong>，<strong>证书路径</strong>。</li>
</ul>
</li>
<li><p>切记：图形安装对话框结束之后，Matlab并没有安装完成。</p>
<ul>
<li>这时尝试打开Matlab会报错。通过在命令行中执行<code>matlab</code>，可以看到返回的错误信息是<strong><em>没哟激活</em></strong>。</li>
<li>但是，你可能疑惑，为什么呢？最后激活步骤，明明导入了证书文件（*.lic）?!</li>
<li>这是因为，我们使用的是盗版的的Matlab，所以还需要额外的一步：<strong><em>替换libmwservices.so库文件</em></strong>。</li>
<li>替换需要在命令行中操作，还需要root权限（超级用户）。因为需要将libmwservices.so复制到<code>/usr/local/Matlab/R2014b/***</code>目录下，该目录属于root用户，所以需要在命令行中是，使用<code>cp</code>（或<code>mv</code>）命令完成。</li>
<li>替换libmwservices.so之后就可以成功运行Matlab了。<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo cp libmwservices.so <span class="regexp">/usr/</span>local<span class="regexp">/MATLAB/</span>R2014a<span class="regexp">/bin/g</span>lnxa64<span class="regexp">/</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="3-GCC和G-版本问题"><a href="#3-GCC和G-版本问题" class="headerlink" title="3.GCC和G++版本问题"></a>3.GCC和G++版本问题</h3><ul>
<li>前面<a href="http://blog.csdn.net/xuezhisdc/article/details/48650015" target="_blank" rel="noopener"> 《caffe安装系列——安装GCC4.7和G++4.7并降级》</a>介绍了如何实现GCC和G++降级，并提到了为什么这样操作——Ubuntu14.04版本默认的GCC和G++都是4.8。而Matlab默认支持的mex编译器是GCC4.7.x和G++4.7.x。因此需要额外安装GCC4.7和G++4.7并降级。<br>*请注意一点： <a href="http://blog.csdn.net/xuezhisdc/article/details/48650015" target="_blank" rel="noopener"> 《caffe安装系列——安装GCC4.7和G++4.7并降级》</a>实现了GCC和G++的降级，但是并没有更改任何的关于Matlab文件。Matalb要使用GCC4.7和G++4.7，还需要做一些工作——重新连接 libstdc++.so.6文件。</li>
<li>具体操作命令如下所示：<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">#拷贝文件</span><br><span class="line">sudo cp /usr/lib/x86_64-linux-gnu/libstdc++.so<span class="number">.6</span><span class="number">.0</span><span class="number">.20</span> /usr/local/MATLAB/R2014a/sys/os/glnxa64/libstdc++.so<span class="number">.6</span><span class="number">.0</span><span class="number">.20</span></span><br><span class="line"># libstdc++.so<span class="number">.6</span><span class="number">.0</span><span class="number">.20</span>的版本，可能因为系统不同而不同，使用最新的就可以了。Ubuntu14<span class="number">.04</span>的最新版本是libstdc++.so<span class="number">.6</span><span class="number">.0</span><span class="number">.19</span>。</span><br><span class="line"># 切换路径</span><br><span class="line">cd /usr/local/MATLAB/R2014a/sys/os/glnxa64/</span><br><span class="line"># 修改权限</span><br><span class="line">chmod <span class="number">555</span> libstdc++.so<span class="number">.6</span><span class="number">.0</span><span class="number">.20</span></span><br><span class="line">#（仅仅是备份，可以不操作）。</span><br><span class="line">sudo mv libstdc++.so<span class="number">.6</span> libstdc++.so<span class="number">.6</span>.backup </span><br><span class="line"># 重新链接</span><br><span class="line">ln –s libstdc++.so<span class="number">.6</span><span class="number">.0</span><span class="number">.20</span> libstdc++.so<span class="number">.6</span></span><br><span class="line"># 使配置生效</span><br><span class="line">sudo ldconfig -v</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-建立Matlab的快捷方式"><a href="#4-建立Matlab的快捷方式" class="headerlink" title="4. 建立Matlab的快捷方式"></a>4. 建立Matlab的快捷方式</h3><ul>
<li>新建一个文本文件（使用vi, gedit等），输入以下内容。退出保存。将该文件放到/home/yourname/Desktop/目录下，既可以看到Matlab的快捷方式。<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Desktop Entry]</span></span><br><span class="line"><span class="attr">Name</span>=Matlab <span class="number">2014</span>b</span><br><span class="line"><span class="attr">Exec</span>=/usr/local/MATLAB/R2014b/bin/matlab -desktop</span><br><span class="line"><span class="attr">Icon</span>=/usr/local/MATLAB/R2014b/toolbox/nnet/nnresource/icons/matlab.png</span><br><span class="line"><span class="attr">Type</span>=Application</span><br></pre></td></tr></table></figure></li>
<li><strong>Exec</strong>是可执行文件，需要是绝对路径。</li>
<li><strong>Icon</strong>是图标，如果没有设置的话，不会显示Matlab的标志图标</li>
<li>以上路径根据自己安装路径更改。</li>
<li>快捷方式带一个小锁的问题。看看该文件的属主是谁，如果不是自己，使用<code>chown</code>命令将属主改为自己；如果没有执行权限，使用<code>chmod</code>命令增加可执行权限。</li>
</ul>
<h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><ul>
<li><strong>检查Matlab是否安装成功。</strong><br>在命令行中输入matlab，回车。如果打开Matalb，说明安装成功。如果没有打开，将路径切换到Matlab安装路径下的bin文件夹下，再次执行matlab，如果还没有打开，就说明没有安装成功。如果任何一次打开了，就说明安装成功了。</li>
<li><strong>检查GCC版本问题</strong>。<br>通过命令<code>strings /usr/local/MATLAB/R2014a/sys/os/glnxa64/libstdc++.so.6 | grep GLIBCXX</code>，可以看一下，是否已经成功包含了GLIBCXX_3.4.20（Ubuntu14.04中是GLIBCXX_3.4.19），如果已经存在，基本上就成功了。</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://ouxinyu.github.io/Blogs/20140723001.html" target="_blank" rel="noopener">《Caffe + Ubuntu 15.04 + CUDA 7.0 新手安装配置指南》</a>——欧新宇 </li>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/48650015" target="_blank" rel="noopener"> 《caffe安装系列——安装GCC4.7和G++4.7并降级》</a></li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Caffe</tag>
      </tags>
  </entry>
  <entry>
    <title>caffe安装系列——安装cuda和cudnn</title>
    <url>/7e5a.html</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>网上关于caffe的安装教程非常多，但是关于每一步是否操作成功，出现了什么样的错误又该如何处理没有给出说明。因为大家的操作系统的环境千差万别，按照博客中的教程一步步的安装，最后可能失败——这是很常见的哦。有的教程甚至省略了一些细节部分，让小白更不知道如何判断每一步是否操作成功，如何处理出现的错误。</li>
<li>作者花费了很长时间才成功地将caffe装完，期间遇到好多错误，多次重装操作系统。现在将经验写下来，一方面为了和大家分享，讨论；另一方面是为了记录一下下~~~</li>
</ul>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统： <strong><em>Ubuntu 14.04(64bit)</em></strong><br>GCC/G++:<strong><em>4.7.x</em></strong><br>OpenCV: <strong><em>2.4.11和3.0.0</em></strong><br>Matlab :<strong><em>R2014b(a)</em></strong><br>Python:   <strong><em>2.7</em></strong><br>显卡：Telsa K40m &amp; Telsa K20xm</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BB%BC%E8%BF%B0/" target="_blank" rel="noopener">综述</a></li>
<li><a href>准备工作</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85GCC4.7%E5%92%8CG++4.7%E5%B9%B6%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">安装GCC4.7和G++4.7并降级</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/" target="_blank" rel="noopener">安装显卡驱动</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85cuda%E5%92%8Ccudnn/" target="_blank" rel="noopener">安装cuda和cudnn</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/23/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85Matlab/" target="_blank" rel="noopener">安装Matlab</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85OpenCV/" target="_blank" rel="noopener">安装OpenCV</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85python%E4%BE%9D%E8%B5%96%E5%8C%85/" target="_blank" rel="noopener">安装Python依赖包</a></li>
<li><a href="http://zhangxuezhi.com/2015/10/13/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85caffe/" target="_blank" rel="noopener">安装caffe</a></li>
</ol>
<h2 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装cuda</h2><ul>
<li>参考<a href="http://blog.csdn.net/xuezhisdc/article/details/47075401" target="_blank" rel="noopener">《Ubuntu-安装-cuda7.0-单显卡-超详细教程》</a> <a href="http://ouxinyu.github.io/Blogs/20140723001.html" target="_blank" rel="noopener">《Caffe + Ubuntu 15.04 + CUDA 7.0 新手安装配置指南》</a></li>
<li>注意1：安装cuda可以通过二进制安装包安装，也可以通过deb包在线安装。本文使用二进制安装包安装。</li>
<li>注意2：由于前面已经安装了<strong>显卡驱动</strong>，因此关于显卡驱动的选项，选择<strong>no</strong>，即不再安装显卡驱动。<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 安装依赖库</span></span><br><span class="line">apt-<span class="keyword">get</span> install freeglut3-dev build-essential libx11-dev libxmu-dev libgl1-mesa-dev libglu1-mesa libglu1-mesa-dev libxi-dev </span><br><span class="line"><span class="meta"># 添加执行权限,并安装。注意不要重复安装显卡驱动。</span></span><br><span class="line"><span class="meta"># cuda**run根据自己下载的版本更改名称。</span></span><br><span class="line"><span class="meta"># 选择安装Cuda Samples，后边还会编译它。</span></span><br><span class="line"><span class="meta"># 选择创建软连接。cuda -&gt; cuda7.0</span></span><br><span class="line">stop lightdm</span><br><span class="line">chmod a+x cuda_7<span class="number">.0</span><span class="number">.28</span>_linux.run</span><br><span class="line">sudo ./cuda_7<span class="number">.0</span><span class="number">.28</span>_linux.run</span><br></pre></td></tr></table></figure></li>
<li>修改/etc/profile文件，将cuda添加到环境变量中。【注：关于这一点，安装完cuda之后，命令行中有提示！！！细心看一下】</li>
<li>将/usr/local/cuda-7.0/bin添加到环境变量<strong>PATH</strong>路径中，这样一来，就可以在任何路径下调用cuda相关的可执行文件了。</li>
<li>将/usr/local/cuda7.0/lib64添加环境变量<strong>LD_LIBRARY_PATH </strong>中，作为共享库使用。这样一来，后面编译Cuda Samples 和OpenCV时，就不会提示找不到库的错误了。</li>
<li>操作1：将以下内容添加到文件<strong>/etc/profile</strong>的最后面，保存后，执行命令<code>source /etc/profile</code>，使配置生效。<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">PATH=<span class="regexp">/usr/local</span><span class="regexp">/cuda/bin</span><span class="symbol">:</span><span class="variable">$PATH</span> </span><br><span class="line">export PATH </span><br><span class="line">LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span><span class="symbol">:/usr/local/cuda/lib64</span></span><br><span class="line">export LD_ LIBRARY_PATH</span><br></pre></td></tr></table></figure></li>
<li>操作2：在目录<code>/etc/ld.so.conf.d/</code>下新建文件 <strong>cuda.conf</strong>，并添加如下内容。然后执行命令<code>sudo ldconfig</code>，使配置生效。</li>
<li><p>解释：下面第一行是上面提到的cuda库文件路径，后面3行是后来综合调试错误和其它博文总结得到的。所以，最好加上，省的出错哦。。。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/cuda/</span>lib64</span><br><span class="line">/lib</span><br><span class="line"><span class="meta-keyword">/usr/</span>lib</span><br><span class="line"><span class="meta-keyword">/usr/</span>lib32</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查cuda是否配置好,在命令行中执行以下命令。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#输入以下命令，检查是否配置好。如下图所示，说明安装好。</span></span><br><span class="line">nvcc <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<p><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150922143811428"></p>
</li>
</ul>
<h2 id="安装CUDA-SAMPLES"><a href="#安装CUDA-SAMPLES" class="headerlink" title="安装CUDA SAMPLES"></a>安装CUDA SAMPLES</h2><ul>
<li><strong><em>为什么安装cuda samples?</em></strong></li>
<li><p>一方面为了后面学习cuda使用，另一方面，可以检验cuda是否真的安装成功。如果cuda samples全部编译通过，没有一个Error（Warning忽略），那么就说明成功地安装了cuda。但如果没有通过编译，或者虽然最后一行显示<strong><em>PASS</em></strong>，但是编译过程中有ERROR，请自行GOOGLE解决之后，再向下安装，否则<strong>失之毫厘谬以千里</strong>！！！</p>
</li>
<li><p>make时，请使用<code>make -j</code>，可以最大限度的使用cpu编译，加快编译的速度。</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 切换到cuda-samples所在目录</span></span><br><span class="line"><span class="meta"># 注意，换成自己的路径</span></span><br><span class="line">cd /home/xuezhisd/NVIDIA_CUDA<span class="number">-7.0</span>_Samples</span><br><span class="line"><span class="meta"># 编译 make （安装命令 sudo apt-get install cmake)</span></span><br><span class="line">make –j </span><br><span class="line"><span class="meta"># 编译完毕，切换release目录</span></span><br><span class="line">cd ./bin/x86_64/linux/release</span><br><span class="line"><span class="meta"># 检验是否成功</span></span><br><span class="line"><span class="meta"># 运行实例 ./deviceQuery</span></span><br><span class="line">./deviceQuery </span><br><span class="line"><span class="meta"># 可以认真看看自行结果，它显示了你的NVIDIA显卡的相关信息。</span></span><br></pre></td></tr></table></figure></li>
<li>./deviceQuery执行结果如下图所示：<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20160829100835693"></li>
<li><strong><em>一个Error例子</em></strong></li>
<li>安装CUDA SAMPLES的过程中，可能会出现错误“/usr/bin/ld: cannot find –lGL”</li>
<li>通过Google搜索，找到以下解决方法：<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">locate libGL.so</span><br><span class="line"><span class="comment"># 返回结果</span></span><br><span class="line"><span class="comment">#/usr/lib/i386-linux-gnu/mesa/libGL.so.1</span></span><br><span class="line"><span class="comment">#/usr/lib/i386-linux-gnu/mesa/libGL.so.1.2.0</span></span><br><span class="line">sudo ln -s /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">i386</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">mesa</span>/<span class="title">libGL</span>.<span class="title">so</span>.1.2.0 /<span class="title">usr</span>/<span class="title">lib</span>/<span class="title">libGL</span>.<span class="title">so</span></span></span><br></pre></td></tr></table></figure></li>
<li>但是，依然不能编译通过。忽略进行后面的步骤，依然会提示一些<em>.so文件找不到。最终在OpenCV那里完全无法再安装了，返回卸掉**</em>卸载NVIDIA DRIVER 和cuda，重新安装驱动和cuda<em>*</em>，成功地编译cuda samples。</li>
<li>安装的驱动的方法是在命令行中执行：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">stop</span> lightdm </span><br><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> nvidia<span class="number">-346</span></span><br></pre></td></tr></table></figure></li>
<li>然后将libGLobal.so链接到nvidia提供的libGLobal.so.346.82。后面编译cuda samples和opencv过程中顺利通过。<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">sudo ln –s /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">nvidia</span>-346-<span class="title">updates</span>/<span class="title">libGL</span>.<span class="title">so</span>.346.82 /<span class="title">usr</span>/<span class="title">lib</span>/<span class="title">libGL</span>.<span class="title">so</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>即使用NVIDIA提供的libGL.so可以完成编译，不再报错。</p>
</li>
<li><p>注意：上面这个错误，就是在先装显卡驱动，后装gcc4.7过程遇到的。所以，请先安装gcc4.7和g++4.7，然后再安装NVDIA显卡驱动，再安装cuda。</p>
</li>
</ul>
<h2 id="安装cudnn"><a href="#安装cudnn" class="headerlink" title="安装cudnn"></a>安装cudnn</h2><ul>
<li>安装cudnn比较简单，简单地说，就是复制几个文件：库文件和头文件。将cudnn的头文件复制到cuda安装路径的include路径下，将cudnn的库文件复制到cuda安装路径的lib64路径下。<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解压文件</span></span><br><span class="line">tar -zxvf cudnn-<span class="number">6.5</span>-linux-x64-v2.tgz</span><br><span class="line"><span class="comment">#切换路径</span></span><br><span class="line">cd cudnn-<span class="number">6.5</span>-linux-x64-v2</span><br><span class="line"><span class="comment">#复制lib文件到cuda安装路径下的lib64/</span></span><br><span class="line">sudo cp <span class="class"><span class="keyword">lib</span>* /<span class="title">usr</span>/<span class="title">local</span>/<span class="title">cuda</span>/<span class="title">lib64</span>/</span></span><br><span class="line"><span class="comment">#复制头文件</span></span><br><span class="line">sudo cp cudnn.h /usr/local/cuda/<span class="keyword">include</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新软连接</span></span><br><span class="line">cd /usr/local/cuda/lib64/ </span><br><span class="line">sudo rm -rf libcudnn.so libcudnn.so.<span class="number">6.5</span> </span><br><span class="line">sudo ln -s libcudnn.so.<span class="number">6.5</span>.<span class="number">48</span> libcudnn.so.<span class="number">6.5</span> </span><br><span class="line">sudo ln -s libcudnn.so.<span class="number">6.5</span> libcudnn.so</span><br></pre></td></tr></table></figure></li>
<li>到目前为止，cudnn已经安装完了。但是，是否安装成功了呢，还得通过下面的cudnn sample测试。<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="meta">#运行cudnn-sample-v2</span></span><br><span class="line">tar –zxvf cudnn-<span class="keyword">sample</span>-v2.tgz</span><br><span class="line">cd cudnn-<span class="keyword">sample</span>-v2</span><br><span class="line">make</span><br><span class="line">./mnistCUDNN</span><br><span class="line"><span class="meta">#改程序运行成功，说明cudnn安装成功。</span></span><br></pre></td></tr></table></figure></li>
<li>此时可能出现错误：<strong><em>./mnist CUDNN: error while loading shared libraries: libcudart.so.6.5: cannot ope</em></strong></li>
<li><p>解决方法参考 <a href="https://groups.google.com/forum/#!topic/caffe-users/dcZrE3-60mc" target="_blank" rel="noopener">https://groups.google.com/forum/#!topic/caffe-users/dcZrE3-60mc</a></p>
</li>
<li><p>方法1：在命令行中执行<br><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64</code></p>
</li>
<li>方法2：在/etc/profile文件最后添加<code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64</code>, 并在命令行中执行<code>source /etc/profile</code>。</li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Caffe</tag>
      </tags>
  </entry>
  <entry>
    <title>caffe安装系列——安装GCC4.7和G++4.7并降级</title>
    <url>/5dcf.html</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>网上关于caffe的安装教程非常多，但是关于每一步是否操作成功，出现了什么样的错误又该如何处理没有给出说明。因为大家的操作系统的环境千差万别，按照博客中的教程一步步的安装，最后可能失败——这是很常见的哦。有的教程甚至省略了一些细节部分，让小白更不知道如何判断每一步是否操作成功，如何处理出现的错误。</li>
<li>作者花费了很长时间才成功地将caffe装完，期间遇到好多错误，多次重装操作系统。现在将经验写下来，一方面为了和大家分享，讨论；另一方面是为了记录一下下~~~</li>
</ul>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统： <strong><em>Ubuntu 14.04</em></strong><br>GCC/G++:<strong><em>4.7.x</em></strong><br>OpenCV: <strong><em>2.4.11和3.0.0</em></strong><br>Matlab :<strong><em>R2014b(a)</em></strong><br>Python:   <strong><em>2.7</em></strong></p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BB%BC%E8%BF%B0/" target="_blank" rel="noopener">综述</a></li>
<li><a href>准备工作</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85GCC4.7%E5%92%8CG++4.7%E5%B9%B6%E9%99%8D%E7%BA%A7/" target="_blank" rel="noopener">安装GCC4.7和G++4.7并降级</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85NVIDIA%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/" target="_blank" rel="noopener">安装显卡驱动</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/22/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85cuda%E5%92%8Ccudnn/" target="_blank" rel="noopener">安装cuda和cudnn</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/23/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85Matlab/" target="_blank" rel="noopener">安装Matlab</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85OpenCV/" target="_blank" rel="noopener">安装OpenCV</a></li>
<li><a href="http://zhangxuezhi.com/2015/09/24/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85python%E4%BE%9D%E8%B5%96%E5%8C%85/" target="_blank" rel="noopener">安装Python依赖包</a></li>
<li><a href="http://zhangxuezhi.com/2015/10/13/caffe%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85caffe/" target="_blank" rel="noopener">安装caffe</a></li>
</ol>
<h2 id="安装GCC4-7和G-4-7并降级"><a href="#安装GCC4-7和G-4-7并降级" class="headerlink" title="安装GCC4.7和G++4.7并降级"></a>安装GCC4.7和G++4.7并降级</h2><ul>
<li>注意：需要联网。</li>
</ul>
<h3 id="1-下载并安装gcc-g-4-7-x"><a href="#1-下载并安装gcc-g-4-7-x" class="headerlink" title="1.下载并安装gcc/g++ 4.7.x"></a>1.下载并安装gcc/g++ 4.7.x</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install -y gcc-4.7</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install -y g++-4.7</span><br></pre></td></tr></table></figure>
<h3 id="2-链接gcc-g-实现降级"><a href="#2-链接gcc-g-实现降级" class="headerlink" title="2.链接gcc/g++实现降级"></a>2.链接gcc/g++实现降级</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/usr/bin</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">rm gcc</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">ln -s gcc-4.7 gcc</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">rm g++</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">ln -s g++-4.7 g++</span></span><br><span class="line"><span class="comment"># 查看是否连接到4.7.x</span></span><br><span class="line"><span class="attr">ls</span> <span class="string">–al gcc g++</span></span><br><span class="line"><span class="attr">gcc</span> <span class="string">--version</span></span><br><span class="line"><span class="meta">g++</span> <span class="string">--version</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Caffe</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Server 添加、删除和修改用户</title>
    <url>/6b94.html</url>
    <content><![CDATA[<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><ul>
<li>添加用户的命令如下所示。添加一个用户名为sam的用户，主目录是/home/sam。<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># -d 指定用户目录</span></span><br><span class="line"><span class="meta"># -m 创建用户目录（如果该目录不存在）</span></span><br><span class="line"><span class="meta"># useradd –d /home/sam -m sam</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><ul>
<li>root用在终端中运行以下命令，为sam用户重新设置密码。<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo passwd sam</span></span><br></pre></td></tr></table></figure></li>
<li>设置root密码。root用户初始密码是随机的。按照下面的命令可以重新设置固定的root密码。<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo passwd root</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><ul>
<li>root用在终端中运行以下命令，将删除sam，但不删除其主目录。<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo userdel sam</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="添加超级用户权限"><a href="#添加超级用户权限" class="headerlink" title="添加超级用户权限"></a>添加超级用户权限</h2><ul>
<li><p>修改<code>/etc/sudoers</code>文件，将sam添加到超级用户列表中，可以将sam设置成超级用户。</p>
<ul>
<li><p>执行下面的命令，使用vi打开sudoers文件；</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>sudoers</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>root ALL=(ALL) ALL</code>后面添加新的一行<code>sam ALL=(ALL) ALL</code> ，保存并退出，添加超级用户权限完成。</p>
</li>
<li>sam具有了超级用户权限，就可以具有root所有权限。执行命令式，使用sudo开头，并输入sam的密码，即能使用root权限执行命令。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux shell判断文件和文件夹是否存在</title>
    <url>/9582.html</url>
    <content><![CDATA[<ul>
<li><p>shell判断文件,目录是否存在或者具有权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh  </span></span><br><span class="line">  </span><br><span class="line">myPath=<span class="string">"/var/log/httpd/"</span>  </span><br><span class="line">myFile=<span class="string">"/var /log/httpd/access.log"</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#这里的-x 参数判断$myPath是否存在并且是否具有可执行权限  </span></span><br><span class="line"><span class="keyword">if</span> [ ! -x <span class="string">"<span class="variable">$myPath</span>"</span>]; <span class="keyword">then</span>  </span><br><span class="line">　　mkdir <span class="string">"<span class="variable">$myPath</span>"</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#这里的-d 参数判断$myPath是否存在  </span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$myPath</span>"</span>]; <span class="keyword">then</span>  </span><br><span class="line">　　mkdir <span class="string">"<span class="variable">$myPath</span>"</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#这里的-f参数判断$myFile是否存在  </span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">"<span class="variable">$myFile</span>"</span> ]; <span class="keyword">then</span>  </span><br><span class="line">　　touch <span class="string">"<span class="variable">$myFile</span>"</span>  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#其他参数还有-n,-n是判断一个变量是否是否有值  </span></span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">"<span class="variable">$myVar</span>"</span> ]; <span class="keyword">then</span>  </span><br><span class="line">　　<span class="built_in">echo</span> <span class="string">"<span class="variable">$myVar</span> is empty"</span>  </span><br><span class="line">　　<span class="built_in">exit</span> 0  </span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#两个变量判断是否相等  </span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$var1</span>"</span> = <span class="string">"<span class="variable">$var2</span>"</span> ]; <span class="keyword">then</span>  </span><br><span class="line">　　<span class="built_in">echo</span> <span class="string">'$var1 eq $var2'</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">　　<span class="built_in">echo</span> <span class="string">'$var1 not eq $var2'</span>  </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>转载地址：<a href="http://www.cnblogs.com/platero/p/4021561.html" target="_blank" rel="noopener">http://www.cnblogs.com/platero/p/4021561.html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在VNC中Xfce4中Tab键失效的解决方法</title>
    <url>/f8c1.html</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>在Ubuntu Server 14.04上安装了xfce4桌面环境，但是却发现<strong><em>在终端中Tab键不能自动补齐</em></strong>(但是<strong><em>Ctrl + I 仍然可以用</em></strong>)。</li>
<li>出现这种情况的原因是，由于Tab键的功能被窗口快捷键占用，从而Tab键不起作用。即，快捷键冲突了。</li>
<li>解决方法有两种，其实本质相同。不过就是，一种方法是<strong>在图形界面中更改</strong>，另一种方法是<strong>直接修改配置文件</strong>。</li>
</ul>
<a id="more"></a>
<h2 id="1-在命令行中修改配置文件的方法"><a href="#1-在命令行中修改配置文件的方法" class="headerlink" title="1. 在命令行中修改配置文件的方法"></a>1. 在命令行中修改配置文件的方法</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#切换路径</span></span><br><span class="line">cd ~/.config<span class="meta-keyword">/xfce4/</span>xfconf<span class="meta-keyword">/xfce-perchannel-xml/</span></span><br><span class="line"><span class="meta">#修改文件（快捷键配置文件）</span></span><br><span class="line">vi xfce4-keyboard-shortcuts.xml</span><br></pre></td></tr></table></figure>
<ul>
<li>找到下面这一行</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;property <span class="attribute">name</span>=<span class="string">"&amp;lt;Super&amp;gt;Tab"</span> <span class="attribute">type</span>=<span class="string">"string"</span> <span class="attribute">value</span>=<span class="string">"switch_window_key"</span>/&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>改为</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;property <span class="attribute">name</span>=<span class="string">"&amp;lt;Super&amp;gt;Tab"</span> <span class="attribute">type</span>=<span class="string">"empty"</span>/&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>如下图所示<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150922213350275"></p>
</li>
<li><p>修改完配置文件，<strong><code>重启电脑</code></strong>，使配置文件生效。</p>
</li>
</ul>
<h2 id="2-在图形窗口中修改的方法"><a href="#2-在图形窗口中修改的方法" class="headerlink" title="2. 在图形窗口中修改的方法"></a>2. 在图形窗口中修改的方法</h2><ul>
<li>菜单栏 → 设置 → 窗口设置 。打开<strong>窗口设置</strong>对话框。</li>
</ul>
<p><img width="350" height="600" alt="图片名称" align="center" data-src="http://img.blog.csdn.net/20150922223218078"></p>
<ul>
<li>在窗口管理器中选择快捷键选项卡（Key） →  Switch window for same<br>application </li>
<li>将其快捷键清空，关闭窗口管理器。</li>
<li>这种方法的好处：不需要重启，即可以解决问题。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.163.com/thinki_cao/blog/static/83944875201303081111436/" target="_blank" rel="noopener">《在VNC远程桌面环境Xfce4中Tab键失效的解决方法 》</a></li>
<li><a href="http://ubuntuforums.org/archive/index.php/t-1771058.html" target="_blank" rel="noopener">http://ubuntuforums.org/archive/index.php/t-1771058.html</a></li>
<li><a href="https://answers.launchpad.net/ubuntu/+source/xfce4/+question/206191" target="_blank" rel="noopener">https://answers.launchpad.net/ubuntu/+source/xfce4/+question/206191</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Putty无法远程登录，显示服务器拒绝连接</title>
    <url>/d927.html</url>
    <content><![CDATA[<blockquote>
<p>putty连接不到linux的原因总结为以下几种情况。</p>
</blockquote>
<h2 id="局域网内的两台电脑IP冲突"><a href="#局域网内的两台电脑IP冲突" class="headerlink" title="局域网内的两台电脑IP冲突"></a><strong>局域网内的两台电脑IP冲突</strong></h2><ul>
<li>当使用DHCP自动分配IP时，两台电脑的IP可能会冲突。这时，使用Putty无法登连接Linux。</li>
<li>方法：可以设置/etc/network/interfaces文件，将网卡设置为静态IP，并设置IP，子网掩码等。</li>
</ul>
<h2 id="没有安装openssh-server"><a href="#没有安装openssh-server" class="headerlink" title="没有安装openssh-server"></a><strong>没有安装openssh-server</strong></h2><a id="more"></a>
<ul>
<li>这个问题一般出现在刚刚装完操作系统，此时还没有安装openssh-server。</li>
<li>Putty一般使用SSH连接方式，因为主机没有openssh-server，所以无法连接。</li>
<li>参考<a href="http://www.linuxidc.com/Linux/2015-01/112045.htm" target="_blank" rel="noopener">《Ubuntu 安装配置SSH》</a></li>
<li>使用下面命令安装openssh-server之后，问题解决了。</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install openssh-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Putty使用设置</title>
    <url>/d605.html</url>
    <content><![CDATA[<h2 id="Putty中文乱码问题"><a href="#Putty中文乱码问题" class="headerlink" title="Putty中文乱码问题"></a>Putty中文乱码问题</h2><ul>
<li>使用Putty的时候，中文字符显示为乱码，如何解决。方法就是使用UTF-8传输协议。</li>
<li>参考<a href="http://jingyan.baidu.com/article/3aed632e5f00ae701080913a.html" target="_blank" rel="noopener">《怎样解决putty终端乱码的方法》</a></li>
</ul>
<h2 id="Putty配色问题"><a href="#Putty配色问题" class="headerlink" title="Putty配色问题"></a>Putty配色问题</h2><ul>
<li>Putty的文件夹显示为深蓝色，颜色太暗，看不清楚。可以设置为ANSI Blue。</li>
<li>参考<a href="http://blog.sina.com.cn/s/blog_74a7e56e0101bzkk.html" target="_blank" rel="noopener">《Putty文件夹蓝色太暗问题》</a></li>
</ul>
<h2 id="Putty字体"><a href="#Putty字体" class="headerlink" title="Putty字体"></a>Putty字体</h2><ul>
<li>Putty的字体太小，看起来太费眼。可以将字体大小设置大一点。</li>
<li>参考文章<a href="http://blog.csdn.net/wengyupeng/article/details/43671351" target="_blank" rel="noopener">《设置Putty 字体 颜色 全屏》</a></li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-安装-theano+caffe-超详细教程</title>
    <url>/b846.html</url>
    <content><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><blockquote>
<p> 本文是继<a href="http://blog.csdn.net/xuezhisdc/article/details/47075401" target="_blank" rel="noopener">《Ubuntu-安装-cuda7.0-单显卡-超详细教程》 </a>之后的续篇。theano和caffe是深度学习库，对运算能力需求很大，最好使用cuda进行加速。所以，请先阅读《Ubuntu-安装-cuda7.0-单显卡-超详细教程》，成功安装cuda之后，再来安装theano和caffe。</p>
</blockquote>
<a id="more"></a>
<h2 id="二、安装Theano"><a href="#二、安装Theano" class="headerlink" title="二、安装Theano"></a>二、安装Theano</h2><h3 id="1-安装各种包"><a href="#1-安装各种包" class="headerlink" title="1. 安装各种包"></a>1. 安装各种包</h3><ul>
<li>安装gfortran, numpy, scipy, sklearn, blas, atlas等包  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装gfortran,后面编译过程中会用到</span></span><br><span class="line">sudo apt-get install gfortran</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装blas,Ubuntu下对应的是libopenblas，其它操作系统可能需要安装其它版本的blas——这是个OS相关的。</span></span><br><span class="line">sudo apt-get install libopenblas-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装lapack，Ubuntu下对应的是liblapack-dev，和OS相关。</span></span><br><span class="line">sudo apt-get install liblapack-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装atlas，Ubuntu下对应的是libatlas-base-dev，和OS相关。</span></span><br><span class="line">sudo apt-get install libatlas-base-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装pip</span></span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo apt-get install python-dev</span><br><span class="line">sudo apt-get install python-nose</span><br><span class="line">sudo apt-get install g++</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>
<h3 id="2-安装numpy和scipy"><a href="#2-安装numpy和scipy" class="headerlink" title="2. 安装numpy和scipy"></a>2. 安装numpy和scipy</h3></li>
<li><p>安装这两个python库有点问题，如果使用apt-get安装，后面的test不能通过。如果使用pip安装，有得考虑各种依赖关系。</p>
</li>
<li><p>所以，先使用apt-get安装，然后再卸载，最后再使用pip安装。这样，既能不考虑依赖关系，又能通过后面的test()测试。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装numpy和scipy</span></span><br><span class="line">sudo apt-get install python-numpy</span><br><span class="line">sudo apt-get install python-scipy</span><br><span class="line">sudo apt-get install python-sklearn</span><br><span class="line"><span class="comment">#卸载numpy和scipy</span></span><br><span class="line">sudo apt-get remove python-numpy</span><br><span class="line">sudo apt-get remove python-scipy</span><br><span class="line"><span class="comment"># 安装numpy</span></span><br><span class="line">sudo pip install numpy</span><br><span class="line"><span class="comment"># 测试numpy</span></span><br><span class="line"><span class="comment"># 如果没有安装python-nose，测试会出错！</span></span><br><span class="line">python -c <span class="string">"import numpy;numpy.test()"</span></span><br><span class="line"><span class="comment"># 安装scipy</span></span><br><span class="line">sudo pip install scipy</span><br><span class="line"><span class="comment"># 测试scipy</span></span><br><span class="line">python -c <span class="string">"import scipy;scipy.test()"</span></span><br></pre></td></tr></table></figure>
<h3 id="3-安装Theano"><a href="#3-安装Theano" class="headerlink" title="3. 安装Theano"></a>3. 安装Theano</h3></li>
<li><p>前面的操作如果没有出现错误，就可以开始安装Theano了。命令如下所示。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装Theano</span></span><br><span class="line">sudo pip install Theano</span><br><span class="line"><span class="comment"># 测试Theano</span></span><br><span class="line">python -c <span class="string">"import theano;theano.test()"</span></span><br></pre></td></tr></table></figure>
<h3 id="4-安装pyCUDA"><a href="#4-安装pyCUDA" class="headerlink" title="4. 安装pyCUDA"></a>4. 安装pyCUDA</h3></li>
<li>测试Theano时，提示PyCUDA import错误，因此需要安装pyCUDA。而PyCUDA需要以Boost为基础，所以应该先安装Boost。</li>
<li><p>使用pip安装pyCUDA。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装boost</span></span><br><span class="line">sudo apt-get install libboost-all-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果使用pip安装pyCUDA出错，使用下面安装方式。<a href="http://seraphli.insecterswar.com/archives/771" target="_blank" rel="noopener">参考文章：《Ubuntu Theano CUDA》</a></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive http://git.tiker.net/trees/pycuda.git</span><br><span class="line"><span class="built_in">cd</span> pycuda</span><br><span class="line">sudo ./configure.py --cuda-root=/usr/<span class="built_in">local</span>/cuda --cudadrv-lib-dir=/usr/lib/x86_64-linux-gnu --boost-inc-dir=/usr/include --boost-lib-dir=/usr/lib --boost-python-libname=boost_python --boost-thread-libname=boost_thread --no-use-shipped-boost</span><br><span class="line">make -j 4 <span class="comment">#电脑核数</span></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
<h3 id="5-解决cuda-ndarray-cu错误"><a href="#5-解决cuda-ndarray-cu错误" class="headerlink" title="5. 解决cuda_ndarray.cu错误"></a>5. 解决cuda_ndarray.cu错误</h3></li>
<li><p>如果出现错误：<strong><em>ERROR (theano.sandbox.cuda): Failed to compile cuda_ndarray.cu: libcublas.so.6.5 cannot open shared object file: No such file or directory</em></strong>，需要运行以下命令：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ldconfig /usr/<span class="built_in">local</span>/cuda-7.0/lib64</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="6-配置Theano"><a href="#6-配置Theano" class="headerlink" title="6. 配置Theano"></a>6. 配置Theano</h3><ul>
<li><p>在主目录下新建.theanorc文件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">vi .theanorc</span><br></pre></td></tr></table></figure></li>
<li><p>在.theanorc中输入下面的内容</p>
  <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[cuda]</span></span><br><span class="line"><span class="attr">root</span>=/usr/local/cuda/bin/</span><br><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">floatX</span> = float32</span><br><span class="line"><span class="attr">device</span> = gpu0</span><br><span class="line"><span class="section">[nvcc]</span></span><br><span class="line"><span class="attr">fastmath</span> = <span class="literal">True</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="7-测试Theano是否在使用GPU"><a href="#7-测试Theano是否在使用GPU" class="headerlink" title="7. 测试Theano是否在使用GPU"></a>7. 测试Theano是否在使用GPU</h3><ul>
<li><p>将下列python代码复制到useGPU.py，并运行。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> theano <span class="keyword">import</span> function, config, shared, sandbox</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">vlen = <span class="number">10</span> * <span class="number">30</span> * <span class="number">768</span>  <span class="comment"># 10 x #cores x # threads per core</span></span><br><span class="line">iters = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">rng = numpy.random.RandomState(<span class="number">22</span>)</span><br><span class="line">x = shared(numpy.asarray(rng.rand(vlen), config.floatX))</span><br><span class="line">f = function([], T.exp(x))</span><br><span class="line"><span class="keyword">print</span> f.maker.fgraph.toposort()</span><br><span class="line">t0 = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(iters):</span><br><span class="line">    r = f()</span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Looping %d times took'</span> % iters, t1 - t0, <span class="string">'seconds'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Result is'</span>, r</span><br><span class="line"><span class="keyword">if</span> numpy.any([isinstance(x.op, T.Elemwise) <span class="keyword">for</span> x <span class="keyword">in</span> f.maker.fgraph.toposort()]):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Used the cpu'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Used the gpu'</span></span><br></pre></td></tr></table></figure></li>
<li><p>假定上面已经设置文件<code>.theanorc</code>，运行命令如下所示：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python useGPU.py</span><br></pre></td></tr></table></figure></li>
<li><p>如果出现下面的错误信息，请运行命令<code>sudo ldconfig /usr/local/cuda-7.0/lib64</code><a href="http://seraphli.insecterswar.com/archives/category/dev/code" target="_blank" rel="noopener">参考</a> </p>
  <figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">#错误信息</span><br><span class="line"><span class="keyword">ERROR </span>(theano.sandbox.cuda): Failed to compile cuda_ndarray.cu: libcublas.so.7.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>
<h3 id="Theano相关资料"><a href="#Theano相关资料" class="headerlink" title="Theano相关资料"></a>Theano相关资料</h3></li>
<li>参考：<a href="http://deeplearning.net/software/theano/tutorial/using_gpu.html" target="_blank" rel="noopener">Using the GPU</a> &amp; <a href="http://deeplearning.net/software/theano/library/config.html#envvar-THEANO_FLAGS" target="_blank" rel="noopener">THEANO_FLAGS</a> &amp; <a href="http://deeplearning.net/software/theano/library/config.html#envvar-THEANORC" target="_blank" rel="noopener">THEANORC</a></li>
<li>CUDA Toolkit默认安装在<code>/usr/local/cuda/</code>，含有bin, lib, include等子文件夹。<code>/usr/local/cuda/bin/</code>文件夹称为cuda root文件夹。 </li>
<li><p>使用Theano时，必须告诉它CUDA root文件夹，有3种方法：</p>
<ul>
<li>定义$CUDA_ROOT环境变量。例如， <code>CUDA_ROOT=/usr/local/cuda/bin/</code></li>
<li>在THEANO_FLAGS中添加cuda.root标识。例如，<code>THEANO_FLAGS=&#39;cuda.root=/usr/local/cuda/bin/&#39;</code></li>
<li><p>在.theanorc文件夹中添加[cuda]</p>
<pre><code>  [cuda]
  root=/usr/local/cuda/bin/
</code></pre></li>
</ul>
</li>
<li><p>还需要更改设备选项(<em>gpu</em> or <em>gpu0</em> or <em>gpu1</em>)，设置默认的浮点计算类型(float32)</p>
<ul>
<li>方法一：<br>THEANO_FLAGS=’cuda.root=/usr/local/cuda/bin/,device=gpu,floatX=float32’</li>
<li><p>方法二：<br>设置<code>.theanorc</code>文件的[global]选项:</p>
<pre><code>  [cuda]
  root=/usr/local/cuda/bin/
  [global]
  device = gpu
  floatX = float32
</code></pre></li>
</ul>
</li>
<li>注意：<ul>
<li>如果电脑有多个GPU，而配置是‘device=gpu’，驱动会选择其中一个使用（一般是 <code>gpu0</code>）。可以使用 nvida-smi 改变这一规则。</li>
<li>可以通过指定 ‘device=gpuX’来选择一个特定的GPU。</li>
<li>默认使用GPU计算。如果GPU有问题，Theano会退回使用CPU。可以通过设置标识‘force_device=True’，当GPU不能使用时，弹出错误信息。</li>
</ul>
</li>
</ul>
<h2 id="安装OpenCV"><a href="#安装OpenCV" class="headerlink" title="安装OpenCV"></a>安装OpenCV</h2><h3 id="下载OpenCV"><a href="#下载OpenCV" class="headerlink" title="下载OpenCV"></a>下载OpenCV</h3><ul>
<li>下载地址：<a href="https://github.com/jayrambhia/Install-OpenCV，这是根据大神编译过的版本进行安装的。" target="_blank" rel="noopener">https://github.com/jayrambhia/Install-OpenCV，这是根据大神编译过的版本进行安装的。</a></li>
<li>切换到文件保存的文件夹，然后安装依赖项：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换路径</span></span><br><span class="line"><span class="built_in">cd</span> ~/Downloads/Install-OpenCV-master/Ubuntu</span><br><span class="line"><span class="comment">#安装OpenCV的依赖项</span></span><br><span class="line">sudo ./dependencies.sh</span><br></pre></td></tr></table></figure></li>
<li>修改opencv2_4_9.sh</li>
<li><a href="http://redstarofsleep.iteye.com/blog/2122612" target="_blank" rel="noopener">参考 Ubuntu14.04安装ffmpeg</a>         <a href="https://www.ffmpeg.org/download.html" target="_blank" rel="noopener">ffmpeg下载地址</a></li>
<li>如果不添加CUDA_GENERATION，编译过程会失败 <a href="http://blog.csdn.net/sysuwuhongpeng/article/details/45485719" target="_blank" rel="noopener">参考文章</a><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#切换路径</span></span><br><span class="line">cd <span class="number">2.4</span></span><br><span class="line"><span class="meta">#修改opencv2_4_9.sh, 添加CUDA_GENERATION</span></span><br><span class="line"><span class="meta">#根据显卡支持Fermi或Kepler做相应的修改。此处以Fermi为例。</span></span><br><span class="line">sudo gedit opencv2_4_9.sh</span><br></pre></td></tr></table></figure></li>
<li>将以下内容<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cmake -D <span class="attribute">CMAKE_BUILD_TYPE</span>=RELEASE -D <span class="attribute">CMAKE_INSTALL_PREFIX</span>=/usr/local -D <span class="attribute">WITH_TBB</span>=ON -D <span class="attribute">BUILD_NEW_PYTHON_SUPPORT</span>=ON -D <span class="attribute">WITH_V4L</span>=ON -D <span class="attribute">INSTALL_C_EXAMPLES</span>=ON -D <span class="attribute">INSTALL_PYTHON_EXAMPLES</span>=ON -D <span class="attribute">BUILD_EXAMPLES</span>=ON -D <span class="attribute">WITH_QT</span>=ON -D <span class="attribute">WITH_OPENGL</span>=ON -D <span class="built_in">..</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改为:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cmake -D <span class="attribute">CMAKE_BUILD_TYPE</span>=RELEASE -D <span class="attribute">CMAKE_INSTALL_PREFIX</span>=/usr/local -D <span class="attribute">WITH_TBB</span>=ON -D <span class="attribute">BUILD_NEW_PYTHON_SUPPORT</span>=ON -D <span class="attribute">WITH_V4L</span>=ON -D <span class="attribute">INSTALL_C_EXAMPLES</span>=ON -D <span class="attribute">INSTALL_PYTHON_EXAMPLES</span>=ON -D <span class="attribute">BUILD_EXAMPLES</span>=ON -D <span class="attribute">WITH_QT</span>=ON -D <span class="attribute">WITH_OPENGL</span>=ON -D <span class="attribute">CUDA_GENERATION</span>=Fermi <span class="built_in">..</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>即在最后的<code>..</code>前面添加<strong><em><code>CUDA_GENERATION=Fermi</code></em></strong></p>
</li>
<li><p>安装最新版opencv2_4_9</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加执行权限</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">chmod +x opencv2_4_9.sh</span></span><br><span class="line"><span class="comment">#安装OpenCV</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">./opencv2_4_9.sh</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>等待…..，直到安装完成。如下图所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731210950383"></p>
</li>
</ul>
<h2 id="安装其它依赖项"><a href="#安装其它依赖项" class="headerlink" title="安装其它依赖项"></a>安装其它依赖项</h2><ul>
<li>执行以下命令，安装其它依赖项<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libprotobuf-<span class="built_in">dev</span> libleveldb-<span class="built_in">dev</span> libsnappy-<span class="built_in">dev</span> libopencv-<span class="built_in">dev</span> libboost-<span class="built_in">all</span>-<span class="built_in">dev</span> libhdf5-serial-<span class="built_in">dev</span> libgflags-<span class="built_in">dev</span> libgoogle-glog-<span class="built_in">dev</span> liblmdb-<span class="built_in">dev</span> protobuf-compiler protobuf-c-compiler  python-pandas</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装glog"><a href="#安装glog" class="headerlink" title="安装glog"></a>安装glog</h2><ol>
<li>Google Logging Library（glog），下载地址：<a href="https://code.google.com/p/google-glog/，然后解压安装：" target="_blank" rel="noopener">https://code.google.com/p/google-glog/，然后解压安装：</a><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>tar zxvf glog-0.<span class="number">3.3</span>.tar.gz</span><br><span class="line"><span class="variable">$ </span>./ configure</span><br><span class="line"><span class="variable">$ </span>make</span><br><span class="line"><span class="variable">$ </span>sudo make install</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="安装caffe"><a href="#安装caffe" class="headerlink" title="安装caffe"></a>安装caffe</h2><h3 id="下载caffe"><a href="#下载caffe" class="headerlink" title="下载caffe"></a>下载caffe</h3><ul>
<li>下载地址：<a href="https://github.com/BVLC/caffe" target="_blank" rel="noopener">https://github.com/BVLC/caffe</a></li>
</ul>
<h3 id="编辑Makefile-config"><a href="#编辑Makefile-config" class="headerlink" title="编辑Makefile.config"></a>编辑Makefile.config</h3><ul>
<li>参考：<br><a href="http://caffe.berkeleyvision.org/installation.html" target="_blank" rel="noopener">http://caffe.berkeleyvision.org/installation.html</a>  <a href="http://ouxinyu.github.io/Blogs/20140723001.html" target="_blank" rel="noopener">http://ouxinyu.github.io/Blogs/20140723001.html</a></li>
<li>执行以下命令，通过设置Makefile.config文件，来使用CuDNN来加速。<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">unzip caffe-<span class="literal">master</span>.zip <span class="comment">#本地解压caffe-master</span></span><br><span class="line">cd /caffe-<span class="keyword">master</span> <span class="title">#切换路径</span></span><br><span class="line"><span class="title">vi</span> Makefile.config <span class="comment">#编辑Makefile.config</span></span><br></pre></td></tr></table></figure></li>
<li>开始编辑Makefile.config<ul>
<li>取消第5行的注释，即将 <strong><em>#USE_CUDNN=1</em></strong> 改为 <strong><em>USE_CUDNN=1</em></strong></li>
<li>将 <strong><em>BLAS=atlas</em></strong> 改为 <strong><em>BLAS=open</em></strong></li>
</ul>
</li>
</ul>
<p>执行以下命令，</p>
<h3 id="配置Python相关选项"><a href="#配置Python相关选项" class="headerlink" title="配置Python相关选项"></a>配置Python相关选项</h3><ul>
<li>安装python依赖库<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">cd python #切换到./caffe-master/python/路径下</span><br><span class="line">for req <span class="keyword">in</span> <span class="constructor">$(<span class="params">cat</span> <span class="params">requirements</span>.<span class="params">txt</span>)</span>; <span class="keyword">do</span> sudo pip install $req; <span class="keyword">done</span></span><br></pre></td></tr></table></figure></li>
<li>设置Python环境变量<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo vi /etc<span class="built_in">/profile </span># 编辑profile文件</span><br><span class="line"><span class="comment">#在最后面添加以下语句，注意将path换成你的系统下的路径</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PYTHONPATH</span>=/path/to/caffe/python:$PYTHONPATH</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装Matlab"><a href="#安装Matlab" class="headerlink" title="安装Matlab"></a>安装Matlab</h3><ul>
<li>选择Mathworks.Matlab.R2014a.Unix.iso - 右键 - 使用磁盘映像挂载器打开”</li>
<li>进入装载的虚拟光盘，拷贝全部文件至home/Matlab 文件夹</li>
</ul>
<ol>
<li>授权安装文件夹<br><code>$ chmod a+x Matlab -R</code></li>
<li>安装<br><code>$ sudo ./install</code><br>拷贝 libmwservices.so 至 /usr/local/MATLAB/R2014a/bin/glnxa64<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ sudo cp libmwservices.so <span class="regexp">/usr/</span>local<span class="regexp">/MATLAB/</span>R2014a<span class="regexp">/bin/</span>glnxa64/</span><br><span class="line">安装完毕，程序默认启动路径：</span><br><span class="line">$ sh <span class="regexp">/usr/</span>local<span class="regexp">/MATLAB/</span>R2014a<span class="regexp">/bin/</span>matlab</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://blog.csdn.net/xuezhisdc/article/details/47065475" target="_blank" rel="noopener">Ubuntu14.04安装Theano详细教程 </a></li>
<li><a href="http://caffe.berkeleyvision.org/installation.html" target="_blank" rel="noopener">caffe官方安装教程</a></li>
<li><a href="http://www.cnblogs.com/platero/p/3993877.html" target="_blank" rel="noopener">Caffe + Ubuntu 14.04 64bit + CUDA 6.5 配置说明</a></li>
<li><a href="http://www.linuxidc.com/Linux/2015-07/120449.htm" target="_blank" rel="noopener">Caffe在Ubuntu 14.04 64bit 下的安装</a></li>
<li><a href="http://seraphli.insecterswar.com/archives/category/dev/code" target="_blank" rel="noopener">Ubuntu Theano CUDA</a> </li>
<li><a href="http://blog.csdn.net/sysuwuhongpeng/article/details/45485719" target="_blank" rel="noopener">Unsupported gpu architecture ‘compute_11’解决方法</a></li>
<li><a href="https://ouxinyu.github.io/Blogs/20140723001.html" target="_blank" rel="noopener">Caffe + Ubuntu 15.04 + CUDA 7.0 新手安装配置指南(推荐)</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 14.04 64bit 安装32位兼容包</title>
    <url>/9ef4.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul>
<li>我的操作系统是64bit版的Ubuntu 14.04，很多32bit的软件无法安装使用，因此希望通过安装32位兼容包解决。</li>
</ul>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ul>
<li>在Ubuntu 13.10之前，可以通过安装 <strong>ia32-libs</strong> 来支持32位软件。但是，该版本之后，Ubuntu就去掉了。</li>
<li>不过可以通过安装替的32位兼容包来实现该功能。<a id="more"></a></li>
<li>命令行中输入以下命令</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install ia32-libs</span><br></pre></td></tr></table></figure>
<p>返回的信息如下所示，</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Package ia32-libs <span class="keyword">is</span> <span class="keyword">not</span> available, <span class="keyword">but</span> <span class="keyword">is</span> referred <span class="keyword">to</span> <span class="keyword">by</span> another package.</span><br><span class="line">This may mean <span class="keyword">that</span> <span class="keyword">the</span> package <span class="keyword">is</span> missing, has been obsoleted, <span class="keyword">or</span></span><br><span class="line"><span class="keyword">is</span> only available <span class="keyword">from</span> another source</span><br><span class="line">However <span class="keyword">the</span> following packages replace <span class="keyword">it</span>:</span><br><span class="line">  lib32z1 lib32ncurses5 lib32bz2<span class="number">-1.0</span></span><br></pre></td></tr></table></figure>
<ul>
<li>也就是说可以通过lib32z1 lib32ncurses5 lib32bz2-1.0是ia32-libs的替代安装包。可以安装任何一个来支持32位软件。</li>
<li>安装命令如下所示。</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install lib32z1</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.oschina.net/question/237198_146122" target="_blank" rel="noopener">ubuntu 14.04 64位 怎么安装 32位 支持库啊？</a></li>
<li><a href="http://www.oschina.net/question/1470892_151825" target="_blank" rel="noopener">Ubuntu14.04如何安装32位兼容库,即ia32-libs</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>windows使用VNC远程访问Ubuntu Server 14.04图形界面</title>
    <url>/47a9.html</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<p>昨天刚刚在服务器上面安装完Ubuntu Server 14.04，并且装上了桌面环境Gnome。今天希望通过VNC可以远程访问Ubuntu图形界面，这样使用时就方便多了，既不用跑机房，也不必非得使用终端（Terminal）。</p>
</blockquote>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>按照网上的教程安装vnc4server之后，并设置xstartup文件。在windows端通过VNCViewer登录，只能看到命令行，其他的看不到。</p>
<h2 id="安装以下软件"><a href="#安装以下软件" class="headerlink" title="安装以下软件"></a>安装以下软件</h2><ul>
<li>在终端中运行以下命令，安装相应软件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xrdp vnc4server xbase-clients dconf-editor #安装xrdp，vnc4server</span><br><span class="line"></span><br><span class="line">sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal</span><br></pre></td></tr></table></figure>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ul>
<li>设置ubuntu系统允许远程控制</li>
<li>取消加密<br>参考文章《<a href="http://blog.sina.com.cn/s/blog_677265f601012mqg.html" target="_blank" rel="noopener">window下使用vnc远程登录ubuntu/linux图形界面</a>》</li>
</ul>
<h2 id="修改xstartup"><a href="#修改xstartup" class="headerlink" title="修改xstartup"></a>修改xstartup</h2><p>将~/.vnc/xstartup的内容修改成如下（复制，粘贴）<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following two lines for normal desktop:</span></span><br><span class="line"><span class="built_in">export</span> XKL_XMODMAP_DISABLE=1</span><br><span class="line"> <span class="built_in">unset</span> SESSION_MANAGER</span><br><span class="line"><span class="comment"># exec /etc/X11/xinit/xinitrc</span></span><br><span class="line"><span class="built_in">unset</span> DBUS_SESSION_BUS_ADDRESS</span><br><span class="line"></span><br><span class="line">gnome-panel &amp;</span><br><span class="line">gnome-settings-daemon &amp;</span><br><span class="line">metacity &amp;</span><br><span class="line">nautilus &amp;</span><br><span class="line">gnome-terminal &amp;</span><br></pre></td></tr></table></figure></p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>运行vncserver，在Windows中访问该主机，即可以看到图形窗口。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.sina.com.cn/s/blog_677265f601012mqg.html" target="_blank" rel="noopener">window下使用vnc远程登录ubuntu/linux图形界面</a> —— 最初参阅文章</li>
<li><a href="http://blog.csdn.net/sunnylgz/article/details/40779973" target="_blank" rel="noopener">Windows使用VNC viewer访问Ubuntu 14.04远程桌面的简单方法</a> —— 远程共享设置主要参考了该文章</li>
<li><a href="http://www.zhixing123.cn/ubuntu/41953.html" target="_blank" rel="noopener">Windows远程桌面连接ubuntu 14.04图解设置教程</a></li>
<li><a href="http://wangkerui.com/archives/391" target="_blank" rel="noopener">windows远程（xrdp+vnc）连接ubuntu linux</a></li>
<li><a href="http://blog.csdn.net/wwq_1111/article/details/46502873" target="_blank" rel="noopener">Ubuntu14.04使用VNC无法显示图形界面问题的解决</a> —— xstartup文件配置参考该文章</li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器如何进入Bios</title>
    <url>/9119.html</url>
    <content><![CDATA[<blockquote>
<p>我们的服务器的是ASUS（华硕）ESC 4000 G3。由于以前没有碰过服务器，以为刚开始的初始化就像PC一样，马上需要按键进入Bois设置；但是，服务器的自启动非常的麻烦，刚开始的初始化不是我以为的那样，要等很久（自检时）才能按键进入Bois。</p>
<p>按键的问题。一开始不知道按什么键进入Bois，F2，F12和Del都试过。最后通过查看官方说明书，知道使用Del键。</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>U盘安装Ubuntu Server ，CD-ROM自检，安装失败</title>
    <url>/6dd.html</url>
    <content><![CDATA[<blockquote>
<p>这个过程和袁勇尝试了很久，试过了各种方法，但是最也没能使用U盘成功安装系统。最后，借了个空白光盘，将Ubuntu Server 14.04刻录到CD中，然后在服务器Bois里面设置光盘启动。最终使用光盘成功地在服务器上安装了Ubuntu Server。</p>
</blockquote>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li>刻录光盘：<a href="http://www.coofish.org/post/UltraISO.html" target="_blank" rel="noopener">http://www.coofish.org/post/UltraISO.html</a></li>
<li>安装操作系统过程：<a href="http://www.jointd.com/?p=457" target="_blank" rel="noopener">http://www.jointd.com/?p=457</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Server 14.04安装Gnome桌面环境</title>
    <url>/96b3.html</url>
    <content><![CDATA[<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>执行以下命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install xinit</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install gdm</span><br><span class="line">sudo apt-<span class="builtin-name">get</span>  update #为下一条命令准备，否则下一条命令执行错误。</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install ubuntu-desktop</span><br></pre></td></tr></table></figure>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="http://mikewolfli.blog.163.com/blog/static/860452882014118103755772/" target="_blank" rel="noopener">http://mikewolfli.blog.163.com/blog/static/860452882014118103755772/</a></li>
<li><a href="http://blog.csdn.net/sunbaigui/article/details/6624110" target="_blank" rel="noopener">http://blog.csdn.net/sunbaigui/article/details/6624110</a></li>
<li><a href="http://jingyan.baidu.com/album/64d05a0262b613de55f73b0e.html?picindex=5" target="_blank" rel="noopener">http://jingyan.baidu.com/album/64d05a0262b613de55f73b0e.html?picindex=5</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用XX-Net翻墙(访问google学术、youtube、Facebook等等）</title>
    <url>/8d1f.html</url>
    <content><![CDATA[<h2 id="一、XX-Net简介"><a href="#一、XX-Net简介" class="headerlink" title="一、XX-Net简介"></a>一、XX-Net简介</h2><blockquote>
<p>XX-net是在原来goagent基础上开发，使用非常的方便，不需要复杂的操作。<br>需要（类）Chrome浏览器，SwitchySharp。</p>
</blockquote>
<h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><ul>
<li>集成GoAgent、GoGoTest等自动扫描IP，省事省力</li>
<li>Web界面，人性化交互，傻瓜易用</li>
<li>内置了公共 appid, 方便新手</li>
<li>方便易用的细节、细节提示</li>
</ul>
<a id="more"></a>
<h3 id="平台支持情况"><a href="#平台支持情况" class="headerlink" title="平台支持情况"></a>平台支持情况</h3><ul>
<li>Windows 7/8/10 （xp 需要 tcpip.sys 补丁, 比如用 tcp-z）</li>
<li>Linux （Ubuntu不显示系统托盘）</li>
<li>Mac OS X(10.7; 10.8; 10.9; 10.10)</li>
</ul>
<h2 id="二、下载地址"><a href="#二、下载地址" class="headerlink" title="二、下载地址"></a>二、下载地址</h2><p><strong><em>下载 Chrome</em></strong> 通过360软件管家下载或百度搜索并下载<br><a href="http://pan.baidu.com/s/1eQCoeQ2" target="_blank" rel="noopener">下载 SwitchySharp</a><br><a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">下载 XX-Net</a> 如下图所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150911170406459"></p>
<h2 id="三、安装过程"><a href="#三、安装过程" class="headerlink" title="三、安装过程"></a>三、安装过程</h2><h3 id="1-安装Chrome"><a href="#1-安装Chrome" class="headerlink" title="1.安装Chrome"></a>1.安装Chrome</h3><ul>
<li><p>方法一、通过360软甲管家直接安装，如下图所示。</p>
<ul>
<li>在搜索框中输入<strong>chrome</strong>，并点击<em>Enter键</em>；</li>
<li>安装第一个（即稳定版）；<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150911170009049"></li>
</ul>
</li>
<li><p>方法二、百度搜索，下载chrome**.exe，双击自动安装，所有选项按照默认参数即可。</p>
</li>
</ul>
<h3 id="2-安装SwitchySharp"><a href="#2-安装SwitchySharp" class="headerlink" title="2.安装SwitchySharp"></a>2.安装SwitchySharp</h3><ul>
<li>方法一、官方安装<ul>
<li>在地址栏中输入<code>chrome://extensions</code>，回车，进入到<strong>拓展程序页面</strong>。</li>
<li>点击下方的<strong><em>获取更多扩展程序 </em></strong>按钮，进入到Google Store中；</li>
<li>搜索框中输入<code>switchysharp</code>，安装SwitchySharp。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150911170929423"><br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150911171234901"></li>
</ul>
</li>
<li>方法二、使用前面下载的SwitchySharp.crx文件安装<ul>
<li>在地址栏中输入<code>chrome://extensions</code>，回车，进入到<strong>拓展程序页面</strong>；</li>
<li>将SwitchySharp.crx拖拽到该页面，即可自动安装。</li>
</ul>
</li>
</ul>
<h3 id="3-安装XX-Net"><a href="#3-安装XX-Net" class="headerlink" title="3. 安装XX-Net"></a>3. 安装XX-Net</h3><ul>
<li>解压XX-Net-**.zip文件到当前路径下；</li>
<li>（可选）将解压文件夹放到 <em>D:\Program Files\ </em>或其他你想要的<strong>安装路径</strong>；</li>
<li>切换到安装路径下，双击Start快捷方式，启动XX-Net。跳出对话框，选择确认即可。如果出现警告，一定要通过，否则程序无法运行。</li>
<li>重启浏览器，应该可以上网了。</li>
</ul>
<h2 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h2><ul>
<li>如果安装完XX-Net，并重启浏览器后仍无法翻墙，请按如下操作。</li>
</ul>
<h3 id="1-配置SWitchySharp"><a href="#1-配置SWitchySharp" class="headerlink" title="1. 配置SWitchySharp"></a>1. 配置SWitchySharp</h3><ul>
<li>点击SWitchySharp图标，点击<strong><em>选项</em></strong>按钮，如下图所示；</li>
<li>跳转到下面页面，点击<strong><em>从文件恢复</em></strong>按钮；</li>
<li>选择<strong>SwitchyOptions.bak</strong>文件【在XX-Net安装路径下】，如下图所示。</li>
<li>点击SWitchySharp图标，选中<strong><em>GoAgent</em></strong>按钮，如下图所示；</li>
<li>重启XX-Net和浏览器，查看是否可以翻墙。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150911175737230"><br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150911175751423"><br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150911175921885"><br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150911185603513"></li>
</ul>
<h3 id="2-如何可以观看视频（youtube）"><a href="#2-如何可以观看视频（youtube）" class="headerlink" title="2. 如何可以观看视频（youtube）"></a>2. 如何可以观看视频（youtube）</h3><ul>
<li>安装完成XX-Net之后，默认使用<strong><em>公用appid</em></strong>，不能看视频。如果想看视频的话，还需要申请去GAE申请自己的appid。</li>
<li>如何申请自己的GAE Application，请查看<a href="http://www.appifan.com/jc/201209/35517.html" target="_blank" rel="noopener">博客</a></li>
<li>建立好自己的GAE appid之后，在浏览器地址栏中输入<code>127.0.0.1:8085</code>，并回车。跳转到XX-Net管理页面。如下图所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150911183847260"></li>
<li>点击左侧的<strong><em>部署服务端</em></strong>。右侧第一行填刚才申请的GAE appID，多个使用<code>|</code>分隔；第二行填自己的gmail邮箱；第三项填Gmail邮箱的密码。填完之后点击<strong><em>开始部署</em></strong>，部署完成后如下图所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150911184949241"></li>
<li>然后点击右侧的<strong>配置</strong>。如下图所示。填写刚刚部署过的GAE appID，多个使用<code>|</code>分隔。填写完成之后，点击<strong>保存</strong>。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150911185121207"></li>
<li>重启XX-Net和Chrome，看看能不能在youtube.com上观看视频了。</li>
</ul>
<h3 id="3-如何使用IPv6"><a href="#3-如何使用IPv6" class="headerlink" title="3. 如何使用IPv6"></a>3. 如何使用IPv6</h3><ul>
<li>校园网的同学可以直接使用IPv6进行翻墙，节省流量。如果不是校园网用户就不用设置了。。。</li>
<li>在浏览器地址栏中输入<code>127.0.0.1:8085</code>，并回车。跳转到XX-Net管理页面。如下图所示。</li>
<li>在左侧选择<strong>配置</strong>按钮。点击右侧的<strong>高级选项</strong>下拉菜单，将<strong><em>使用IPv6</em></strong>选项设置为ON。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150911185946032"></li>
<li>打开XX-Net安装目录，使用记事本打开<code>.\gae_proxy\local\proxy.ini</code>，将<code>use_ipv6 = 0</code>修改为<code>use_ipv6 = 1</code>。</li>
<li>重启XX-Net和Chrome之后，就能使用IPv6翻墙了，当然也能浏览其他的网页。</li>
</ul>
<h2 id="五、参考"><a href="#五、参考" class="headerlink" title="五、参考"></a>五、参考</h2><ul>
<li><a href="http://wallfans.eu.org/xxnet-optimize-1/" target="_blank" rel="noopener">xxnet优化教程1</a></li>
<li><a href="https://appengine.google.com/" target="_blank" rel="noopener">GAE</a></li>
<li><a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">XX-Net项目组</a></li>
<li><a href="https://github.com/XX-net/XX-Net/wiki/XXNET%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">XX-Net超详细教程</a></li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>MatConvNet学习笔记</title>
    <url>/f780.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>MatConvNet是VLFeat的一部分，是卷积神经网络（CNN）的一个实现。既可以使用matlab编程，又能使用GPU加速，是一个不错的CNN库。<br><a href="http://www.vlfeat.org/matconvnet/" target="_blank" rel="noopener">MatConvNet 主页</a></p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载MatConvNet工具箱"><a href="#下载MatConvNet工具箱" class="headerlink" title="下载MatConvNet工具箱"></a>下载MatConvNet工具箱</h3><ul>
<li>点此<a href="http://www.vlfeat.org/matconvnet/download/matconvnet-1.0-beta13.tar.gz" target="_blank" rel="noopener">下载工具箱</a></li>
<li>我下载的版本是 <code>matconvnet-1.0-beta13.tar</code><h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h3></li>
<li>将压缩文件解压到 <code>matconvnet-1.0-beta13.tar</code>中<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3></li>
<li>编译前，Matlab应该已经绑定C++编译器了。否则，会出错。Windows下安装Visual Studio即可，Linux下有自带的GCC</li>
<li>在Matlab中输入<code>mex -setup</code>，绑定C++编译器</li>
<li>打开Matlab，将工作路径切换到<strong><em>…/matconvnet-1.0-beta13.tar</em></strong></li>
<li>在Matlab中执行命令： <code>addpath matlab</code>。添加搜索路径。</li>
<li>在Matlab中执行命令：<code>vl_compilenn</code>。编译工具箱。</li>
<li>在Matlab中执行命令：<code>vl_setupnn</code>。设置工具箱。</li>
</ul>
<p>至此，工具箱已经安装完毕。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>*在Matlab中执行命令：<code>vl_test_nnlayers</code>。测试</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-安装-cuda7.0-单显卡-超详细教程</title>
    <url>/2455.html</url>
    <content><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><ul>
<li>本教程是在台式机上安装的，只有一个NVIDIA显卡。</li>
<li>操作系统是Ubuntu 14.04 (64bit)。</li>
<li>双显卡的笔记本请移步<a href>Ubuntu-安装-cuda7.0-双显卡-超详细教程</a></li>
</ul>
<h2 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h2><p><strong>说明：本文假设下载的文件都在~/Dowloads/下面</strong></p>
<a id="more"></a>
<h3 id="1-更新操作系统"><a href="#1-更新操作系统" class="headerlink" title="1. 更新操作系统"></a>1. 更新操作系统</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure>
<h3 id="2-下载cuda7-0"><a href="#2-下载cuda7-0" class="headerlink" title="2. 下载cuda7.0"></a>2. 下载cuda7.0</h3><p><a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">点此下载</a> </p>
<ul>
<li><p>如果不是该版本，可以搜索，如下图所示；</p>
</li>
<li><p>点击”Linux x86”，选择“Ubuntu 14.04”行的最后一个“RUN”下载；</p>
<p>  <img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731081204846"></p>
<p>  <img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731081542503"></p>
</li>
</ul>
<h3 id="3-下载NVIDIA显卡驱动"><a href="#3-下载NVIDIA显卡驱动" class="headerlink" title="3. 下载NVIDIA显卡驱动"></a>3. 下载NVIDIA显卡驱动</h3><p><a href="http://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">点此下载</a></p>
<ul>
<li><p>选择自己电脑对应的配置，然后点击“搜索”；</p>
</li>
<li><p>点击“DOWLOAD”，进行下载；</p>
<p>  <img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731081921600"></p>
<p>  <img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731082244468"></p>
</li>
</ul>
<h2 id="三、验证系统是否符合要求"><a href="#三、验证系统是否符合要求" class="headerlink" title="三、验证系统是否符合要求"></a>三、验证系统是否符合要求</h2><h3 id="1-验证显卡是否支持cuda"><a href="#1-验证显卡是否支持cuda" class="headerlink" title="1. 验证显卡是否支持cuda"></a>1. 验证显卡是否支持cuda</h3><ul>
<li><p>终端输入命令，如图所示。如果只返回两条信息，即有两个显卡，可以继续下面教程，否则请移步<a href="http://blog.csdn.net/xuezhisdc/article/details/47075401" target="_blank" rel="noopener">《Ubuntu-安装-cuda7.0-双显卡-超详细教程》</a></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lspci | grep VGA</span><br></pre></td></tr></table></figure>
<p>  <img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731082709383"></p>
</li>
<li><p>如果操作系统是Ubuntu Server，即使有NVIDIA显卡，执行上面的命令可能也不会返回相关信息。这时需要执行的命令是 <code>lspci |grep nvidia -i</code> ，就能返回正常的结果。</p>
</li>
<li>终端会显示显卡型号，在<a href="https://developer.nvidia.com/cuda-gpus中查找，是否有你的显卡型号，只要存在，就表明显卡支持cuda，同时还可以查看显卡的计算能力，数值越大越好。" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-gpus中查找，是否有你的显卡型号，只要存在，就表明显卡支持cuda，同时还可以查看显卡的计算能力，数值越大越好。</a></li>
</ul>
<h3 id="2-查看系统类型"><a href="#2-查看系统类型" class="headerlink" title="2. 查看系统类型"></a>2. 查看系统类型</h3><ul>
<li><p>命令行输入下面命令;</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -m &amp;&amp; cat /etc/*release</span><br></pre></td></tr></table></figure></li>
<li><p>第一行显示有x86_64，说明系统是x86构架64位系统;</p>
<p>  <img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731083253009"></p>
</li>
</ul>
<h2 id="四、安装NVIDIA显卡驱动"><a href="#四、安装NVIDIA显卡驱动" class="headerlink" title="四、安装NVIDIA显卡驱动"></a>四、安装NVIDIA显卡驱动</h2><blockquote>
<p>说明：前面下载的cuda7.0<em>.run中含有NVIDIA显卡驱动，而且安装时会提示安装驱动。但是，由于Ubuntu中已经为NVIDIA显卡安装了驱动nouveau，而且该驱动正在运行中，所以安装驱动的过程稍微麻烦，建议<em>*先单独安装显卡驱动，再安装cuda</em></em></p>
</blockquote>
<h3 id="1-切换到tty1"><a href="#1-切换到tty1" class="headerlink" title="1. 切换到tty1"></a>1. 切换到tty1</h3><ul>
<li><p>说明，视窗会使用显卡，如果在视窗下，原来的驱动nouveau不会停止，也就不能安装成功</p>
</li>
<li><p>按组合键”Ctrl+Alt+F1“，切换到tty1；</p>
</li>
</ul>
<h3 id="2-关闭显示器管理器"><a href="#2-关闭显示器管理器" class="headerlink" title="2. 关闭显示器管理器"></a>2. 关闭显示器管理器</h3><ul>
<li>输入命令<code>sudo stop lightdm</code>，关闭显示器管理器。否则后面旧的显卡驱动无法禁用，新的显卡驱动无法安装。</li>
</ul>
<h3 id="3-禁用旧的显卡驱动"><a href="#3-禁用旧的显卡驱动" class="headerlink" title="3. 禁用旧的显卡驱动"></a>3. 禁用旧的显卡驱动</h3><ul>
<li><p>注意：<code>禁用旧的显卡驱动</code>这一步可以不操作，后面安装新的NVIDIA显卡驱动时，会提示该问题；那时选择相应的选项即可创建该文件。</p>
</li>
<li><p>禁用旧的显卡驱动；切换到/etc/modprobe.d/，新建文件nvidia-installer-disable-nouveau.conf，输入以下内容，保存退出；</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">blacklist</span> <span class="string">nouveau</span></span><br><span class="line"><span class="attr">options</span> <span class="string">nouveau modeset=0</span></span><br></pre></td></tr></table></figure></li>
<li><p>在文件/etc/default/grub的最后，添加一行，如下所示；</p>
  <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">rdblacklist nouveau</span><br><span class="line">nouveau.<span class="attribute">modeset</span>=0</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-安装新的驱动"><a href="#4-安装新的驱动" class="headerlink" title="4. 安装新的驱动"></a>4. 安装新的驱动</h3><ul>
<li>小技巧：如果按照第3步做完了，重启后依然无法安装新的NVIDIA显卡驱动，那么可以通过software manger安装NVIDIA低版本的显卡驱动（它就会自动关闭nouveau），重启后卸载低版本显卡驱动，接着安装当前版本的显卡驱动。这样一般情况下可以成功。（曲线救国）</li>
<li><p>执行以下命令安装</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到驱动所在的路径</span></span><br><span class="line"><span class="built_in">cd</span> ~/Downloads</span><br><span class="line"><span class="comment"># 查看驱动的名称(ls)</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 开始安装,注意将驱动名换成你下载的驱动的名称</span></span><br><span class="line">sudo sh ./NVIDIA-Linux-x86_64-352.30.run</span><br></pre></td></tr></table></figure></li>
<li>安装过程中，根据提示，选择<code>accept</code>, ‘yes’或默认选项<ul>
<li>选项：Accept →  Continue → installation →  OK → OK → OK </li>
</ul>
</li>
<li><p>当提示<strong>重启</strong>时，重启继续。(如果前面没有禁用nouveau，会提示向/etc/modprobe.d/路径下添加文件，其实是在尝试禁用nouveau。如果出现该提示，需要重启电脑之后，再次运行显卡安装程序，重新开始安装一遍。)</p>
</li>
<li><p>重启后，切换到tty（Ctrl+Alt+F1），关闭显示器管理（<em><code>sudo stop lightdm</code></em>），重新运行安装驱动命令 （<em><code>sudo sh ./NVIDIA-Linux-x86_64-352.30.run</code></em>）</p>
</li>
<li><p>当提示<strong>*would you run nvidia-Xconfig utility … </strong>，选择Yes。</p>
</li>
</ul>
<h3 id="5-检验驱动是否安装成功"><a href="#5-检验驱动是否安装成功" class="headerlink" title="5. 检验驱动是否安装成功"></a>5. 检验驱动是否安装成功</h3><ul>
<li><p>打开终端，输入以下命令：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/driver/nvidia/version</span><br></pre></td></tr></table></figure></li>
<li><p>如果显示驱动版本，说明安装成功。如下图所示。</p>
<p>  <img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731094233828"></p>
</li>
</ul>
<h2 id="五、安装cuda"><a href="#五、安装cuda" class="headerlink" title="五、安装cuda"></a>五、安装cuda</h2><p><strong><em>注意，请在成功安装显卡驱动的前提下继续安装cuda，否则也会安装失败。</em></strong></p>
<h3 id="1-安装依赖库"><a href="#1-安装依赖库" class="headerlink" title="1. 安装依赖库"></a>1. 安装依赖库</h3><ul>
<li><p>请先在Terminal中安装以下依赖库：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install freeglut3-dev</span><br><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install libx11-dev</span><br><span class="line">sudo apt-get install libxmu-dev </span><br><span class="line">sudo apt-get install libxi-dev </span><br><span class="line">sudo apt-get install libglu1-mesa </span><br><span class="line">sudo apt-get install libglu1-mesa-dev</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-运行cuda安装命令"><a href="#2-运行cuda安装命令" class="headerlink" title="2. 运行cuda安装命令"></a>2. 运行cuda安装命令</h3><ul>
<li><p>在Terminal中运行以下命令，开始安装cuda：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意，将cuda名称换成自己下载的名称</span></span><br><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line">chmod a+x cuda_7.0.28_linux.run</span><br><span class="line">sudo ./cuda_7.0.28_linux.run</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装过程中会提示安装<strong>NVIDIA驱动</strong>，OpenGL，CUDA安装包和SAMPLE包。此处只安装后面三个。由于前面已经安装了最新版的NVIDIA驱动，此处不用再安装。</p>
</li>
<li><p>安装过程中，根据提示，选择accept, ‘yes’或默认选项；</p>
</li>
<li><p><strong><em>…symbolic link …</em></strong>选项选择Yes，否则没有<em><code>/usr/local/cuda/</code></em>，只有<em><code>/usr/local/cuda7.0/</code></em></p>
</li>
<li><p>安装完成之后，启动显示器管理（<code>sudo start lightdm</code>），切换回视窗界面。</p>
</li>
</ul>
<h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h3><ul>
<li><p>打开终端，在文件/etc/profile的最后添加以下内容：</p>
  <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">PATH</span>=/usr/<span class="keyword">local</span>/cuda/bin:$<span class="type">PATH</span></span><br><span class="line">export <span class="type">PATH</span></span><br></pre></td></tr></table></figure></li>
<li><p>保存后, 执行下列命令, 使环境变量立即生效</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>在 /etc/ld.so.conf.d/新建文件 cuda.conf，并添加如下内容：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/cuda/lib64</span><br></pre></td></tr></table></figure></li>
<li><p>执行下列命令使之立刻生效:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-检验环境是否设置好"><a href="#4-检验环境是否设置好" class="headerlink" title="4. 检验环境是否设置好"></a>4. 检验环境是否设置好</h3><ul>
<li>打开终端，输入<code>cuda</code>，按2次”Tab键“，如果有弹出的命令提示，就说明环境配置成功。</li>
</ul>
<h3 id="5-安装其他一些辅助库"><a href="#5-安装其他一些辅助库" class="headerlink" title="5.安装其他一些辅助库"></a>5.安装其他一些辅助库</h3><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install freeglut3-<span class="built_in">dev</span> build-essential libx11-<span class="built_in">dev</span> libxmu-<span class="built_in">dev</span> libxi-<span class="built_in">dev</span> libgl1-mesa-glx libglu1-mesa libglu1-mesa-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure>
<h2 id="六、安装CUDA-SAMPLES"><a href="#六、安装CUDA-SAMPLES" class="headerlink" title="六、安装CUDA SAMPLES"></a>六、安装CUDA SAMPLES</h2><ul>
<li><p>安装cuda过程中，cuda samples默认安装了，并且存储在当前用户目录下（<strong><em>/home/xuezhisd/NVIDIA_CUDA-7.0_Samples</em></strong>），如下图所示：</p>
<p>  <img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731094513416"></p>
</li>
</ul>
<h3 id="1-验证nvcc"><a href="#1-验证nvcc" class="headerlink" title="1. 验证nvcc"></a>1. 验证nvcc</h3><ul>
<li>输入命令<em><code>nvcc --version</code></em>，如果已经安装了，会显示版本号；如果没有安装，按照提示完成安装。</li>
</ul>
<h3 id="2-make-cuda-samples"><a href="#2-make-cuda-samples" class="headerlink" title="2. make cuda samples"></a>2. make cuda samples</h3><ul>
<li><p>切换到cuda-samples路径，使用<strong><em><code>make</code></em></strong>命令：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换到cuda-samples所在目录</span></span><br><span class="line"><span class="comment">#注意，换成自己的路径</span></span><br><span class="line"><span class="built_in">cd</span> /home/xuezhisd/NVIDIA_CUDA-7.0_Samples</span><br><span class="line"><span class="comment">#编译 make （安装命令 sudo apt-get install cmake)</span></span><br><span class="line">make</span><br><span class="line"><span class="comment">#编译完毕，切换release目录</span></span><br><span class="line"><span class="built_in">cd</span> ./bin/x86_64/linux/release</span><br><span class="line"><span class="comment">#检验是否成功</span></span><br><span class="line"><span class="comment">#运行实例 ./deviceQuery</span></span><br><span class="line">./deviceQuery</span><br></pre></td></tr></table></figure></li>
<li><p>显示如下结果，说明成功。</p>
<p>  <img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731141630016"><br>  <img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731141752530"></p>
</li>
</ul>
<h2 id="七、安装cuDNN"><a href="#七、安装cuDNN" class="headerlink" title="七、安装cuDNN"></a>七、安装cuDNN</h2><h3 id="1-下载cuDNN"><a href="#1-下载cuDNN" class="headerlink" title="1. 下载cuDNN"></a>1. 下载cuDNN</h3><ul>
<li><a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">官方下载</a> 需要注册和验证，麻烦。</li>
<li>我将我下载文件上传到百度网盘中了，有需要的可以点击此处直接下载 <a href="http://pan.baidu.com/s/1sjBl5cL" target="_blank" rel="noopener">cudnn</a>    &amp;     <a href="http://pan.baidu.com/s/1hq8ggfy" target="_blank" rel="noopener">cudnn-samples</a></li>
</ul>
<h3 id="2-安装cuDNNE"><a href="#2-安装cuDNNE" class="headerlink" title="2. 安装cuDNNE"></a>2. 安装cuDNNE</h3><ul>
<li>解压，并复制文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解压文件</span></span><br><span class="line">tar -zxvf cudnn-6.5-linux-x64-v2.tgz</span><br><span class="line"><span class="comment">#切换路径</span></span><br><span class="line"><span class="built_in">cd</span> cudnn-6.5-linux-x64-v2</span><br><span class="line"><span class="comment">#复制lib文件到cuda安装路径下的lib64/</span></span><br><span class="line">sudo cp lib* /usr/<span class="built_in">local</span>/cuda/lib64/</span><br><span class="line"><span class="comment">#复制头文件</span></span><br><span class="line">sudo cp cudnn.h /usr/<span class="built_in">local</span>/cuda/include/</span><br></pre></td></tr></table></figure></li>
<li>更新软连接<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/lib64/</span><br><span class="line">sudo rm -rf libcudnn.so libcudnn.so.6.5</span><br><span class="line">sudo ln -s libcudnn.so.6.5.48 libcudnn.so.6.5</span><br><span class="line">sudo ln -s libcudnn.so.6.5 libcudnn.so</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>至此，cuDNN完成安装。</p>
<h2 id="八、参考文章"><a href="#八、参考文章" class="headerlink" title="八、参考文章"></a>八、参考文章</h2><ul>
<li><a href="http://www.linuxidc.com/Linux/2013-05/84814.htm" target="_blank" rel="noopener">Ubuntu 13.04 双显卡安装NVIDIA GT 630M驱动</a></li>
<li><a href="http://www.cnblogs.com/platero/p/3993877.html" target="_blank" rel="noopener">Caffe + Ubuntu 14.04 64bit + CUDA 6.5 配置说明</a></li>
<li><a href="http://www.bubuko.com/infodetail-462458.html" target="_blank" rel="noopener">Ubuntu14.04+cuda6.5+opencv2.4.9+MATLAB2013a+caffe配置记录（二）</a></li>
<li><a href="https://www.google.com.hk/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=ERROR%3A%20Module%20nouveau%20is%20in%20use" target="_blank" rel="noopener">ERROR: Module nouveau is in use</a></li>
<li><a href="http://www.pimp-my-rig.com/2012/01/unload-nouveau-install-nvidia-driver.html" target="_blank" rel="noopener">HOW-TO: Unload nouveau and Install Nvidia Driver</a></li>
<li><a href="http://www.linuxidc.com/Linux/2015-07/120449.htm" target="_blank" rel="noopener">Caffe在Ubuntu 14.04 64bit 下的安装</a></li>
<li><a href="http://blog.csdn.net/guicydy/article/details/45367217" target="_blank" rel="noopener">ubutu14.04LTS+opencv2.4.9+matlab 2014a+caffe+cuDNN</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_403db75501010yp2.html" target="_blank" rel="noopener">Optimus双显卡用Bumblebee3.0在ubuntu12.04下配置CUDA4.2</a></li>
<li><a href="http://www.cnblogs.com/platero/p/4070756.html" target="_blank" rel="noopener">Ubuntu 14.04 Nvidia显卡驱动安装及设置</a></li>
<li><a href="http://www.shangxueba.com/jingyan/1661938.html" target="_blank" rel="noopener">ubuntu 11.10驱动gtx 460显卡 禁用nouveau </a></li>
<li>ERROR: 启动过程中，会出现两个错误，执行以下命令可以解决。  <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> purge nvidia-304</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install nvidia-331</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-安装-搜狗输入法-详细教程</title>
    <url>/1984.html</url>
    <content><![CDATA[<h2 id="下载deb安装包"><a href="#下载deb安装包" class="headerlink" title="下载deb安装包"></a>下载deb安装包</h2><ul>
<li><a href="http://pinyin.sogou.com/linux/?r=pinyin" target="_blank" rel="noopener">安装包 下载地址</a></li>
<li>系统32位的点击“立即下载32bit”，如下图所示；</li>
<li>系统64位的点击“立即下载64bit”，如下图所示。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731074947628"></li>
</ul>
<h2 id="安装fcitx"><a href="#安装fcitx" class="headerlink" title="安装fcitx"></a>安装fcitx</h2><ul>
<li>打开Terminal，输入以下命令，安装fcitx<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install fcitx</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h2><ul>
<li>输入以下命令，安装第一步下载的deb安装包</li>
<li>注意：deb包名根据你下载的包名而定。</li>
<li>下面以64位版本为例。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">dpkg</span> <span class="selector-tag">-i</span> <span class="selector-tag">sogoupinyin_1</span><span class="selector-class">.2</span><span class="selector-class">.0</span><span class="selector-class">.0048_amd64</span><span class="selector-class">.deb</span></span><br></pre></td></tr></table></figure></li>
<li>如果出现错误，则输入以下命令，修复。<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> -f install</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="配置输入方法"><a href="#配置输入方法" class="headerlink" title="配置输入方法"></a>配置输入方法</h2><ul>
<li>输入以下命令<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">im-<span class="built_in">config</span></span><br></pre></td></tr></table></figure></li>
<li>跳出一个对话框，如下图所示，点击“OK”；<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731075138684"></li>
<li>点击“Yes”；<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731075324395"></li>
<li>选择fcitx，点击“OK”；<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731075426623"></li>
<li>点击“OK”；<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731075404825"></li>
</ul>
<h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><ul>
<li>重启电脑，使配置生效。</li>
</ul>
<h2 id="添加搜狗输入法"><a href="#添加搜狗输入法" class="headerlink" title="添加搜狗输入法"></a>添加搜狗输入法</h2><ul>
<li>点击右上角的<strong><code>小键盘图标</code></strong>，<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731075545762"></li>
<li>选择<strong><code>配置</code></strong>选项，打开输入法配置对话框，点击左下角的<strong><code>+</code></strong>按钮；<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731075710704"></li>
<li>在弹出的对话框中，取消<code>Only show current language</code>选项；<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731075715863"></li>
<li>拖动滚动条到最后，选择<code>sougou  china</code>；<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731075921662"></li>
<li><p>点击“Ok”，完成安装。<br><img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150731080008992"></p>
</li>
<li><p>注： 切换输入法快捷键“Ctrl + 空格”，切换中英文快捷键“Shift”</p>
</li>
</ul>
<p>至此，搜狗输入法完成安装。。。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://pinyin.sogou.com/linux/help.php" target="_blank" rel="noopener">http://pinyin.sogou.com/linux/help.php</a></li>
<li><a href="http://jingyan.baidu.com/article/0202781189b6ef1bcc9ce513.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/0202781189b6ef1bcc9ce513.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-安装-Chrome</title>
    <url>/2175.html</url>
    <content><![CDATA[<h2 id="一、下载Chrome的安装包"><a href="#一、下载Chrome的安装包" class="headerlink" title="一、下载Chrome的安装包"></a>一、下载Chrome的安装包</h2><ul>
<li>打开终端，输入一下命令（区分64位和32位），下载Chrome的deb安装包。<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">#<span class="number">32</span>位</span><br><span class="line">wget http<span class="variable">s:</span>//<span class="keyword">dl</span>.google.<span class="keyword">com</span>/linux/direct/google-chrome-stable_current_i386.<span class="keyword">deb</span></span><br><span class="line">#<span class="number">64</span>位</span><br><span class="line">wget http<span class="variable">s:</span>//<span class="keyword">dl</span>.google.<span class="keyword">com</span>/linux/direct/google-chrome-stable_current_amd64.<span class="keyword">deb</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="二、安装Chrome"><a href="#二、安装Chrome" class="headerlink" title="二、安装Chrome"></a>二、安装Chrome</h2><ul>
<li>注意：需要root权限</li>
<li>在Terminal中输入以下命令<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#32</span>位安装命令</span><br><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">dpkg</span> <span class="selector-tag">-i</span> <span class="selector-tag">google-chrome-stable_current_i386</span><span class="selector-class">.deb</span></span><br><span class="line"><span class="selector-id">#64</span>位安装命令</span><br><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">dpkg</span> <span class="selector-tag">-i</span> <span class="selector-tag">google-chrome-stable_current_amd64</span><span class="selector-class">.deb</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="三、修复安装错误"><a href="#三、修复安装错误" class="headerlink" title="三、修复安装错误"></a>三、修复安装错误</h2><ul>
<li>安装过程中会提示错误信息“在处理时有错误发生： google-chrome-stable”</li>
<li>英文错误：<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">dpkg: <span class="built_in">error</span> processing <span class="built_in">package</span> google-chrome-stable (<span class="comment">--install):</span></span><br><span class="line">dependency problems - leaving unconfigured</span><br></pre></td></tr></table></figure></li>
<li>出现这个错误之后，执行下面的命令<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> -f install</span><br></pre></td></tr></table></figure></li>
<li>执行完成后，Chrome就安装成功了。</li>
<li>在Dash中搜索Chrome，打开Chrome，并绑定到启动栏（launcher）</li>
</ul>
<h2 id="四、参考文章："><a href="#四、参考文章：" class="headerlink" title="四、参考文章："></a>四、参考文章：</h2><ul>
<li><a href="http://www.linuxidc.com/Linux/2014-04/100645.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2014-04/100645.htm</a></li>
<li><a href="http://jingyan.baidu.com/article/a681b0de18071e3b1843463b.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/a681b0de18071e3b1843463b.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-安装-Shadowsocks</title>
    <url>/12ed.html</url>
    <content><![CDATA[<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ul>
<li>Ubuntu 14.04</li>
<li>Python2.7</li>
</ul>
<h2 id="安装依赖关系"><a href="#安装依赖关系" class="headerlink" title="安装依赖关系"></a>安装依赖关系</h2><pre><code>sudo apt-get update
sudo python --version
sudo apt-get install python-gevent python-pip
sudo pip install shadowsocks
</code></pre><a id="more"></a>
<h2 id="找到shadowsocks的安装位置"><a href="#找到shadowsocks的安装位置" class="headerlink" title="找到shadowsocks的安装位置"></a>找到shadowsocks的安装位置</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo <span class="builtin-name">find</span> / -name shadows*</span><br></pre></td></tr></table></figure>
<p>其中， “/“是根目录下， *是通配符。<br>我的安装路径是<code>/usr/local/lib/python2.7/dist-packages/shadowsocks</code></p>
<h2 id="新建并修改配置文件"><a href="#新建并修改配置文件" class="headerlink" title="新建并修改配置文件"></a>新建并修改配置文件</h2><p>在安装路径下新建文件config.json，路径<code>/usr/local/lib/python2.7/dist-packages/shadowsocks</code>，创建命令<code>sudo touch config.json</code></p>
<p>文件内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"server"</span>:<span class="string">"79.45.115.110"</span>,</span><br><span class="line"><span class="attr">"server_port"</span>:<span class="number">12801</span>,</span><br><span class="line"><span class="attr">"local_port"</span>:<span class="number">10808</span>,</span><br><span class="line"><span class="attr">"password"</span>:<span class="string">"123456"</span>,</span><br><span class="line"><span class="attr">"timeout"</span>:<span class="number">600</span>,</span><br><span class="line"><span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行shadowsocks"><a href="#运行shadowsocks" class="headerlink" title="运行shadowsocks"></a>运行shadowsocks</h2><p>在安装路径下，输入<code>sslocal</code>，即可启动shadowsocks。</p>
<h2 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h2><ul>
<li>修改rc.local文件<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/etc/</span></span><br><span class="line">sudo vim rc.local</span><br></pre></td></tr></table></figure></li>
<li>加上一行：<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/sslocal -c /usr/local/<span class="class"><span class="keyword">lib</span>/<span class="title">python2</span>.7/<span class="title">dist</span>-<span class="title">packages</span>/<span class="title">shadowsocks</span>/<span class="title">config</span>.<span class="title">json</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="配置SwitchySharp"><a href="#配置SwitchySharp" class="headerlink" title="配置SwitchySharp"></a>配置SwitchySharp</h2><ul>
<li><a href="http://pan.baidu.com/s/1eQCoeQ2" target="_blank" rel="noopener">下载Switchysharp</a></li>
<li><a href="http://jingyan.baidu.com/article/380abd0a5543221d90192c9f.html" target="_blank" rel="noopener">安装Switchysharp</a></li>
<li>配置如下图所示，注意：端口根据根据配置中填写，上面的配置是10808，所以此处端口应该由1080改为：10808<br>  <img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150802191807396"></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu中apt-get安装与默认路径</title>
    <url>/4001.html</url>
    <content><![CDATA[<h2 id="一、apt-get-安装"><a href="#一、apt-get-安装" class="headerlink" title="一、apt-get 安装"></a>一、apt-get 安装</h2><ul>
<li>deb是debian linus的安装格式，跟red hat的rpm非常相似，最基本的安装命令是：dpkg -i file.deb或者直接双击此文件</li>
<li>dpkg 是Debian Package的简写，是为Debian 专门开发的套件管理系统，方便软件的安装、更新及移除。所有源自Debian的Linux发行版都使用dpkg，例如Ubuntu、Knoppix 等。</li>
</ul>
<blockquote>
<p> 以下是一些 dpkg 的普通用法：</p>
</blockquote>
<a id="more"></a>
<h3 id="dpkg-i"><a href="#dpkg-i" class="headerlink" title="dpkg -i"></a>dpkg -i</h3><ul>
<li>安装一个 Debian 软件包，如你手动下载的文件。</li>
</ul>
<h3 id="dpkg-c"><a href="#dpkg-c" class="headerlink" title="dpkg -c"></a>dpkg -c</h3><ul>
<li>列出 的内容。</li>
</ul>
<h3 id="dpkg-I"><a href="#dpkg-I" class="headerlink" title="dpkg -I"></a>dpkg -I</h3><ul>
<li>从 中提取包裹信息。</li>
</ul>
<h3 id="dpkg-r"><a href="#dpkg-r" class="headerlink" title="dpkg -r"></a>dpkg -r</h3><ul>
<li>移除一个已安装的包裹。</li>
</ul>
<h3 id="dpkg-P"><a href="#dpkg-P" class="headerlink" title="dpkg -P"></a>dpkg -P</h3><ul>
<li>完全清除一个已安装的包裹。和 remove 不同的是，remove 只是删掉数据和可执行文件，purge 另外还删除所有的配制文件。</li>
</ul>
<h3 id="dpkg-L"><a href="#dpkg-L" class="headerlink" title="dpkg -L"></a>dpkg -L</h3><ul>
<li>列出 安装的所有文件清单。同时请看 dpkg -c 来检查一个 .deb 文件的内容。</li>
</ul>
<h3 id="dpkg-s"><a href="#dpkg-s" class="headerlink" title="dpkg -s"></a>dpkg -s</h3><ul>
<li>显示已安装包裹的信息。同时请看 apt-cache 显示 Debian 存档中的包裹信息，以及 dpkg -I 来显示从一个 .deb 文件中提取的包裹信息。</li>
</ul>
<h3 id="dpkg-reconfigure"><a href="#dpkg-reconfigure" class="headerlink" title="dpkg-reconfigure"></a>dpkg-reconfigure</h3><ul>
<li>重新配制一个已经安装的包裹，如果它使用的是 debconf (debconf 为包裹安装提供了一个统一的配制界面)。</li>
</ul>
<h2 id="二、软件安装后相关文件位置"><a href="#二、软件安装后相关文件位置" class="headerlink" title="二、软件安装后相关文件位置"></a>二、软件安装后相关文件位置</h2><h3 id="下载的软件存放位置"><a href="#下载的软件存放位置" class="headerlink" title="下载的软件存放位置"></a>下载的软件存放位置</h3><ul>
<li>/var/cache/apt/archives</li>
</ul>
<h3 id="安装后软件默认位置"><a href="#安装后软件默认位置" class="headerlink" title="安装后软件默认位置"></a>安装后软件默认位置</h3><ul>
<li>/usr/share</li>
</ul>
<h3 id="可执行文件位置"><a href="#可执行文件位置" class="headerlink" title="可执行文件位置"></a>可执行文件位置</h3><ul>
<li>/usr/bin</li>
</ul>
<h3 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h3><ul>
<li>/etc</li>
</ul>
<h3 id="lib文件位置"><a href="#lib文件位置" class="headerlink" title="lib文件位置"></a>lib文件位置</h3><ul>
<li>/usr/lib</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab工具箱下载地址汇总</title>
    <url>/eb52.html</url>
    <content><![CDATA[<p>1.平面操作工具箱</p>
<p><a href="http://cathy.ijs.si/~leon/planman.html" target="_blank" rel="noopener">http://cathy.ijs.si/~leon/planman.html</a></p>
<p>2.SimMechanics 工具箱 (这个好像不是免费的)<br><a href="http://www.mathworks.com/access/helpdesk/help/toolbox/physmod/mech/mech.shtml" target="_blank" rel="noopener">http://www.mathworks.com/access/helpdesk/help/toolbox/physmod/mech/mech.shtml</a></p>
<p>3.gaot工具箱(遗传算法工具箱)<br><a href="http://www.dytrol.com/viewFile.asp?Boardid=11&amp;ID=263" target="_blank" rel="noopener">http://www.dytrol.com/viewFile.asp?Boardid=11&amp;ID=263</a></p>
<p>4.Optimization Toolbox 2.2<br><a href="http://www.ttdown.com/SoftDown.asp?ID=25782" target="_blank" rel="noopener">http://www.ttdown.com/SoftDown.asp?ID=25782</a></p>
<p>5.Vibration Toolbox<br><a href="http://www.cs.wright.edu/people/faculty/jslater/vtoolbox/vtoolbox.html" target="_blank" rel="noopener">http://www.cs.wright.edu/people/faculty/jslater/vtoolbox/vtoolbox.html</a></p>
<p>6.MATLAB机器视觉工具箱<br><a href="http://www.cat.csiro.au/cmst/staff/pic/vision-tb.html" target="_blank" rel="noopener">http://www.cat.csiro.au/cmst/staff/pic/vision-tb.html</a></p>
<a id="more"></a>
<p>7.Polynomial Toolbox<br><a href="http://www.polyx.com/frm-main-download.htm" target="_blank" rel="noopener">http://www.polyx.com/frm-main-download.htm</a></p>
<p>8.TIME-FREQUENCY TOOLBOX<br><a href="http://crttsn.univ-nantes.fr/~auger/tftb.html" target="_blank" rel="noopener">http://crttsn.univ-nantes.fr/~auger/tftb.html</a></p>
<p>9.Uvi_Wave Wavelet Toolbox<br><a href="http://www.gts.tsc.uvigo.es/~wavelets/" target="_blank" rel="noopener">http://www.gts.tsc.uvigo.es/~wavelets/</a></p>
<p>10.THE NNSYSID TOOLBOX - Version 2<br><a href="http://kalman.iau.dtu.dk/research/control/nnsysid.html" target="_blank" rel="noopener">http://kalman.iau.dtu.dk/research/control/nnsysid.html</a></p>
<p>11.Camera calibration toolbox<br><a href="http://www.ee.oulu.fi/~jth/calibr/" target="_blank" rel="noopener">http://www.ee.oulu.fi/~jth/calibr/</a></p>
<p>12.Virtual Control Lab<br><a href="http://www.esr.ruhr-uni-bochum.de/VCLab/" target="_blank" rel="noopener">http://www.esr.ruhr-uni-bochum.de/VCLab/</a></p>
<p>13.有限元工具箱<br><a href="http://www.dytrol.com/viewFile.asp?Boardid=11&amp;ID=264" target="_blank" rel="noopener">http://www.dytrol.com/viewFile.asp?Boardid=11&amp;ID=264</a></p>
<p>14.最速梯度法<br><a href="http://www.dytrol.com/viewFile.asp?Boardid=11&amp;ID=265" target="_blank" rel="noopener">http://www.dytrol.com/viewFile.asp?Boardid=11&amp;ID=265</a></p>
<p>MATLAB Toolboxes</p>
<p>ZSM (zero sum multinomial)<br><a href="http://mcgillb.user.msu.edu/zsmcode.html" target="_blank" rel="noopener">http://mcgillb.user.msu.edu/zsmcode.html</a></p>
<p>Binaural-modeling software for MATLAB/Windows<br><a href="http://www.lifesci.sussex.ac.uk/home/Michael_Akeroyd/download2.html" target="_blank" rel="noopener">http://www.lifesci.sussex.ac.uk/home/Michael_Akeroyd/download2.html</a></p>
<p>Statistical Parametric Mapping (SPM)<br><a href="http://www.fil.ion.ucl.ac.uk/spm/ext/" target="_blank" rel="noopener">http://www.fil.ion.ucl.ac.uk/spm/ext/</a></p>
<p>BOOTSTRAP MATLAB TOOLBOX<br><a href="http://www.csp.curtin.edu.au/downloads/bootstrap_toolbox.html" target="_blank" rel="noopener">http://www.csp.curtin.edu.au/downloads/bootstrap_toolbox.html</a></p>
<p>The DSS package for MATLAB<br>DSS Matlab package contains algorithms for performing linear, deflation and symmetric DSS.<br><a href="http://www.cis.hut.fi/projects/dss/package/" target="_blank" rel="noopener">http://www.cis.hut.fi/projects/dss/package/</a></p>
<p>Psychtoolbox<br><a href="http://www.psychtoolbox.org/download.html" target="_blank" rel="noopener">http://www.psychtoolbox.org/download.html</a></p>
<p>Multisurface Method Tree with MATLAB<br><a href="http://www.cs.wisc.edu/~olvi/uwmp/msmt.html" target="_blank" rel="noopener">http://www.cs.wisc.edu/~olvi/uwmp/msmt.html</a></p>
<p>A Matlab Toolbox for every single topic !<br><a href="http://stommel.tamu.edu/~baum/toolboxes.html" target="_blank" rel="noopener">http://stommel.tamu.edu/~baum/toolboxes.html</a><br>eg. BrainStorm - MEG and EEG data visualization and processing</p>
<p>CLAWPACK is a software package designed to compute numerical solutions to hyperbolic partial differential equations using a wave propagation approach<br><a href="http://www.amath.washington.edu/~claw/" target="_blank" rel="noopener">http://www.amath.washington.edu/~claw/</a></p>
<p>DIPimage - Image Processing Toolbox</p>
<p>PRTools - Pattern Recognition Toolbox (+ Neural Networks)</p>
<p>NetLab - Neural Network Toolbox</p>
<p>FSTB - Fuzzy Systems Toolbox</p>
<p>Fusetool - Image Fusion Toolbox<br><a href="http://www.metapix.de/toolbox.htm" target="_blank" rel="noopener">http://www.metapix.de/toolbox.htm</a></p>
<p>WAVEKIT - Wavelet Toolbox</p>
<p>Gat - Genetic Algorithm Toolbox</p>
<p>TSTOOL is a MATLAB software package for nonlinear time series analysis.<br>TSTOOL can be used for computing: Time-delay reconstruction, Lyapunov exponents, Fractal dimensions, Mutual information, Surrogate data tests, Nearest neighbor statistics, Return times, Poincare sections, Nonlinear prediction<br><a href="http://www.physik3.gwdg.de/tstool/" target="_blank" rel="noopener">http://www.physik3.gwdg.de/tstool/</a></p>
<p>MATLAB / Data description toolbox<br>A Matlab toolbox for data description, outlier and novelty detection<br>March 26, 2004 - D.M.J. Tax<br><a href="http://www-ict.ewi.tudelft.nl/~davidt/dd_tools/dd_manual.html" target="_blank" rel="noopener">http://www-ict.ewi.tudelft.nl/~davidt/dd_tools/dd_manual.html</a></p>
<p>MBE<br><a href="http://www.pmarneffei.hku.hk/mbetoolbox/" target="_blank" rel="noopener">http://www.pmarneffei.hku.hk/mbetoolbox/</a></p>
<p>Betabolic network toolbox for Matlab<br><a href="http://www.molgen.mpg.de/~lieberme/pages/network_matlab.html" target="_blank" rel="noopener">http://www.molgen.mpg.de/~lieberme/pages/network_matlab.html</a></p>
<p>Pharmacokinetics toolbox for Matlab<br><a href="http://page.inf.fu-berlin.de/~lieber/seiten/pbpk_toolbox.html" target="_blank" rel="noopener">http://page.inf.fu-berlin.de/~lieber/seiten/pbpk_toolbox.html</a></p>
<p>The Spider<br>The spider is intended to be a complete object orientated environment for machine learning in Matlab. Aside from easy use of base learning algorithms, algorithms can be plugged together and can be compared with, e.g model selection, statistical tests and visual plots. This gives all the power of objects (reusability, plug together, share code) but also all the power of Matlab for machine learning research.<br><a href="http://www.kyb.tuebingen.mpg.de/bs/people/spider/index.html" target="_blank" rel="noopener">http://www.kyb.tuebingen.mpg.de/bs/people/spider/index.html</a></p>
<p>Schwarz-Christoffel Toolbox<br><a href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=1316&amp;objectType=file#" target="_blank" rel="noopener">http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=1316&amp;objectType=file#</a></p>
<p>XML Toolbox<br><a href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=4278&amp;objectType=file" target="_blank" rel="noopener">http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=4278&amp;objectType=file</a></p>
<p>FIR/TDNN Toolbox for MATLAB<br>Beta version of a toolbox for FIR (Finite Impulse Response) and TD (Time Delay) Neural Networks.<br><a href="http://www.cs.utep.edu/interval-comp/dagstuhl.03/oish.pdf" target="_blank" rel="noopener">http://www.cs.utep.edu/interval-comp/dagstuhl.03/oish.pdf</a></p>
<p>Misc.</p>
<p><a href="http://www.dcsc.tudelft.nl/Research/Software/index.html" target="_blank" rel="noopener">http://www.dcsc.tudelft.nl/Research/Software/index.html</a></p>
<p>Astronomy</p>
<p>Saturn and Titan trajectories … MALTAB astronomy<br><a href="http://sprg.ssl.berkeley.edu/~abrecht/Matlab-codes/" target="_blank" rel="noopener">http://sprg.ssl.berkeley.edu/~abrecht/Matlab-codes/</a></p>
<p>Audio</p>
<p>MA Toolbox for Matlab Implementing Similarity Measures for Audio<br><a href="http://www.oefai.at/~elias/ma/index.html" target="_blank" rel="noopener">http://www.oefai.at/~elias/ma/index.html</a></p>
<p>MAD - Matlab Auditory Demonstrations<br><a href="http://www.dcs.shef.ac.uk/~martin/MAD/docs/mad.htm" target="_blank" rel="noopener">http://www.dcs.shef.ac.uk/~martin/MAD/docs/mad.htm</a></p>
<p>Music Analysis - Toolbox for Matlab : Feature Extraction from Raw Audio Signals for Content-Based Music Retrieval<br><a href="http://www.ai.univie.ac.at/~elias/ma/" target="_blank" rel="noopener">http://www.ai.univie.ac.at/~elias/ma/</a></p>
<p>WarpTB - Matlab Toolbox for Warped DSP<br>By Aki H?rm? and Matti Karjalainen<br><a href="http://www.acoustics.hut.fi/software/warp/" target="_blank" rel="noopener">http://www.acoustics.hut.fi/software/warp/</a></p>
<p>MATLAB-related Software<br><a href="http://www.dpmi.tu-graz.ac.at/~schloegl/matlab/" target="_blank" rel="noopener">http://www.dpmi.tu-graz.ac.at/~schloegl/matlab/</a></p>
<p>Biomedical Signal data formats (EEG machine specific file formats with Matlab import routines)<br><a href="http://www.dpmi.tu-graz.ac.at/~schloegl/matlab/eeg/" target="_blank" rel="noopener">http://www.dpmi.tu-graz.ac.at/~schloegl/matlab/eeg/</a></p>
<p>MPEG Encoding library for MATLAB Movies (Created by David Foti)<br>It enables MATLAB users to read (MPGREAD) or write (MPGWRITE) MPEG movies. That should help Video Quality project.</p>
<p>Filter Design package<br><a href="http://www.ee.ryerson.ca:8080/~mzeytin/dfp/index.html" target="_blank" rel="noopener">http://www.ee.ryerson.ca:8080/~mzeytin/dfp/index.html</a></p>
<p>Octave by Christophe COUVREUR (Generates normalized A-weigthing, C-weighting, octave and one-third-octave digital filters)<br><a href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectType=file&amp;objectId=69" target="_blank" rel="noopener">http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectType=file&amp;objectId=69</a></p>
<p>Source Coding MATLAB Toolbox<br><a href="http://www.ece.umn.edu/users/kieffer/programs.html" target="_blank" rel="noopener">http://www.ece.umn.edu/users/kieffer/programs.html</a></p>
<p>Bio Medical Informatics (Top)</p>
<p>CGH-Plotter: MATLAB Toolbox for CGH-data Analysis<br>Code: <a href="http://sigwww.cs.tut.fi/TICSP/CGH-Plotter/" target="_blank" rel="noopener">http://sigwww.cs.tut.fi/TICSP/CGH-Plotter/</a><br>Poster: <a href="http://sigwww.cs.tut.fi/TICSP/CSB2003/Posteri_CGH_Plotter.pdf" target="_blank" rel="noopener">http://sigwww.cs.tut.fi/TICSP/CSB2003/Posteri_CGH_Plotter.pdf</a></p>
<p>The Brain Imaging Software Toolbox<br><a href="http://www.bic.mni.mcgill.ca/software/" target="_blank" rel="noopener">http://www.bic.mni.mcgill.ca/software/</a></p>
<p>MRI Brain Segmentation<br><a href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=4879" target="_blank" rel="noopener">http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=4879</a></p>
<p>Chemometrics (providing PCA) (Top)</p>
<p>Matlab Molecular Biology &amp; Evolution Toolbox<br>(Toolbox Enables Evolutionary Biologists to Analyze and View DNA and Protein Sequences)<br>James J. Cai<br><a href="http://www.pmarneffei.hku.hk/mbetoolbox/" target="_blank" rel="noopener">http://www.pmarneffei.hku.hk/mbetoolbox/</a></p>
<p>Toolbox provided by Prof. Massart research group<br><a href="http://minf.vub.ac.be/~fabi/publiek/" target="_blank" rel="noopener">http://minf.vub.ac.be/~fabi/publiek/</a></p>
<p>Useful collection of routines from Prof age smilde research group<br><a href="http://www-its.chem.uva.nl/research/pac" target="_blank" rel="noopener">http://www-its.chem.uva.nl/research/pac</a></p>
<p>Multivariate Toolbox written by Rune Mathisen<br><a href="http://www.bitjungle.com/~mvartools/index.html" target="_blank" rel="noopener">http://www.bitjungle.com/~mvartools/index.html</a></p>
<p>Matlab code and datasets<br><a href="http://www.acc.umu.se/~tnkjtg/chemometrics/dataset.html" target="_blank" rel="noopener">http://www.acc.umu.se/~tnkjtg/chemometrics/dataset.html</a></p>
<p>Chaos (Top)</p>
<p>Chaotic Systems Toolbox<br><a href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=1597&amp;objectType=file#" target="_blank" rel="noopener">http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=1597&amp;objectType=file#</a></p>
<p>HOSA Toolbox<br><a href="http://www.mathworks.nl/matlabcentral/fileexchange/loadFile.do?objectId=3013&amp;objectType=file" target="_blank" rel="noopener">http://www.mathworks.nl/matlabcentral/fileexchange/loadFile.do?objectId=3013&amp;objectType=file</a></p>
<p>Chemistry (Top)</p>
<p>MetMAP - (Metabolical Modeling, Analysis and oPtimization alias Met. M. A. P.)<br><a href="http://webpages.ull.es/users/sympbst/pag_ing/pag_metmap/index.htm" target="_blank" rel="noopener">http://webpages.ull.es/users/sympbst/pag_ing/pag_metmap/index.htm</a></p>
<p>DoseLab - A set of software programs for quantitative comparison of measured and computed radiation dose distributions<br><a href="http://doselab.sourceforge.net" target="_blank" rel="noopener">http://doselab.sourceforge.net</a></p>
<p>GenBank Overview<br><a href="http://www.ncbi.nlm.nih.gov/Genbank/GenbankOverview.html" target="_blank" rel="noopener">http://www.ncbi.nlm.nih.gov/Genbank/GenbankOverview.html</a><br>Matlab: <a href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=1139" target="_blank" rel="noopener">http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=1139</a></p>
<p>Coding</p>
<p>Code for the estimation of Scaling Exponents<br><a href="http://www.cubinlab.ee.mu.oz.au/~darryl/secondorder_code.html" target="_blank" rel="noopener">http://www.cubinlab.ee.mu.oz.au/~darryl/secondorder_code.html</a></p>
<p>Control (Top)</p>
<p>Control Tutorial for Matlab<br><a href="http://www.engin.umich.edu/group/ctm/" target="_blank" rel="noopener">http://www.engin.umich.edu/group/ctm/</a></p>
<p>Another</p>
<p>Communications (Top)</p>
<p>Channel Learning Architecture toolbox<br>(This Matlab toolbox is a supplement to the article “HiperLearn: A High Performance Learning Architecture”)<br><a href="http://www.isy.liu.se/cvl/Projects/hiperlearn/" target="_blank" rel="noopener">http://www.isy.liu.se/cvl/Projects/hiperlearn/</a></p>
<p>Source Coding MATLAB Toolbox<br><a href="http://www.ece.umn.edu/users/kieffer/programs.html" target="_blank" rel="noopener">http://www.ece.umn.edu/users/kieffer/programs.html</a></p>
<p>TCP/UDP/IP Toolbox 2.0.4<br><a href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=345&amp;objectType=file" target="_blank" rel="noopener">http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=345&amp;objectType=file</a></p>
<p>Home Networking Basis: Transmission Environments and Wired/Wireless Protocols<br>Walter Y. Chen<br><a href="http://www.mathworks.com/support/books/book5295.jsp?category=new&amp;language=-1" target="_blank" rel="noopener">http://www.mathworks.com/support/books/book5295.jsp?category=new&amp;language=-1</a></p>
<p>MATLAB M-files and Simulink models<br><a href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=3834&amp;objectType=file" target="_blank" rel="noopener">http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=3834&amp;objectType=file</a></p>
<p>Engineering (Top)</p>
<p>OPNML/MATLAB Facilities<br><a href="http://www.opnml.unc.edu/OPNML_Matlab/" target="_blank" rel="noopener">http://www.opnml.unc.edu/OPNML_Matlab/</a></p>
<p>Mesh Generation<br><a href="http://www.cs.cornell.edu/home/vavasis/qmg-home.html" target="_blank" rel="noopener">http://www.cs.cornell.edu/home/vavasis/qmg-home.html</a></p>
<p>OpenFEM : An Open-Source Finite Element Toolbox<br><a href="http://www.openfem.net/" target="_blank" rel="noopener">http://www.openfem.net/</a></p>
<p>CALFEM is an interactive computer program for teaching the finite element method (FEM)<br><a href="http://www.byggmek.lth.se/Calfem/frinfo.htm" target="_blank" rel="noopener">http://www.byggmek.lth.se/Calfem/frinfo.htm</a></p>
<p>The Engineering Vibration Toolbox<br><a href="http://www.cs.wright.edu/people/faculty/jslater/vtoolbox/vtoolbox.html" target="_blank" rel="noopener">http://www.cs.wright.edu/people/faculty/jslater/vtoolbox/vtoolbox.html</a></p>
<p>SaGA - Spatial and Geometric Analysis Toolbox<br>by Kirill K. Pankratov<br><a href="http://puddle.mit.edu/~glenn/kirill/saga.html" target="_blank" rel="noopener">http://puddle.mit.edu/~glenn/kirill/saga.html</a></p>
<p>MexCDF and NetCDF Toolbox For Matlab-5&amp;6<br><a href="http://woodshole.er.usgs.gov/staffpages/cdenham/public_html/MexCDF/nc4ml5.html" target="_blank" rel="noopener">http://woodshole.er.usgs.gov/staffpages/cdenham/public_html/MexCDF/nc4ml5.html</a></p>
<p>CUEDSID: Cambridge University System Identification Toolbox<br><a href="http://www-control.eng.cam.ac.uk/jmm/cuedsid/" target="_blank" rel="noopener">http://www-control.eng.cam.ac.uk/jmm/cuedsid/</a></p>
<p>Kriging Toolbox<br><a href="http://www.ai-geostats.org/software/Geostats_software/MATLAB_KRIGING_TOOLBOX.htm" target="_blank" rel="noopener">http://www.ai-geostats.org/software/Geostats_software/MATLAB_KRIGING_TOOLBOX.htm</a></p>
<p>Monte Carlo (Dr Nando)<br><a href="http://www.cs.ubc.ca/~nando/software.html" target="_blank" rel="noopener">http://www.cs.ubc.ca/~nando/software.html</a></p>
<p>RIOTS - The Most Powerful Optimal Control Problem Solver<br><a href="http://blank.hypersurf.com/~adam/RIOTS/" target="_blank" rel="noopener">http://blank.hypersurf.com/~adam/RIOTS/</a></p>
<p>Excel</p>
<p>MATLAB xlsheets<br><a href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=4474&amp;objectType=file" target="_blank" rel="noopener">http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=4474&amp;objectType=file</a></p>
<p>write2excel<br><a href="http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=4414&amp;objectType=file" target="_blank" rel="noopener">http://www.mathworks.com/matlabcentral/fileexchange/loadFile.do?objectId=4414&amp;objectType=file</a></p>
<p>Finite Element Modeling (FEM) (Top)</p>
<p>OpenFEM - An Open-Source Finite Element Toolbox<br><a href="http://www.openfem.net/" target="_blank" rel="noopener">http://www.openfem.net/</a></p>
<p>NLFET - nonlinear finite element toolbox for MATLAB ( framework for setting up, solving, and interpreting results for nonlinear static and dynamic finite element analysis.)<br><a href="http://nlfet.sourceforge.net/" target="_blank" rel="noopener">http://nlfet.sourceforge.net/</a></p>
<p>GetFEM - C++ library for finite element methods elementary computations with a Matlab interface<br><a href="http://www.gmm.insa-tlse.fr/getfem/" target="_blank" rel="noopener">http://www.gmm.insa-tlse.fr/getfem/</a></p>
<p>FELIPE - FEA package to view results ( contains neat interface to MATLA<br><a href="http://www.brunel.ac.uk/~blstmbr/felipe/" target="_blank" rel="noopener">http://www.brunel.ac.uk/~blstmbr/felipe/</a></p>
<p>Finance (Top)</p>
<p>A NEW MATLAB-BASED TOOLBOX FOR COMPUTER AIDED DYNAMIC TECHNICAL TRADING<br>Stephanos Papadamou and George Stephanides<br>Department of Applied Informatics, University Of Macedonia Economic &amp; Social Sciences, Thessaloniki, Greece<br><a href="http://www.fenews.com/fen31/one_time_articles/dynamic_tech_trade_matlab6.htm" target="_blank" rel="noopener">http://www.fenews.com/fen31/one_time_articles/dynamic_tech_trade_matlab6.htm</a><br>Paper: <a href="http://econwpa.wustl.edu:8089/eps/prog/papers/0201/0201001.pdf" target="_blank" rel="noopener">http://econwpa.wustl.edu:8089/eps/prog/papers/0201/0201001.pdf</a></p>
<p>CompEcon Toolbox for Matlab<br><a href="http://www4.ncsu.edu/~pfackler/compecon/toolbox.html" target="_blank" rel="noopener">http://www4.ncsu.edu/~pfackler/compecon/toolbox.html</a></p>
<p>Genetic Algorithms (Top)</p>
<p>The Genetic Algorithm Optimization Toolbox (GAOT) for Matlab 5<br><a href="http://www.ie.ncsu.edu/mirage/GAToolBox/gaot/" target="_blank" rel="noopener">http://www.ie.ncsu.edu/mirage/GAToolBox/gaot/</a></p>
<p>Genetic Algorithm Toolbox<br>Written &amp; distributed by Andy Chipperfield (Sheffield University, UK)<br><a href="http://www.shef.ac.uk/uni/projects/gaipp/gatbx.html" target="_blank" rel="noopener">http://www.shef.ac.uk/uni/projects/gaipp/gatbx.html</a><br>Manual: <a href="http://www.shef.ac.uk/~gaipp/ga-toolbox/manual.pdf" target="_blank" rel="noopener">http://www.shef.ac.uk/~gaipp/ga-toolbox/manual.pdf</a></p>
<p>Genetic and Evolutionary Algorithm Toolbox (GEATbx)<br><a href="http://www.geatbx.com" target="_blank" rel="noopener">http://www.geatbx.com</a></p>
<p>Evolutionary Algorithms for MATLAB<br><a href="http://www.geatbx.com/links/ea_matlab.html" target="_blank" rel="noopener">http://www.geatbx.com/links/ea_matlab.html</a></p>
<p>Genetic/Evolutionary Algorithms for MATLAB<br><a href="http://www.systemtechnik.tu-ilmenau.de/~pohlheim/EA_Matlab/ea_matlab.html" target="_blank" rel="noopener">http://www.systemtechnik.tu-ilmenau.de/~pohlheim/EA_Matlab/ea_matlab.html</a></p>
<p>Graphics</p>
<p>VideoToolbox (C routines for visual psychophysics on Macs by Denis Pelli)<br><a href="http://vision.nyu.edu/VideoToolbox/" target="_blank" rel="noopener">http://vision.nyu.edu/VideoToolbox/</a><br>Paper: <a href="http://psych.nyu.edu/pelli/pubs/pelli1997videotoolbox.pdf" target="_blank" rel="noopener">http://psych.nyu.edu/pelli/pubs/pelli1997videotoolbox.pdf</a></p>
<p>4D toolbox<br><a href="http://www.nmr.mgh.harvard.edu/~daniel/links/matlab/4DToolbox.html" target="_blank" rel="noopener">http://www.nmr.mgh.harvard.edu/~daniel/links/matlab/4DToolbox.html</a></p>
<p>Images (Top)</p>
<p>Eyelink Toolbox<br><a href="http://psychtoolbox.org/eyelinktoolbox/" target="_blank" rel="noopener">http://psychtoolbox.org/eyelinktoolbox/</a><br>Paper: <a href="http://psychtoolbox.org/eyelinktoolbox/EyelinkToolbox.pdf" target="_blank" rel="noopener">http://psychtoolbox.org/eyelinktoolbox/EyelinkToolbox.pdf</a></p>
<p>CellStats: Automated statistical analysis of color-stained cell images in Matlab<br><a href="http://sigwww.cs.tut.fi/TICSP/CellStats/" target="_blank" rel="noopener">http://sigwww.cs.tut.fi/TICSP/CellStats/</a></p>
<p>SDC Morphology Toolbox for MATLAB (powerful collection of latest state-of-the-art gray-scale morphological tools that can be applied to image segmentation, non-linear filtering, pattern recognition and image analysis)<br><a href="http://www.mmorph.com/" target="_blank" rel="noopener">http://www.mmorph.com/</a></p>
<p>Image Acquisition Toolbox<br><a href="http://www.mathworks.com/products/imaq/" target="_blank" rel="noopener">http://www.mathworks.com/products/imaq/</a></p>
<p>Halftoning Toolbox for MATLAB<br><a href="http://www.ece.utexas.edu/~bevans/projects/halftoning/toolbox/index.html" target="_blank" rel="noopener">http://www.ece.utexas.edu/~bevans/projects/halftoning/toolbox/index.html</a></p>
<p>DIPimage - A Scientific Image Processing Toolbox for MATLAB<br><a href="http://www.ph.tn.tudelft.nl/DIPlib/dipimage_1.html" target="_blank" rel="noopener">http://www.ph.tn.tudelft.nl/DIPlib/dipimage_1.html</a></p>
<p>PNM Toolbox<br><a href="http://home.online.no/~pjacklam/matlab/software/pnm/index.html" target="_blank" rel="noopener">http://home.online.no/~pjacklam/matlab/software/pnm/index.html</a></p>
<p>Another</p>
<p>ICA / KICA and KPCA (Top)</p>
<p>ICATU Toolbox<br><a href="http://mole.imm.dtu.dk/toolbox/menu.html" target="_blank" rel="noopener">http://mole.imm.dtu.dk/toolbox/menu.html</a></p>
<p>MISEP Linear and Nonlinear ICA Toolbox<br><a href="http://neural.inesc-id.pt/~lba/ica/mitoolbox.html" target="_blank" rel="noopener">http://neural.inesc-id.pt/~lba/ica/mitoolbox.html</a></p>
<p>Kernel Independant Component Analysis<br><a href="http://www.cs.berkeley.edu/~fbach/kernel-ica/index.htm" target="_blank" rel="noopener">http://www.cs.berkeley.edu/~fbach/kernel-ica/index.htm</a><br>Matlab: kernel-ica version 1.2</p>
<p>KPCA- Please check the software section of kernel machines.</p>
<p>Kernel</p>
<p>Statistical Pattern Recognition Toolbox<br><a href="http://cmp.felk.cvut.cz/~xfrancv/stprtool/" target="_blank" rel="noopener">http://cmp.felk.cvut.cz/~xfrancv/stprtool/</a></p>
<p>MATLABArsenal A MATLAB Wrapper for Classification<br><a href="http://finalfantasyxi.inf.cs.cmu.edu/tmp/MATLABArsenal.htm" target="_blank" rel="noopener">http://finalfantasyxi.inf.cs.cmu.edu/tmp/MATLABArsenal.htm</a></p>
<p>Markov (Top)</p>
<p>MapHMMBOX 1.1 - Matlab toolbox for Hidden Markov Modelling using Max. Aposteriori EM<br>Prerequisites: Matlab 5.0, Netlab. Last Updated: 18 March 2002.<br><a href="http://www.robots.ox.ac.uk/~parg/software/maphmmbox_1_1.tar" target="_blank" rel="noopener">http://www.robots.ox.ac.uk/~parg/software/maphmmbox_1_1.tar</a></p>
<p>HMMBOX 4.1 - Matlab toolbox for Hidden Markov Modelling using Variational Bayes<br>Prerequisites: Matlab 5.0,Netlab. Last Updated: 15 February 2002..<br><a href="http://www.robots.ox.ac.uk/~parg/software/hmmbox_3_2.tar" target="_blank" rel="noopener">http://www.robots.ox.ac.uk/~parg/software/hmmbox_3_2.tar</a><br><a href="http://www.robots.ox.ac.uk/~parg/software/hmmbox_4_1.tar" target="_blank" rel="noopener">http://www.robots.ox.ac.uk/~parg/software/hmmbox_4_1.tar</a></p>
<p>Markov Decision Process (MDP) Toolbox for Matlab<br>Kevin Murphy, 1999<br><a href="http://www.ai.mit.edu/~murphyk/Software/MDP/MDP.zip" target="_blank" rel="noopener">http://www.ai.mit.edu/~murphyk/Software/MDP/MDP.zip</a></p>
<p>Markov Decision Process (MDP) Toolbox v1.0 for MATLAB<br><a href="http://www.inra.fr/bia/T/MDPtoolbox/" target="_blank" rel="noopener">http://www.inra.fr/bia/T/MDPtoolbox/</a></p>
<p>Hidden Markov Model (HMM) Toolbox for Matlab<br><a href="http://www.ai.mit.edu/~murphyk/Software/HMM/hmm.html" target="_blank" rel="noopener">http://www.ai.mit.edu/~murphyk/Software/HMM/hmm.html</a></p>
<p>Bayes Net Toolbox for Matlab<br><a href="http://www.ai.mit.edu/~murphyk/Software/BNT/bnt.html" target="_blank" rel="noopener">http://www.ai.mit.edu/~murphyk/Software/BNT/bnt.html</a></p>
<p>Medical (Top)</p>
<p>EEGLAB Open Source Matlab Toolbox for Physiological Research (formerly ICA/EEG Matlab toolbox)<br><a href="http://www.sccn.ucsd.edu/~scott/ica.html" target="_blank" rel="noopener">http://www.sccn.ucsd.edu/~scott/ica.html</a></p>
<p>MATLAB Biomedical Signal Processing Toolbox<br><a href="http://bsp.pdx.edu/Toolbox/" target="_blank" rel="noopener">http://bsp.pdx.edu/Toolbox/</a></p>
<p>Powerful package for neurophysiological data analysis ( Igor Kagan webpage)<br><a href="http://igoresha.virtualave.net/Matlab/Unitret.html" target="_blank" rel="noopener">http://igoresha.virtualave.net/Matlab/Unitret.html</a></p>
<p>EEG / MRI Matlab Toolbox<br><a href="http://eeg.sourceforge.net/" target="_blank" rel="noopener">http://eeg.sourceforge.net/</a></p>
<p>Microarray data analysis toolbox (MDAT): for normalization, adjustment and analysis of gene expression data.<br>Knowlton N, Dozmorov IM, Centola M. Department of Arthritis and Immunology, Oklahoma Medical Research Foundation, Oklahoma City, OK, USA 73104. We introduce a novel Matlab toolbox for microarray data analysis. This toolbox uses normalization based upon a normally distributed background and differential gene expression based on 5 statistical measures. The objects in this toolbox are open source and can be implemented to suit your application. AVAILABILITY: MDAT v1.0 is a Matlab toolbox and requires Matlab to run. MDAT is freely available at:<br><a href="http://microarray.omrf.org/publications/2004/knowlton/MDAT.zip" target="_blank" rel="noopener">http://microarray.omrf.org/publications/2004/knowlton/MDAT.zip</a></p>
<p>MIDI (Top)</p>
<p>MIDI Toolbox version 1.0 (GNU General Public License)<br><a href="http://www.jyu.fi/musica/miditoolbox/" target="_blank" rel="noopener">http://www.jyu.fi/musica/miditoolbox/</a></p>
<p>Misc. (Top)</p>
<p>MATLAB-The Graphing Tool<br><a href="http://sprg.ssl.berkeley.edu/~abrecht/matlab.html" target="_blank" rel="noopener">http://sprg.ssl.berkeley.edu/~abrecht/matlab.html</a></p>
<p>3-D Circuits The Circuit Animation Toolbox for MATLAB<br><a href="http://engineering.dartmouth.edu/other/3Dcircuits/" target="_blank" rel="noopener">http://engineering.dartmouth.edu/other/3Dcircuits/</a></p>
<p>SendMail<br><a href="http://carol.wins.uva.nl/~portegie/matlab/sendmail/" target="_blank" rel="noopener">http://carol.wins.uva.nl/~portegie/matlab/sendmail/</a></p>
<p>Coolplot<br><a href="http://www.reimeika.ca/marco/matlab/coolplots.html" target="_blank" rel="noopener">http://www.reimeika.ca/marco/matlab/coolplots.html</a></p>
<p>MPI (Matlab Parallel Interface)</p>
<p>Cornell Multitask Toolbox for MATLAB<br><a href="http://www.tc.cornell.edu/Services/Software/CMTM/" target="_blank" rel="noopener">http://www.tc.cornell.edu/Services/Software/CMTM/</a></p>
<p>Beolab Toolbox for v6.5<br>Thomas Abrahamsson (Professor, Chalmers University of Technology, Applied Mechanics, G?teborg, Sweden)<br><a href="http://www.mathworks.nl/matlabcentral/fileexchange/loadFile.do?objectId=1216&amp;objectType=file" target="_blank" rel="noopener">http://www.mathworks.nl/matlabcentral/fileexchange/loadFile.do?objectId=1216&amp;objectType=file</a></p>
<p>PARMATLAB</p>
<p>Neural Networks (Top)</p>
<p>SOM Toolbox<br><a href="http://www.cis.hut.fi/projects/somtoolbox/" target="_blank" rel="noopener">http://www.cis.hut.fi/projects/somtoolbox/</a></p>
<p>Bayes Net Toolbox for Matlab<br><a href="http://www.ai.mit.edu/~murphyk/Software/BNT/bnt.html" target="_blank" rel="noopener">http://www.ai.mit.edu/~murphyk/Software/BNT/bnt.html</a></p>
<p>NetLab<br><a href="http://www.ncrg.aston.ac.uk/netlab/" target="_blank" rel="noopener">http://www.ncrg.aston.ac.uk/netlab/</a></p>
<p>Random Neural Networks<br><a href="http://www.cs.ucf.edu/~ahossam/rnnsimv2/" target="_blank" rel="noopener">http://www.cs.ucf.edu/~ahossam/rnnsimv2/</a><br>ftp:</p>
<p>NNSYSID Toolbox (tools for neural network based identification of nonlinear dynamic systems)<br><a href="http://www.iau.dtu.dk/research/control/nnsysid.html" target="_blank" rel="noopener">http://www.iau.dtu.dk/research/control/nnsysid.html</a></p>
<p>Oceanography (Top)</p>
<p>WAFO. Wave Analysis for Fatigue and Oceanography<br><a href="http://www.maths.lth.se/matstat/wafo/" target="_blank" rel="noopener">http://www.maths.lth.se/matstat/wafo/</a></p>
<p>ADCP toolbox for MATLAB (USGS, USA)<br>Presented at the Hydroacoustics Workshop in Tampa and at ADCP’s in Action in San Diego<br><a href="http://woodshole.er.usgs.gov/operations/stg/pubs/ADCPtools" target="_blank" rel="noopener">http://woodshole.er.usgs.gov/operations/stg/pubs/ADCPtools</a></p>
<p>SEA-MAT - Matlab Tools for Oceanographic Analysis<br>A collaborative effort to organize and distribute Matlab tools for the Oceanographic Community<br><a href="http://sea-mat.whoi.edu/" target="_blank" rel="noopener">http://sea-mat.whoi.edu/</a></p>
<p>Ocean Toolbox<br><a href="http://www.mar.dfo-mpo.gc.ca/science/ocean/epsonde/programming.html" target="_blank" rel="noopener">http://www.mar.dfo-mpo.gc.ca/science/ocean/epsonde/programming.html</a></p>
<p>EUGENE D. GALLAGHER<br>(Associate Professor, Environmental, Coastal &amp; Ocean Sciences)<br><a href="http://www.es.umb.edu/edgwebp.htm" target="_blank" rel="noopener">http://www.es.umb.edu/edgwebp.htm</a></p>
<p>Optimization (Top)</p>
<p>MODCONS - a MATLAB Toolbox for Multi-Objective Control System Design<br><a href="http://www.eee.kcl.ac.uk/mecheng/jfw/modcons.html" target="_blank" rel="noopener">http://www.eee.kcl.ac.uk/mecheng/jfw/modcons.html</a></p>
<p>Lazy Learning Package<br><a href="http://iridia.ulb.ac.be/~lazy/" target="_blank" rel="noopener">http://iridia.ulb.ac.be/~lazy/</a></p>
<p>SDPT3 version 3.02 — a MATLAB software for semidefinite-quadratic-linear programming<br><a href="http://www.math.nus.edu.sg/~mattohkc/sdpt3.html" target="_blank" rel="noopener">http://www.math.nus.edu.sg/~mattohkc/sdpt3.html</a></p>
<p>Minimum Enclosing Balls: Matlab Code<br><a href="http://www.compgeom.com/meb/" target="_blank" rel="noopener">http://www.compgeom.com/meb/</a></p>
<p>SOSTOOLS Sum of Squares Optimization Toolbox for MATLAB User’s guide<br><a href="http://www.cds.caltech.edu/sostools/sostools.pdf" target="_blank" rel="noopener">http://www.cds.caltech.edu/sostools/sostools.pdf</a></p>
<p>PSOt - a Particle Swarm Optimization Toolbox for use with Matlab<br>By Brian Birge … A Particle Swarm Optimization Toolbox (PSOt) for use with the Matlab scientific programming environment has been developed. PSO is<br>introduced briefly and then the use of the toolbox is explained with some examples. A link to downloadable code is provided.</p>
<p>Plot</p>
<p><a href="http://globec.whoi.edu/software/plotting/gbplot/" target="_blank" rel="noopener">http://globec.whoi.edu/software/plotting/gbplot/</a></p>
<p>Signal Processing (Top)</p>
<p>Filter Design with Motorola DSP56K<br><a href="http://www.ee.ryerson.ca:8080/~mzeytin/dfp/index.html" target="_blank" rel="noopener">http://www.ee.ryerson.ca:8080/~mzeytin/dfp/index.html</a></p>
<p>Change Detection and Adaptive Filtering Toolbox<br><a href="http://www.sigmoid.se/" target="_blank" rel="noopener">http://www.sigmoid.se/</a></p>
<p>Signal Processing Toolbox<br><a href="http://www.mathworks.com/products/signal/" target="_blank" rel="noopener">http://www.mathworks.com/products/signal/</a></p>
<p>ICATU Toolbox<br><a href="http://mole.imm.dtu.dk/toolbox/menu.html" target="_blank" rel="noopener">http://mole.imm.dtu.dk/toolbox/menu.html</a></p>
<p>Time-Frequency Toolbox for Matlab<br><a href="http://crttsn.univ-nantes.fr/~auger/tftb.html" target="_blank" rel="noopener">http://crttsn.univ-nantes.fr/~auger/tftb.html</a></p>
<p>VoiceBox - Speech Processing Toolbox<br><a href="http://www.ee.ic.ac.uk/hp/staff/dmb/voicebox/voicebox.html" target="_blank" rel="noopener">http://www.ee.ic.ac.uk/hp/staff/dmb/voicebox/voicebox.html</a></p>
<p>Least Squared - Support Vector Machines (LS-SVM)<br><a href="http://www.esat.kuleuven.ac.be/sista/lssvmlab/" target="_blank" rel="noopener">http://www.esat.kuleuven.ac.be/sista/lssvmlab/</a></p>
<p>WaveLab802 : the Wavelet Toolbox<br>By David Donoho, Mark Reynold Duncan, Xiaoming Huo, Ofer Levi<br><a href="http://www-stat.stanford.edu/~wavelab/" target="_blank" rel="noopener">http://www-stat.stanford.edu/~wavelab/</a></p>
<p>Time-series Matlab scripts<br><a href="http://wise-obs.tau.ac.il/~eran/MATLAB/TimeseriesCon.html" target="_blank" rel="noopener">http://wise-obs.tau.ac.il/~eran/MATLAB/TimeseriesCon.html</a></p>
<p>Uvi_Wave Wavelet Toolbox Home Page<br><a href="http://www.gts.tsc.uvigo.es/~wavelets/index.html" target="_blank" rel="noopener">http://www.gts.tsc.uvigo.es/~wavelets/index.html</a></p>
<p>Another</p>
<p>Support Vector Machine (Top)</p>
<p>MATLAB Support Vector Machine Toolbox<br>Dr Gavin Cawley<br>School of Information Systems, University of East Anglia<br><a href="http://theoval.sys.uea.ac.uk/~gcc/svm/toolbox/" target="_blank" rel="noopener">http://theoval.sys.uea.ac.uk/~gcc/svm/toolbox/</a></p>
<p>LS-SVM - SISTA</p>
<p>SVM toolboxes<br><a href="http://www.cs.wisc.edu/dmi/svm/" target="_blank" rel="noopener">http://www.cs.wisc.edu/dmi/svm/</a></p>
<p>LSVM Lagrangian Support Vector Machine<br><a href="http://www.cs.wisc.edu/dmi/lsvm/" target="_blank" rel="noopener">http://www.cs.wisc.edu/dmi/lsvm/</a></p>
<p>Statistics (Top)</p>
<p>Logistic regression<br><a href="http://www.spatial-econometrics.com/" target="_blank" rel="noopener">http://www.spatial-econometrics.com/</a></p>
<p>SAGA<br><a href="http://globec.whoi.edu/software/saga/" target="_blank" rel="noopener">http://globec.whoi.edu/software/saga/</a></p>
<p>Multi-Parametric Toolbox (MPT) A tool (not only) for multi-parametric optimization.<br><a href="http://control.ee.ethz.ch/~mpt/" target="_blank" rel="noopener">http://control.ee.ethz.ch/~mpt/</a></p>
<p>ARfit: A Matlab package for the estimation of parameters and eigenmodes of multivariate autoregressive models<br><a href="http://www.mat.univie.ac.at/~neum/software/arfit/" target="_blank" rel="noopener">http://www.mat.univie.ac.at/~neum/software/arfit/</a></p>
<p>The Dimensional Analysis Toolbox for MATLAB<br>Home: <a href="http://www.sbrs.de/" target="_blank" rel="noopener">http://www.sbrs.de/</a><br>Paper: <a href="http://www.isd.uni-stuttgart.de/~brueckner/Papers/similarity2002.pdf" target="_blank" rel="noopener">http://www.isd.uni-stuttgart.de/~brueckner/Papers/similarity2002.pdf</a></p>
<p>FATHOM for Matlab<br><a href="http://www.rsmas.miami.edu/personal/djones/" target="_blank" rel="noopener">http://www.rsmas.miami.edu/personal/djones/</a></p>
<p>PLS-toolbox<br><a href="http://www.eigenvector.com" target="_blank" rel="noopener">http://www.eigenvector.com</a></p>
<p>Multivariate analysis toolbox (N-way Toolbox - paper)<br><a href="http://www.models.kvl.dk/source/nwaytoolbox/index.asp" target="_blank" rel="noopener">http://www.models.kvl.dk/source/nwaytoolbox/index.asp</a></p>
<p>Classification Toolbox for Matlab<br><a href="http://tiger.technion.ac.il/~eladyt/classification/index.htm" target="_blank" rel="noopener">http://tiger.technion.ac.il/~eladyt/classification/index.htm</a></p>
<p>Matlab toolbox for Robust Calibration<br><a href="http://www.wis.kuleuven.ac.be/stat/robust/toolbox.html" target="_blank" rel="noopener">http://www.wis.kuleuven.ac.be/stat/robust/toolbox.html</a></p>
<p>Statistical Parametric Mapping<br><a href="http://www.fil.ion.ucl.ac.uk/spm/spm2.html" target="_blank" rel="noopener">http://www.fil.ion.ucl.ac.uk/spm/spm2.html</a></p>
<p>EVIM: A Software Package for Extreme Value Analysis in Matlab<br>by Ramazan Gen?ay, Faruk Selcuk and Abdurrahman Ulugulyagci, 2001.<br>Manual (pdf file) evim.pdf - Software (zip file) evim.zip</p>
<p>Time Series Analysis<br><a href="http://www.dpmi.tu-graz.ac.at/~schloegl/matlab/tsa/" target="_blank" rel="noopener">http://www.dpmi.tu-graz.ac.at/~schloegl/matlab/tsa/</a></p>
<p>Bayes Net Toolbox for Matlab<br>Written by Kevin Murphy<br><a href="http://www.ai.mit.edu/~murphyk/Software/BNT/bnt.html" target="_blank" rel="noopener">http://www.ai.mit.edu/~murphyk/Software/BNT/bnt.html</a><br>Other: <a href="http://www.isp.pitt.edu/information/toolboxes.html" target="_blank" rel="noopener">http://www.isp.pitt.edu/information/toolboxes.html</a></p>
<p>ARfit: A Matlab package for the estimation of parameters and eigenmodes of multivariate autoregressive models<br><a href="http://www.gps.caltech.edu/~tapio/arfit/" target="_blank" rel="noopener">http://www.gps.caltech.edu/~tapio/arfit/</a></p>
<p>M-Fit<br><a href="http://www.ill.fr/tas/matlab/doc/mfit4/mfit.html" target="_blank" rel="noopener">http://www.ill.fr/tas/matlab/doc/mfit4/mfit.html</a></p>
<p>Dimensional Analysis Toolbox for Matlab<br><a href="http://www.sbrs.net/" target="_blank" rel="noopener">http://www.sbrs.net/</a></p>
<p>The NaN-toolbox: A statistic-toolbox for Octave and Matlab?<br>… handles data with and without MISSING VALUES.<br><a href="http://www-dpmi.tu-graz.ac.at/~schloegl/matlab/NaN/" target="_blank" rel="noopener">http://www-dpmi.tu-graz.ac.at/~schloegl/matlab/NaN/</a></p>
<p>Iterative Methods for Optimization: Matlab Codes<br><a href="http://www4.ncsu.edu/~ctk/matlab_darts.html" target="_blank" rel="noopener">http://www4.ncsu.edu/~ctk/matlab_darts.html</a></p>
<p>Multiscale Shape Analysis (MSA) Matlab Toolbox 2000<br><a href="http://www.vision.ime.usp.br/~cesar/projects/multiscale/" target="_blank" rel="noopener">http://www.vision.ime.usp.br/~cesar/projects/multiscale/</a></p>
<p>Multivariate Ecological &amp; Oceanographic Data Analysis (FATHOM)<br>From David Jones<br><a href="http://www.rsmas.miami.edu/personal/djones/" target="_blank" rel="noopener">http://www.rsmas.miami.edu/personal/djones/</a></p>
<p>glmlab (Generalized Linear Models in MATLA<br><a href="http://www.sci.usq.edu.au/staff/dunn/glmlab/glmlab.html" target="_blank" rel="noopener">http://www.sci.usq.edu.au/staff/dunn/glmlab/glmlab.html</a></p>
<p><a href="http://www.wis.kuleuven.ac.be/stat/robust/toolbox.html" target="_blank" rel="noopener">http://www.wis.kuleuven.ac.be/stat/robust/toolbox.html</a></p>
<p><a href="http://www.supercrawler.com/Science/Math/Software/MATLAB/" target="_blank" rel="noopener">http://www.supercrawler.com/Science/Math/Software/MATLAB/</a></p>
<p>svm</p>
<p>SVM and Kernel Methods Matlab Toolbox<br><a href="http://asi.insa-rouen.fr/~arakotom/toolbox/index" target="_blank" rel="noopener">http://asi.insa-rouen.fr/~arakotom/toolbox/index</a> </p>
<p>MATLAB Support Vector Machine Toolbox<br>Dr Gavin Cawley<br>School of Information Systems, University of East Anglia<br><a href="http://theoval.sys.uea.ac.uk/~gcc/svm/toolbox/" target="_blank" rel="noopener">http://theoval.sys.uea.ac.uk/~gcc/svm/toolbox/</a>  </p>
<p>LS-SVM - SISTA<br><a href="http://www.esat.kuleuven.ac.be/sista/lssvmlab/" target="_blank" rel="noopener">http://www.esat.kuleuven.ac.be/sista/lssvmlab/</a> </p>
<p>SVM toolboxes<br><a href="http://www.cs.wisc.edu/dmi/svm/" target="_blank" rel="noopener">http://www.cs.wisc.edu/dmi/svm/</a> </p>
<p>LSVM Lagrangian Support Vector Machine<br><a href="http://www.cs.wisc.edu/dmi/lsvm" target="_blank" rel="noopener">http://www.cs.wisc.edu/dmi/lsvm</a></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>希腊字母发音对照表</title>
    <url>/6244.html</url>
    <content><![CDATA[<h2 id="希腊字母发音对照表"><a href="#希腊字母发音对照表" class="headerlink" title="希腊字母发音对照表"></a>希腊字母发音对照表</h2><p> <img alt="这里写图片描述" data-src="http://img.blog.csdn.net/20150725162032105"></p>
<ul>
<li>转载：<a href="http://www.360doc.com/content/10/0505/21/339365_26252025.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/10/0505/21/339365_26252025.shtml</a></li>
<li>推荐：<a href="http://app.baidu.com/greekalphabeta?keyword=%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D%E8%AF%BB%E9%9F%B3" target="_blank" rel="noopener">希腊字母发音App</a></li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>tar:Exiting with failure status due to previous errors</title>
    <url>/b1d9.html</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul>
<li>使用tar命令解压一个*.tar.gz文件，文件在/usr/local/目录下，使用普通用户解压。解压失败，显示错误：tar: Exiting with failure status due to previous errors</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>需要root权限。<ul>
<li>切换到root用户执行命令即可。</li>
</ul>
</li>
<li>没有在当前目录<ul>
<li>切换到当前目录再执行命令。</li>
</ul>
</li>
</ul>
<h2 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><ul>
<li><a href="http://www.360doc.com/content/13/0119/09/1317564_261143499.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/13/0119/09/1317564_261143499.shtml</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware的虚拟机无法ping到</title>
    <url>/c2de.html</url>
    <content><![CDATA[<ul>
<li>问题：无法ping到VMware中的虚拟机。网络模式选择Host Only，系统是CentOS6.4，重新建立一个网络连接，使用静态IP。但是，在宿主机上面无法ping到该虚拟机，登录虚拟机之后，Terminal中运行命令ifconfig之后，可以ping到。</li>
<li>分析：应该什么没有开启，必须等到用户登录之后才开启。。。</li>
<li>解决方法：编辑上面新建的网络，勾选“Available to all users”,重启虚拟机，问题就解决了。</li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机移动后，无法连网</title>
    <url>/438c.html</url>
    <content><![CDATA[<h1 id="虚拟机移到另一台计算机上之后无法联网"><a href="#虚拟机移到另一台计算机上之后无法联网" class="headerlink" title="虚拟机移到另一台计算机上之后无法联网"></a>虚拟机移到另一台计算机上之后无法联网</h1><h2 id="一、没有开启DHCP和NAT服务"><a href="#一、没有开启DHCP和NAT服务" class="headerlink" title="一、没有开启DHCP和NAT服务"></a>一、没有开启DHCP和NAT服务</h2><ul>
<li>Windows操作系统下</li>
<li>我的电脑→右键→管理→服务</li>
<li>设置<strong>VMware DHCP Service</strong>自启</li>
<li>设置<strong>VMware NAT Service</strong>自启</li>
</ul>
<blockquote>
<p>启动这两项服务之后，Vmware选择NAT网络连接方式，虚拟机即可联网。</p>
</blockquote>
<a id="more"></a>
<h2 id="二、没有eth0"><a href="#二、没有eth0" class="headerlink" title="二、没有eth0"></a>二、没有eth0</h2><ul>
<li>问题：虚拟机复制之后，没有eth0</li>
<li>方法：删除配置文件，如下命令：<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo rm <span class="regexp">/etc/u</span>dev<span class="regexp">/rules.d/</span>*net.rules</span><br></pre></td></tr></table></figure></li>
<li>重启电脑，自动生成上述文件。问题解决。</li>
</ul>
<h2 id="三、首次打开时的选项"><a href="#三、首次打开时的选项" class="headerlink" title="三、首次打开时的选项"></a>三、首次打开时的选项</h2><ul>
<li>首次打开移动或复制的虚拟机时，VMware会弹出对话框。</li>
<li>如果移动了虚拟机，就选择“移动虚拟机”</li>
<li>如果复制了虚拟机，就选择后“复制虚拟机”</li>
<li>VMware会根据选项，自动作出一些修改。</li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-安装-Python包</title>
    <url>/bdb8.html</url>
    <content><![CDATA[<blockquote>
<p>Ubuntu下安装Python包可以使用两种方法，一种是用<strong><code>apt-get</code></strong>，另一种是使用<strong><code>pip</code></strong>。</p>
</blockquote>
<h2 id="apt-get安装示例"><a href="#apt-get安装示例" class="headerlink" title="apt-get安装示例"></a>apt-get安装示例</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install python-numpy</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install python-matplotlib </span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install python-scipy</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install python-sklearn</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install python-setuptools </span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install python-pip </span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install python-jinja2</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install python-PIL </span><br><span class="line">sudo aptp-<span class="builtin-name">get</span> install python-dev</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install ipython</span><br></pre></td></tr></table></figure>
<h2 id="pip安装示例"><a href="#pip安装示例" class="headerlink" title="pip安装示例"></a>pip安装示例</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo pip <span class="keyword">install</span> nolearn​</span><br><span class="line">sudo pip <span class="keyword">install</span> Theano</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-安装-有道词典</title>
    <url>/8713.html</url>
    <content><![CDATA[<blockquote>
<p>Windows下的有道词典非常地好用，在Ubuntu下也可以使用有道词典啦！！！</p>
</blockquote>
<h2 id="添加源，并更新"><a href="#添加源，并更新" class="headerlink" title="添加源，并更新"></a>添加源，并更新</h2><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加软件源</span></span><br><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:justzx2011/openyoudao-v0.4</span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
<h2 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装软件包</span></span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install openyoudao</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu使用过程中遇到的问题</title>
    <url>/abf0.html</url>
    <content><![CDATA[<h1 id="打开终端的方法"><a href="#打开终端的方法" class="headerlink" title="打开终端的方法"></a>打开终端的方法</h1><h2 id="1-快捷键"><a href="#1-快捷键" class="headerlink" title="1. 快捷键"></a>1. 快捷键</h2><ul>
<li>打开终端对额快捷键：<code>[Ctrl] + [Alt] + [T]</code></li>
</ul>
<h2 id="2-Dash主页图标"><a href="#2-Dash主页图标" class="headerlink" title="2. Dash主页图标"></a>2. Dash主页图标</h2><ul>
<li>在Dash主页中搜索<code>terminal</code>，即可找到终端。</li>
</ul>
<a id="more"></a>
<h1 id="打开Dash的快捷键"><a href="#打开Dash的快捷键" class="headerlink" title="打开Dash的快捷键"></a>打开Dash的快捷键</h1><ul>
<li>windows键</li>
</ul>
<h1 id="将-添加到PATH"><a href="#将-添加到PATH" class="headerlink" title="将./添加到PATH"></a>将./添加到PATH</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>编写的脚本文件test.py，赋予执行权限之后，每一次都需下面的命令来执行。想要省去<code>./</code><br><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">./<span class="keyword">test</span>.py</span><br></pre></td></tr></table></figure><br>变成<br><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">test</span>.py</span><br></pre></td></tr></table></figure></p>
<h2 id="1-临时方法"><a href="#1-临时方法" class="headerlink" title="1. 临时方法"></a>1. 临时方法</h2><p>在终端中即可修改，但是重新登陆后失效。</p>
<p>执行如下命令即可。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH="$PATH:."</span><br></pre></td></tr></table></figure></p>
<h2 id="2-修改environment文件"><a href="#2-修改environment文件" class="headerlink" title="2. 修改environment文件"></a>2. 修改environment文件</h2><ul>
<li>修改/etc/environment文件，可以永久有效。</li>
<li>需要root权限</li>
<li>需要重启电脑生效</li>
<li>添加在其他路径的前面</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>environment</span><br></pre></td></tr></table></figure>
<p>输入密码，修改PATH。<br>修改前：<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">PATH</span>=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"</span></span><br></pre></td></tr></table></figure><br>修改后：<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">PATH</span>=<span class="string">".:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"</span></span><br></pre></td></tr></table></figure><br>注意：<code>.</code>添加在<strong>最前面</strong>。</p>
<ul>
<li>输入以下命令，使配置立刻生效，避免重启电脑。</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>environment</span><br></pre></td></tr></table></figure>
<h2 id="3-修改～-bashrc-文件"><a href="#3-修改～-bashrc-文件" class="headerlink" title="3. 修改～/.bashrc 文件"></a>3. 修改～/.bashrc 文件</h2><ul>
<li>该文件编辑保存后，可立即在新打开的终端窗口内生效。</li>
<li>该方式只对当前用户有效。</li>
<li>在该文件的最后添加如下语句</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=.:$PATH</span><br></pre></td></tr></table></figure>
<h2 id="4-修改profile-文件"><a href="#4-修改profile-文件" class="headerlink" title="4. 修改profile 文件"></a>4. 修改profile 文件</h2><ul>
<li>文件位置：<strong><code>/etc/profile</code></strong></li>
<li>该文件编辑保存后，重启系统，变量生效。</li>
<li>该方式添加的变量对所有的用户都有效。</li>
<li>在文件的最后面追加：</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=.:$PATH</span><br></pre></td></tr></table></figure>
<h1 id="安装软件源码的步骤"><a href="#安装软件源码的步骤" class="headerlink" title="安装软件源码的步骤"></a>安装软件<strong>源码</strong>的步骤</h1><p>分为3个步骤<br><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line"><span class="built_in">make</span> </span><br><span class="line"><span class="built_in">make</span> install</span><br><span class="line"><span class="built_in">make</span> clean <span class="meta">#清理临时文件</span></span><br></pre></td></tr></table></figure><br><a href="http://www.cnblogs.com/huangfenghit/archive/2011/02/17/1957057.html" target="_blank" rel="noopener">参考</a></p>
<h1 id="vim不显色的问题"><a href="#vim不显色的问题" class="headerlink" title="vim不显色的问题"></a>vim不显色的问题</h1><ul>
<li>打开vim查看加载那些脚本。底行模式下输入<code>:scriptnames</code>。</li>
<li>设置<code>.vimrc</code>文件，将该文件设置成以下内容。</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">set</span> nocompatible        <span class="string">" Vim settings, not Vi settings.  must be first</span></span><br><span class="line"><span class="string">set autoindent          "</span> Auto<span class="built_in"> align </span>when insert new line, <span class="keyword">for</span> instance, when using o <span class="keyword">or</span> O <span class="keyword">to</span> insert new line.</span><br><span class="line"><span class="builtin-name">set</span> ruler               <span class="string">" Show ruler at the bottom-right of vim window</span></span><br><span class="line"><span class="string">set showcmd</span></span><br><span class="line"><span class="string">set backspace=indent,eol,start          "</span> <span class="builtin-name">Enable</span> delete <span class="keyword">for</span> backspace under insert mode<span class="string">"</span></span><br><span class="line"><span class="string">colorscheme darkblue</span></span><br><span class="line"><span class="string">set number              "</span> Show line number</span><br><span class="line">syntax on</span><br><span class="line"><span class="keyword">if</span> &amp;term =~ <span class="string">"xterm"</span></span><br><span class="line">  <span class="keyword">if</span> has(<span class="string">"terminfo"</span>)</span><br><span class="line">    <span class="builtin-name">set</span> <span class="attribute">t_Co</span>=8</span><br><span class="line">    <span class="builtin-name">set</span> <span class="attribute">t_Sf</span>=^[[3%p1%dm</span><br><span class="line">    <span class="builtin-name">set</span> <span class="attribute">t_Sb</span>=^[[4%p1%dm</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="builtin-name">set</span> <span class="attribute">t_Co</span>=8</span><br><span class="line">    <span class="builtin-name">set</span> <span class="attribute">t_Sf</span>=^[[3%dm</span><br><span class="line">    <span class="builtin-name">set</span> <span class="attribute">t_Sb</span>=^[[4%dm</span><br><span class="line">  endif</span><br><span class="line">endif</span><br></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/softwaretesting/archive/2012/01/10/2317820.html" target="_blank" rel="noopener">参考文章</a></p>
<h1 id="vim不能正常使用方向键与退格键的问题"><a href="#vim不能正常使用方向键与退格键的问题" class="headerlink" title="vim不能正常使用方向键与退格键的问题"></a>vim不能正常使用方向键与退格键的问题</h1><ul>
<li>vim出现问题的原因可能是由于版本低</li>
<li>在7.3中出现这些问题，但是在vim7.4中没有这些问题。<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2></li>
<li>安装vim full 版本。full版本下键盘正常。<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2></li>
<li>在vi底行模式下，使用命令<strong><code>: set nocompatible</code></strong>，就是设置vi不使用兼容模式。</li>
</ul>
<p><a href="http://www.2cto.com/os/201204/126724.html" target="_blank" rel="noopener">参考文章</a></p>
<h1 id="如何是配置立即生效"><a href="#如何是配置立即生效" class="headerlink" title="如何是配置立即生效"></a>如何是配置立即生效</h1><ul>
<li>使配置立即生效的命令<strong><code>source</code></strong></li>
<li>好处：不用重启电脑</li>
<li>示例1：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使environtment修改后立即生效</span></span><br><span class="line">source <span class="regexp">/etc/</span>environment</span><br></pre></td></tr></table></figure>
<ul>
<li>示例2：</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">#使<span class="keyword">profile</span>修改后立即生效</span><br><span class="line"><span class="keyword">source</span> /etc/<span class="keyword">profile</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习笔记(未完)</title>
    <url>/8f01.html</url>
    <content><![CDATA[<h1 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul>
<li><p><a href="http://www.cnblogs.com/vamei/archive/2012/09/13/2682778.html" target="_blank" rel="noopener">Python快速教程</a></p>
</li>
<li><p><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/" target="_blank" rel="noopener">Python2.7教程廖雪峰</a></p>
</li>
<li><p><a href="http://www.w3cschool.cc/python/python-tutorial.html" target="_blank" rel="noopener">Python基础教程W3School</a></p>
</li>
</ul>
<a id="more"></a>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li>Ubuntu下好用的终端xfce</li>
<li><a href="http://www.shiyanlou.com/courses/214" target="_blank" rel="noopener">实验楼：在线学习</a></li>
</ul>
<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ul>
<li>字符串是特殊的<code>元组</code></li>
<li>序列是一组有序的对象的集合</li>
<li>序列有两种：(元组)和[列表]</li>
<li>markdown中代码块要以空行开始</li>
</ul>
<h2 id="Python知识结构"><a href="#Python知识结构" class="headerlink" title="Python知识结构"></a>Python知识结构</h2><ul>
<li>基本的数据类型</li>
<li>数据结构<ul>
<li>列表<ul>
<li>创建：[]、list()</li>
<li>索引：下标和切片</li>
</ul>
</li>
<li>元组</li>
<li>字典<ul>
<li>创建：{}、dict()</li>
<li>索引：键值</li>
</ul>
</li>
<li>集合</li>
</ul>
</li>
<li>运算<ul>
<li>数学运算<ul>
<li>加(+)、减(-)、乘(<em>)、除(/)、乘方(`*</em>`)、求余(%)</li>
</ul>
</li>
<li>比较运算<ul>
<li>==、!=</li>
<li>&lt;、&lt;=</li>
<li><blockquote>
<p>、&gt;=</p>
</blockquote>
</li>
<li>is、is not</li>
</ul>
</li>
<li>逻辑运算<ul>
<li>True、False</li>
</ul>
</li>
</ul>
</li>
<li><p>基本语法</p>
<ul>
<li>使用<code>缩进</code>表示<code>代码块</code>，而不是<code>{}</code></li>
<li>条件中的<code>()</code>一般省略</li>
<li>一行表示一个语句，一般不适用<code>;</code>结束语句</li>
<li>使用#注释(程序开头文档使用3个引号)</li>
</ul>
</li>
<li><p>结构</p>
<ul>
<li><p>选择</p>
<ul>
<li><p>if、elif、else</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">5</span>&gt;<span class="number">3</span>:</span><br><span class="line">	print(<span class="string">"Yes"</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>循环</p>
<ul>
<li><p>for 遍历可迭代对象(序列)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">	print(value)</span><br></pre></td></tr></table></figure></li>
<li><p>while 一般的循环</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">10</span>:</span><br><span class="line">	print(i)</span><br><span class="line">	i+=<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>中断循环<ul>
<li>break 跳出<code>本(一)层</code>循环</li>
<li>continue 跳出<code>本(一)次</code>循环</li>
</ul>
</li>
</ul>
</li>
<li><p>函数</p>
<ul>
<li>函数可以实现：重复使用一段程序</li>
<li>def、函数名、形参、冒号、函数体</li>
<li>不可变对象(值传递)，可变对象（列表：址传递）</li>
<li><p>当没有return时，返回None</p>
  <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumInt</span><span class="params">(a,b)</span></span><span class="symbol">:</span></span><br><span class="line">	s = a+b </span><br><span class="line">	<span class="keyword">return</span> s</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>面向对象<ul>
<li>复用、封装、继承</li>
<li>对象.属性</li>
<li>self (相当于C++、Java中的<code>this</code>)</li>
<li><strong>init</strong> (构造函数)</li>
</ul>
</li>
<li>everything is object in python<ul>
<li>翻译：python中的一切都是对象</li>
</ul>
</li>
<li>学习Python<ul>
<li>dir()<ul>
<li>查询类（或对象）的属性（包括属性值和方法属性）</li>
</ul>
</li>
<li>help()<ul>
<li>查询帮助文档</li>
</ul>
</li>
<li><a href="https://www.python.org/doc/" target="_blank" rel="noopener">官方文档</a></li>
</ul>
</li>
</ul>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>容器：可以存储多个元素的对象。如列表和字典</li>
<li>del：关键字，用于删除对象</li>
<li>可变数据对象：可以通过引用其元素，改变对象自身（in-place change）,例如列表和字典。</li>
<li>不可变数据对象：不同改变对象本身，只能改变引用的指向，例如数字和字符串。</li>
<li>Python 一切皆对象</li>
<li>任何一个有<strong>call</strong>()特殊方法的对象都被当作是函数。</li>
<li>Python是多范式语言（Multi-paradigm）：面向对象，面向过程编程。还有函数式和声明式。</li>
<li>特殊方法的前后各有两个下划线。如<strong>init</strong>()</li>
<li>Python的运算符（+-等）、内置函数和列表的引用是通过调用对象的特殊方法实现的</li>
<li>上下文管理器（context manager）：用于规定某个对象的使用范围。<code>with... as...</code>。<ul>
<li>相当于使用<code>缩进</code>规定了f的使用范围。</li>
<li>使用上下文管理器时，进入程序块时，调用对象的<strong>enter</strong>()；离开程序块时，调用<strong>exit</strong>()。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'new.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">	print(f.closed)</span><br><span class="line">	f.write(<span class="string">'Hello, world!'</span>)</span><br><span class="line">print(f.closed)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记</title>
    <url>/86b7.html</url>
    <content><![CDATA[<h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><h3 id="终端和控制台"><a href="#终端和控制台" class="headerlink" title="终端和控制台"></a>终端和控制台</h3><ul>
<li>终端：一台只有显示器和键盘，能够通过串口连接到计算机的设备就叫终端。一台计算机可以有N个终端。</li>
<li>控制台：直接连接在电脑上的那套键盘和显示器就叫做控制台。一台计算机只有一个控制台。</li>
<li>区别：终端是通过串口连接上的，不是计算机本身就有的设备；控制台是计算机本身就有的设备。</li>
</ul>
<h3 id="终端的本质"><a href="#终端的本质" class="headerlink" title="终端的本质"></a>终端的本质</h3><ul>
<li>终端本质上对应着Linux上的/dev/tty设备。</li>
</ul>
<h3 id="终端模拟器"><a href="#终端模拟器" class="headerlink" title="终端模拟器"></a>终端模拟器</h3><p>gnome-terminal、kconsole、xterm、xfce等等</p>
<a id="more"></a>
<h3 id="终端的6个Virtual-consoles"><a href="#终端的6个Virtual-consoles" class="headerlink" title="终端的6个Virtual consoles"></a>终端的6个Virtual consoles</h3><ul>
<li>Linux默认提供了6个virtual consoles，可以通过[Ctrl]+[Alt]+[F1]~[F6]进行切换。</li>
<li>切换回图形界面：[Ctrl]+[Alt]+[F7]</li>
</ul>
<h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><h3 id="重要快捷键"><a href="#重要快捷键" class="headerlink" title="重要快捷键"></a>重要快捷键</h3><div class="table-container">
<table>
<thead>
<tr>
<th>按键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td> [Tab]</td>
<td>命令补全</td>
</tr>
<tr>
<td> [Ctrl]+C</td>
<td>强行终止当前程序</td>
</tr>
<tr>
<td>  Ctrl+d</td>
<td>键盘输入结束或退出终端</td>
</tr>
<tr>
<td>Ctrl+s</td>
<td>暂定当前程序，暂停后按下任意键恢复运行</td>
</tr>
<tr>
<td>Ctrl+z</td>
<td>将当前程序放到后台运行，恢复到前台为命令fg</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>将光标移至输入行头，相当于Home键</td>
</tr>
<tr>
<td>Ctrl+e</td>
<td>将光标移至输入行末，相当于End键</td>
</tr>
<tr>
<td>Ctrl+k</td>
<td>删除从光标所在位置到行末</td>
</tr>
<tr>
<td>Alt+Backspace</td>
<td>向前删除一个单词</td>
</tr>
<tr>
<td>Shift+PgUp</td>
<td>将终端显示向上滚动</td>
</tr>
<tr>
<td>Shift+PgDn</td>
<td>将终端显示向下滚动</td>
</tr>
</tbody>
</table>
</div>
<h3 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h3><p>向上键</p>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><div class="table-container">
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>匹配 0 或多个字符</td>
</tr>
<tr>
<td>?</td>
<td>匹配任意一个字符</td>
</tr>
<tr>
<td>[list]</td>
<td>匹配 list 中的任意单一字符</td>
</tr>
<tr>
<td>[!list]</td>
<td>匹配 除list 中的任意单一字符以外的字符</td>
</tr>
<tr>
<td>[c1-c2]</td>
<td>匹配 c1-c2 中的任意单一字符 如：[0-9] [a-z]</td>
</tr>
<tr>
<td>{string1,string2,…}</td>
<td>匹配 sring1 或 string2 (或更多)其一字符串</td>
</tr>
<tr>
<td>{c2..c2}</td>
<td>匹配 c1-c2 中全部字符 如{1..10}</td>
</tr>
</tbody>
</table>
</div>
<h3 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h3><blockquote>
<p>man command_name</p>
</blockquote>
<h2 id="一些命令"><a href="#一些命令" class="headerlink" title="一些命令"></a>一些命令</h2><ul>
<li>banner 绘制图形<ul>
<li>sudo apt-get update; sudo apt-get install sysvbanner</li>
<li>banner shiyanlou</li>
</ul>
</li>
</ul>
<h2 id="Linux用户管理"><a href="#Linux用户管理" class="headerlink" title="Linux用户管理"></a>Linux用户管理</h2><h3 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h3><ul>
<li>who</li>
</ul>
<blockquote>
<p>who am i<br>或<br>who mom likes<br>whoami  #只返回用户名</p>
</blockquote>
<ul>
<li>pts/0中的pts表示伪终端，“伪”是相对于/dev/tty设备而言。</li>
<li>[Ctrl]+[Alt]+[F1]~[F7]进行切换的/dev/tty是真终端</li>
<li>0是伪终端的序号。</li>
</ul>
<h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><ul>
<li>Linux里面一切皆文件</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>标识符</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td>目录</td>
</tr>
<tr>
<td>l</td>
<td>软链接</td>
</tr>
<tr>
<td>b</td>
<td>块设备</td>
</tr>
<tr>
<td>c</td>
<td>字符设备</td>
</tr>
<tr>
<td>s</td>
<td>socket</td>
</tr>
<tr>
<td>p</td>
<td>管道</td>
</tr>
<tr>
<td>-</td>
<td>普通文件</td>
</tr>
</tbody>
</table>
</div>
<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><ul>
<li>rwx(421)</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>权限</th>
<th>二进制数</th>
<th>十进制数</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>100</td>
<td>4</td>
</tr>
<tr>
<td>w</td>
<td>010</td>
<td>2</td>
</tr>
<tr>
<td>x</td>
<td>001</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown-语法-笔记</title>
    <url>/59a5.html</url>
    <content><![CDATA[<h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><ul>
<li><a href="http://blog.csdn.net/whqet/article/details/44900145" target="_blank" rel="noopener">CSDN Markdown简明教程</a></li>
<li><a href="http://blog.csdn.net/whqet/article/details/44274215" target="_blank" rel="noopener">CSDN Markdown简明教程1-关于Markdown</a></li>
<li><a href="http://blog.csdn.net/whqet/article/details/44274999" target="_blank" rel="noopener">CSDN Markdown简明教程2-基本使用</a></li>
<li><a href>CSDN Markdown简明教程3-表格和公式</a></li>
<li><a href>CSDN Markdown简明教程4-UML图</a></li>
<li><a href>CSDN Markdown简明教程5-快速上手</a></li>
</ul>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><em>斜体</em>：<code>*斜体*</code><br><strong>粗体</strong>：<code>**粗体**</code><br><strong><em>斜体</em></strong>：<code>***斜体+粗体***</code></p>
<a id="more"></a>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><del>删除线</del>：<del>删除线</del></p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre><code># 一号标题
## 二号标题
### 三号标题
#### 四号标题
##### 五号标题
###### 六号标题
</code></pre><p>效果如下所示：</p>
<h1 id="一号标题"><a href="#一号标题" class="headerlink" title="一号标题"></a>一号标题</h1><h2 id="二号标题"><a href="#二号标题" class="headerlink" title="二号标题"></a>二号标题</h2><h3 id="三号标题"><a href="#三号标题" class="headerlink" title="三号标题"></a>三号标题</h3><h4 id="四号标题"><a href="#四号标题" class="headerlink" title="四号标题"></a>四号标题</h4><h5 id="五号标题"><a href="#五号标题" class="headerlink" title="五号标题"></a>五号标题</h5><h6 id="六号标题"><a href="#六号标题" class="headerlink" title="六号标题"></a>六号标题</h6><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="一般引用"><a href="#一般引用" class="headerlink" title="一般引用"></a>一般引用</h3><pre><code>&gt; 引用一行
</code></pre><p>效果如下所示：</p>
<blockquote>
<p>引用一行</p>
<p>引用段落：Markdown是一种轻量级的标记语言，把作者从繁杂的排版工作中解放出来，实现<strong>易读易写</strong>的文章写作，已经逐渐成为事实上的行业标准。<br>引用段落的时候，可以偷懒只在整个段落的第一行最前面加&gt;。<br><strong>结束引用，用个<em>空行</em></strong></p>
</blockquote>
<p>效果如下所示：</p>
<pre><code>&gt; 引用段落：Markdown是一种轻量级的标记语言，把作者从繁杂的排版工作中解放出来，实现**易读易写**的文章写作，已经逐渐成为事实上的行业标准。
&gt; 引用段落的时候，可以偷懒只在整个段落的第一行最前面加&gt;。
&gt;**结束引用，用个*空行***
</code></pre><h3 id="嵌套引用"><a href="#嵌套引用" class="headerlink" title="嵌套引用"></a>嵌套引用</h3><pre><code>&gt; 外引用
&gt;  &gt; 嵌套引用
 &gt; 
&gt;  外引用
</code></pre><p>效果如下所示：</p>
<blockquote>
<p>外引用</p>
<blockquote>
<p>嵌套引用</p>
</blockquote>
<p> 外引用</p>
</blockquote>
<h2 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h2><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><p>行内通过’<code>高亮</code>‘来实现高亮。    </p>
<pre><code>`高亮`文字
</code></pre><p>效果如下所示：<br><code>高亮</code>文字</p>
<h3 id="区块代码"><a href="#区块代码" class="headerlink" title="区块代码"></a>区块代码</h3><ul>
<li>如果需要代码块和语法高亮，可以使用三个反引号开始和结束一段代码；同时可以标注语言类型。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Hello,World!"</span></span><br></pre></td></tr></table></figure>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2></li>
</ul>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li>星号(*)/加号(+)或减号(-)为无序列表标记</li>
<li>空行开始，空行结束</li>
</ul>
<p><strong>星号</strong><br><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>Red</span><br><span class="line"><span class="bullet">* </span>Green</span><br><span class="line"><span class="bullet">* </span>Blue</span><br></pre></td></tr></table></figure><br>效果如下所示：</p>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<p><strong>减号</strong><br><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>Red</span><br><span class="line"><span class="bullet">- </span>Green</span><br><span class="line"><span class="bullet">- </span>Blue</span><br></pre></td></tr></table></figure><br>效果如下所示：</p>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<p><strong>加号</strong><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+ </span>Red</span><br><span class="line"><span class="bullet">+ </span>Green</span><br><span class="line"><span class="bullet">+ </span>Blue</span><br></pre></td></tr></table></figure><br>效果如下所示：</p>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ul>
<li>使用数字接着一个英文句点表示一个有序列表，</li>
<li>数字对序列没有影响</li>
<li>空行开始，空行结束<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 文字</span><br><span class="line"><span class="number">2.</span> 图片</span><br><span class="line"><span class="number">4.</span> 表格</span><br></pre></td></tr></table></figure>
效果如下所示：</li>
</ul>
<ol>
<li>文字</li>
<li>图片</li>
<li>表格</li>
</ol>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><ul>
<li>列表可以嵌套，添加tab缩进表示层次。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>文字</span><br><span class="line"><span class="bullet">    1. </span>强调</span><br><span class="line"><span class="bullet">        - </span>粗体</span><br><span class="line"><span class="bullet">        - </span>斜体</span><br><span class="line"><span class="bullet">        - </span>粗体和斜体</span><br><span class="line"><span class="bullet">    2. </span>引用</span><br><span class="line"><span class="bullet">2. </span>图片</span><br><span class="line"><span class="bullet">3. </span>表格</span><br></pre></td></tr></table></figure>
效果如下所示：</li>
</ul>
<ol>
<li>文字<ol>
<li>强调<ul>
<li>粗体</li>
<li>斜体</li>
<li>粗体和斜体</li>
</ul>
</li>
<li>引用</li>
</ol>
</li>
<li>图片</li>
<li>表格</li>
</ol>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="行内式链接"><a href="#行内式链接" class="headerlink" title="行内式链接"></a>行内式链接</h3><ul>
<li><code>[baidu](http:www.baidu.com)</code>：<a href="http:www.baidu.com" target="_blank" rel="noopener">baidu</a></li>
</ul>
<h3 id="参考式链接"><a href="#参考式链接" class="headerlink" title="参考式链接"></a>参考式链接</h3>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>双系统(Linux)时间不一致问题</title>
    <url>/a7cd.html</url>
    <content><![CDATA[<h1 id="解决双系统时间不一致问题"><a href="#解决双系统时间不一致问题" class="headerlink" title="解决双系统时间不一致问题"></a>解决双系统时间不一致问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul>
<li>最近需要使用Linux（Ubuntu），所以在自己的电脑上安装了双系统（Windows+Ubuntu）。但是发现Windows的时间不正确，每次开机时，时间都会慢8个小时。</li>
<li>每次通过同步互联网时间可以更正，但是重启后又是如此。</li>
<li>后来，发现windows time服务没有开启。将其设置为自启动之后，每次开机后依然如此。而且windows time服务没有开启。</li>
<li>最后发现<code>两个系统的时间时间相差8小时</code>，意识到时两个系统设置不同引起的。</li>
</ul>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ul>
<li>UTC即Universal Time Coordinated，协调世界时</li>
<li>GMT 即Greenwich Mean Time，格林尼治平时</li>
<li>Windows把系统硬件时间当作本地时间(local time)，即操作系统中显示的时间跟BIOS中显示的时间是一样的。</li>
<li>Linux/Unix/Mac把硬件时间当作 UTC，操作系统中显示的时间是硬件时间经过换算得来的。</li>
<li>当PC中同时有多 系统共存时，就出现了问题。</li>
</ul>
<a id="more"></a>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="方法一-Ubuntu不使用UTC"><a href="#方法一-Ubuntu不使用UTC" class="headerlink" title="方法一 Ubuntu不使用UTC"></a>方法一 Ubuntu不使用UTC</h3><p>如果Ubuntu 不使用 UTC 时间，则可以与 Windows时间 保持一致。<br>ubuntu默认开启UTC,即协调世界时，关闭它即可</p>
<pre><code>sudo vi /etc/default/rcS
</code></pre><p>将<code>UTC=yes</code>改为<code>UTC=no</code></p>
<h3 id="方法二-修改-Windows-对硬件时间的对待方式"><a href="#方法二-修改-Windows-对硬件时间的对待方式" class="headerlink" title="方法二 修改 Windows 对硬件时间的对待方式"></a>方法二 修改 Windows 对硬件时间的对待方式</h3><ul>
<li>让 Windows 把硬件时间当作 UTC</li>
<li>方法：<ul>
<li>开 始-&gt;运行-&gt;CMD，在命令行中输入下面命令并回车<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">Reg add KLM<span class="symbol">\S</span>YSTEM<span class="symbol">\C</span>urrentControlSet<span class="symbol">\C</span>ontrol<span class="symbol">\T</span>imeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="CentOS时间同步问题"><a href="#CentOS时间同步问题" class="headerlink" title="CentOS时间同步问题"></a>CentOS时间同步问题</h1><h2 id="编辑时间配置文件"><a href="#编辑时间配置文件" class="headerlink" title="编辑时间配置文件"></a>编辑时间配置文件</h2><ul>
<li>使用vi编辑<code>/etc/sysconfig/clock</code>文件，添加如下内容：<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ZONE</span>=<span class="string">"Asia/Shanghai"</span></span><br><span class="line"><span class="attr">UTC</span>=<span class="literal">false</span>       <span class="comment">#设置为false，硬件时钟不于utc时间一致</span></span><br><span class="line"><span class="attr">ARC</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
<li>使配置立即生效<code>source /etc/sysconfig/clock</code></li>
</ul>
<h2 id="设置为上海时区"><a href="#设置为上海时区" class="headerlink" title="设置为上海时区"></a>设置为上海时区</h2><ul>
<li>执行下面的命令，将Linux的时区设置为上海时区<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ln -sf <span class="regexp">/usr/</span>share<span class="regexp">/zoneinfo/</span>Asia<span class="regexp">/Shanghai    /</span>etc<span class="regexp">/localtime</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="对准时间"><a href="#对准时间" class="headerlink" title="对准时间"></a>对准时间</h2><ul>
<li>注意：需要联网</li>
<li>安装ntpdate的命令:<code>yum install ntp</code></li>
<li>执行以下命令，对准时间<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ntpdate</span> <span class="selector-tag">us</span><span class="selector-class">.pool</span><span class="selector-class">.ntp</span><span class="selector-class">.org</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="设置硬件时间和系统时间一致并校准"><a href="#设置硬件时间和系统时间一致并校准" class="headerlink" title="设置硬件时间和系统时间一致并校准"></a>设置硬件时间和系统时间一致并校准</h2><ul>
<li>命令：<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/sbin/hwclock</span> <span class="params">--systohc</span>   <span class="comment">#设置硬件时间和系统时间一致并校准</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>至此，CentOS的时间已经同步了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ithov.com/linux/122268.shtml" target="_blank" rel="noopener">http://www.ithov.com/linux/122268.shtml</a></li>
<li><a href="http://os.51cto.com/art/201004/192549.htm" target="_blank" rel="noopener">http://os.51cto.com/art/201004/192549.htm</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
